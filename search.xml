<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>正则表达式必知必会</title>
      <link href="/2018/12/18/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
      <url>/2018/12/18/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>正则表达式必知必会的笔记</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h2 id="元字符表"><a href="#元字符表" class="headerlink" title="元字符表"></a>元字符表</h2><p>下面介绍的是在正则表达式中有特殊意义的字符，称为元字符</p><p><img src="/2018/12/18/正则表达式必知必会/./正则表达式符号表.png" alt="正则表达式符号表"></p><h3 id="转义符号"><a href="#转义符号" class="headerlink" title="转义符号"></a>转义符号</h3><p>如果要查找这些字符本身，需要用<code>\</code>进行转义，比如想匹配点号<code>.</code> 就需要这样写<code>\.</code>  有个特殊的例子：如果想匹配<code>\</code>就需要这样<code>\\</code></p><h2 id="匹配单个字符"><a href="#匹配单个字符" class="headerlink" title="匹配单个字符"></a>匹配单个字符</h2><h3 id="匹配字符中的一个"><a href="#匹配字符中的一个" class="headerlink" title="匹配字符中的一个"></a>匹配字符中的一个</h3><ul><li><code>.</code>：  匹配任意一个字符（除了换行符）</li><li><code>[]</code>： 匹配多个字符中的一个<ul><li>自定义字符：[akm]，匹配a、k、m中的一个</li><li>字符区间：[ASCII1-ASCII2]，可以是ASCII中的任意字符作为起始字符（<strong>ASCII1小于ASCII2</strong>），常用的有：[a-z]、[A-Z]、[0-9]、[A-Za-z]（<strong>可以有多个字符区间</strong>）</li><li>取反操作：[^a-z] 表示匹配不是a到z的任意字符，<strong>^的作用效果是整个区间</strong>，而不仅仅是跟在其后的字符<blockquote><p>-是一个元字符，表示区间，不会匹配减号，因此不需要转义</p><p>^是一个元字符，表示在[ ]中表示非匹配，不会匹配到^，因此不需要转义</p></blockquote></li></ul></li></ul><h3 id="匹配空白字符"><a href="#匹配空白字符" class="headerlink" title="匹配空白字符"></a>匹配空白字符</h3><p>也就是不可见的字符</p><table><thead><tr><th>符号</th><th>用途</th></tr></thead><tbody><tr><td>\f</td><td>匹配一个换页符。</td></tr><tr><td>\n</td><td>匹配一个换行符。</td></tr><tr><td>\r</td><td>匹配一个回车符。</td></tr><tr><td>\t</td><td>匹配一个制表符。</td></tr><tr><td>\v</td><td>匹配一个垂直制表符。</td></tr></tbody></table><h3 id="匹配特定一类的字符"><a href="#匹配特定一类的字符" class="headerlink" title="匹配特定一类的字符"></a>匹配特定一类的字符</h3><h4 id="不可见字符"><a href="#不可见字符" class="headerlink" title="不可见字符"></a>不可见字符</h4><table><thead><tr><th>符号</th><th>用途</th></tr></thead><tbody><tr><td>\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等等。<strong>等价于 [ \f\n\r\t\v]。</strong></td></tr><tr><td>\S</td><td>匹配任何非空白字符。<strong>等价于 [ ^\f\n\r\t\v]。</strong></td></tr></tbody></table><h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><table><thead><tr><th>\d</th><th>等价于[0-9]</th></tr></thead><tbody><tr><td>\D</td><td>等价于[^0-9]</td></tr></tbody></table><h4 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h4><p>匹配大小写字母、数字、下划线</p><table><thead><tr><th>\w</th><th>等价于[a-zA-Z0-9_]</th></tr></thead><tbody><tr><td>\W</td><td>等价于[^a-zA-Z0-9_]</td></tr></tbody></table><h4 id="匹配中文"><a href="#匹配中文" class="headerlink" title="匹配中文"></a>匹配中文</h4><p>需要切换匹配模式为‘u’，表示要匹配的内容为unicode编码内容,汉字的unicode起始编码是：0x4e00—0x9fa5，因此要匹配全部为中文的正则为：<code>$patern = &quot;/[\x{4e00}-\x{9fa5}]/u&quot;</code></p><h2 id="重复匹配"><a href="#重复匹配" class="headerlink" title="重复匹配"></a>重复匹配</h2><table><thead><tr><th>符号</th><th>用途</th></tr></thead><tbody><tr><td>+</td><td>出现1至多次</td></tr><tr><td>*</td><td>出现0至多次</td></tr><tr><td>？</td><td>出现0或1次</td></tr><tr><td>{n}</td><td>精确控制出现n次</td></tr><tr><td>{n,m}</td><td>区间控制，出现n至m次</td></tr><tr><td>{n,}</td><td>至少出现n次</td></tr></tbody></table><h3 id="贪心匹配"><a href="#贪心匹配" class="headerlink" title="贪心匹配"></a><strong>贪心匹配</strong></h3><p>+、*、{n,}会贪婪的进行匹配，比如下面的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;text1&lt;/b&gt; &lt;b&gt;text2&lt;/b&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;[Bb]&gt;.*&lt;/[Bb]&gt;</code> 会匹配着整体字符串，而不是两个<code>&lt;b&gt;text1&lt;/b&gt;</code> <code>&lt;b&gt;text2&lt;/b&gt;</code> </p><p>因此需要<strong>懒惰匹配</strong> ：</p><p><code>&lt;[Bb]&gt;.*?&lt;/[Bb]&gt;</code> 会匹配到两个<code>&lt;b&gt;text1&lt;/b&gt;</code> <code>&lt;b&gt;text2&lt;/b&gt;</code> </p><table><thead><tr><th>贪婪版</th><th>懒惰版</th></tr></thead><tbody><tr><td>*</td><td>*？</td></tr><tr><td>+</td><td>+？</td></tr><tr><td>{n,}</td><td>{n,}？</td></tr></tbody></table><h2 id="位置匹配"><a href="#位置匹配" class="headerlink" title="位置匹配"></a>位置匹配</h2><h3 id="单词边界（boundary）"><a href="#单词边界（boundary）" class="headerlink" title="单词边界（boundary）"></a>单词边界（boundary）</h3><p>\b：匹配单词的开始或者结束位置，也就是单词边界：单词和符号之间的边界</p><blockquote><p>单词可以是中文字符,英文字符,数字</p><p>符号可以是中文符号,英文符号,空格,制表符,换行</p></blockquote><p>具体来说：\b匹配的位置是这样的位置，这个位置位于一个能够用来构成单词的字符（\w）和一个不能用来构成单词的字符（\W）之间</p><p>例子：</p><p><code>\bcat\b</code> 可以匹配到 <code>the cat catcat</code> 中的第一个cat，<strong>因为它前面与后面都有一个单词，因此存在单词分隔符</strong>，而不会匹配到后面的catcat</p><p>这里有个<strong>一开始看不懂</strong>的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 为什么cat匹配不到，因为cat是单词，它前面与后面都有一个单词，因此存在单词分隔符</span><br><span class="line">&gt;&gt;&gt; re.findall(r&quot;\Bcat\B&quot;,&quot;the   cat  cao&quot;)</span><br><span class="line">[]</span><br><span class="line"># -却能匹配到，因为-不是单词，所以尽管它前后都有单词，但与-之间不存在单词分割符（除了-，其他\W也是一样的）</span><br><span class="line">&gt;&gt;&gt; re.findall(r&quot;\B-\B&quot;,&quot;color  -  code&quot;)</span><br><span class="line">[&apos;-&apos;]</span><br></pre></td></tr></table></figure><p>注意：java与python中有个地方不同，一个匹配失败，一个成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">" 2 "</span>;</span><br><span class="line">String rex = <span class="string">"\b2\b"</span>;</span><br><span class="line"></span><br><span class="line">Pattern pattern = Pattern.compile(rex);</span><br><span class="line">Matcher matcher = pattern.matcher(str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (matcher.matches())</span><br><span class="line">System.out.println(<span class="string">"匹配成功"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.out.println(<span class="string">"匹配不成功"</span>); <span class="comment">// 这是结果</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s=<span class="string">" 2 "</span></span><br><span class="line">&gt;&gt;&gt; m=re.search(r<span class="string">'\b2\b'</span>,s)</span><br><span class="line">&gt;&gt;&gt; m</span><br><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">1</span>, <span class="number">2</span>), match=<span class="string">'2'</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="字符串边界"><a href="#字符串边界" class="headerlink" title="字符串边界"></a>字符串边界</h3><table><thead><tr><th>符号</th><th>用途</th></tr></thead><tbody><tr><td>^</td><td>默认模式下：匹配整个字符串开始位置；<strong>在多行模式下：可以匹配换行符后的开始位置</strong></td></tr><tr><td>$</td><td>默认模式下：匹配整个字符串结束位置；<strong>在多行模式下：可以匹配换行符后的结束位置</strong></td></tr></tbody></table><h2 id="子表达式（分组）"><a href="#子表达式（分组）" class="headerlink" title="子表达式（分组）"></a>子表达式（分组）</h2><p>用<code>()</code>将正则表达式括起来的就是子表达式，子表达式可以嵌套</p><p>例子：</p><p>年份</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">19|20\d&#123;2&#125;    错误，这会匹配19或者20xx</span><br><span class="line">(19|20)\d&#123;2&#125;  正确</span><br></pre></td></tr></table></figure><p>IP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* 任意的1位或2位数字</span><br><span class="line">* 任意的以1开头的3位数字</span><br><span class="line">* 任意的以2开头，0-4为第二位的3位数字</span><br><span class="line">* 以25开头，第3位数字是0-5的3位数字</span><br><span class="line">如下，实现了匹配上面的合法的0-255之间的数字</span><br><span class="line">(\d&#123;1,2&#125;)  | (1\d&#123;2&#125;)  | (2[0-4]\d) | (25[0-5]) </span><br><span class="line">因此匹配IP的正则如下：</span><br><span class="line">(((\d&#123;1,2&#125;)|(1\d&#123;2&#125;)|(2[0-4]\d)|(25[0-5]))\.)&#123;3&#125; ((\d&#123;1,2&#125;)|(1\d&#123;2&#125;)|(2[0-4]\d) |(25[0-5]))</span><br></pre></td></tr></table></figure><h3 id="子表达式嵌套"><a href="#子表达式嵌套" class="headerlink" title="子表达式嵌套"></a>子表达式嵌套</h3><p>使用的是<strong>深度优先搜索</strong>，以下面的例子来解释：</p><ul><li>group(0)代表整个正则表达式</li><li>group(1)代表第1个子表达式，也就是最外层的括号</li><li>group(2)代表第2个子表达式<br><img src="/2018/12/18/正则表达式必知必会/./子表达式嵌套问题.png" alt="子表达式嵌套问题"></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s=&quot;jizx333hhhh&quot;</span><br><span class="line">&gt;&gt;&gt; m=re.search(r&quot;((\w+?)(\d(\d(\d)))(\w&#123;4&#125;))&quot;,s)</span><br><span class="line">&gt;&gt;&gt; m.group(0)</span><br><span class="line">&apos;jizx333hhhh&apos;</span><br><span class="line">&gt;&gt;&gt; m.group(1)   # 上图中的根节点</span><br><span class="line">&apos;jizx333hhhh&apos;</span><br><span class="line">&gt;&gt;&gt; m.group(2)</span><br><span class="line">&apos;jizx&apos;</span><br><span class="line">&gt;&gt;&gt; m.group(3)</span><br><span class="line">&apos;333&apos;</span><br><span class="line">&gt;&gt;&gt; m.group(4)</span><br><span class="line">&apos;33&apos;</span><br><span class="line">&gt;&gt;&gt; m.group(5)</span><br><span class="line">&apos;3&apos;</span><br><span class="line">&gt;&gt;&gt; m.group(6)</span><br><span class="line">&apos;hhhh&apos;</span><br><span class="line">&gt;&gt;&gt; m.group(7)</span><br><span class="line">IndexError: no such group</span><br></pre></td></tr></table></figure><h3 id="不保存分组"><a href="#不保存分组" class="headerlink" title="不保存分组?:"></a>不保存分组<code>?:</code></h3><p><code>(:X)</code>在正则中表示所匹配的子组X不作为结果输出，称为非捕获分组，不想被捕获的时候使用，可以提高程序执行速度</p><p>正常情况(X)中的X会被作为新增的一个组序号输出，比如(A)(B)，A的序号1，B的序号2<br>如果(?:A)(B)，A将没有序号不输出，B的序号为1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">text=<span class="string">"我的电话是1234567890"</span></span><br><span class="line">pat1=<span class="string">r"(\d&#123;3&#125;)(\d&#123;3&#125;)(\d&#123;4&#125;)"</span></span><br><span class="line">pat2=<span class="string">r"(?:\d&#123;3&#125;)(\d&#123;3&#125;)(\d&#123;4&#125;)"</span></span><br><span class="line"></span><br><span class="line">match=re.search(pat1,s)</span><br><span class="line">print(match.groups())</span><br><span class="line"></span><br><span class="line">match=re.search(pat2,s)</span><br><span class="line">print(match.groups())</span><br><span class="line"></span><br><span class="line"><span class="comment"># ('123', '456', '7890')</span></span><br><span class="line"><span class="comment"># ('456', '7890')</span></span><br></pre></td></tr></table></figure><h3 id="python中的一个坑"><a href="#python中的一个坑" class="headerlink" title="python中的一个坑"></a>python中的一个坑</h3><p>python中split方法，在匹配部分加上括号 <code>()</code>之后所切出的结果是不同的，匹配模式加<strong>括号</strong>表示<strong>保留匹配到的分隔子串</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">res=re.split(<span class="string">"\|"</span> , <span class="string">' runoob|runoob|runoob.'</span>)</span><br><span class="line"><span class="comment"># [' runoob', 'runoob', 'runoob.']</span></span><br><span class="line"></span><br><span class="line">res=re.split(<span class="string">"(\|)"</span> , <span class="string">' runoob|runoob|runoob.'</span>) <span class="comment"># 添加括号，会保留分割符</span></span><br><span class="line"><span class="comment"># [' runoob', '|', 'runoob', '|', 'runoob.']</span></span><br></pre></td></tr></table></figure><p>如果你不想保留分割字符串到结果列表中去，但仍然需要使用到括号来分组正则表达式的话， 确保你的分组是非捕获分组，形如 <code>(?:pattern)</code></p><p>##回溯引用</p><p>回溯引用指的是模式的后半部分引用在前半部分中定义的子表达式。</p><p>\0表示整个正则表达式、\1表示第一个子表达式、\2表示第二个子表达式，以此类推</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this is is a apple,and and I like it it.</span><br><span class="line">[ ]+(\w+)[ ]+\1     匹配重复出现两次的单词，\1表示的就是(\w+)</span><br></pre></td></tr></table></figure><h3 id="子表达式-分组-命名"><a href="#子表达式-分组-命名" class="headerlink" title="子表达式(分组)命名"></a>子表达式(分组)命名</h3><p>除了使用上面\1 、\2的方式，来引用子表达式，还可以为子表达式命名，然后引用。</p><p>为子表达式命名：<code>(?P&lt;name&gt; rexp)</code></p><p>引用子表达式：<code>(?P=name)</code></p><p>例子：</p><p>匹配单、双引号包围的字符串</p><p>文本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">she said: &quot;I love you&quot;,and he replied &apos;me,too&apos;</span><br></pre></td></tr></table></figure><p>正则表达式：<code>(?P&lt;quote&gt;[&#39;&quot;]).*?(?P=quote)</code> 等价于<code>([&#39;&quot;]).*?\1</code></p><p>结果：</p><p>she said: <strong>“I love you”</strong>,and he replied <strong>‘me,too’</strong></p><h3 id="使用回溯替换"><a href="#使用回溯替换" class="headerlink" title="使用回溯替换"></a>使用回溯替换</h3><p>将电话格式进行修改：</p><p>文本：</p><p><code>我的电话是1234567890</code></p><p>搜索表达式：</p><p><code>(\d{3})(\d{3})(\d{4})</code></p><p>替换表达式：</p><p><code>\1***\2</code></p><p>结果：</p><p><code>我的电话是123***7890</code></p><blockquote><p>Javascript 在搜索表达式中使用\1，在替换表达式中使用$1来获取引用</p></blockquote><h3 id="使用回溯进行大小写"><a href="#使用回溯进行大小写" class="headerlink" title="使用回溯进行大小写"></a>使用回溯进行大小写</h3><p>不过支持该用法的不多（java不支持）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\E   end，表示大小写转换的结束范围</span><br><span class="line">\l   low，表示把下一个字符转为小写</span><br><span class="line">\L  Low，表示把\L与\E之间的字符转为小写</span><br><span class="line">\u   up，表示把下一个字符转为大写</span><br><span class="line">\U   Up，表示把\U与\E之间的字符转为大写</span><br></pre></td></tr></table></figure><p>举例：<br> 搜索正则表达式<br><code>&lt;([Hh][1-6])&gt;(.*?)&lt;/\1&gt;</code><br> 替换正则表达式<br><code>&lt;$1&gt;\U$2\E&lt;$1&gt;</code><br> 注意：字母有大小写之分，文字没有。</p><h2 id="前后查找"><a href="#前后查找" class="headerlink" title="前后查找"></a>前后查找</h2><p>向前查找、向后查找实际上都是子表达式。它们查找满足条件的字符串，但忽略掉其中指定的部分（不消费）。</p><blockquote><p>具体理解是：从字符串开始位置，有一个光标，光标每向前移动一次，就在光标所在的位置之前或之后判断某些字母是否符合条件，如果符合，就把光标所在位置之前的字符串返回，但忽略子表达式匹配到的字符串</p></blockquote><p>区别是：</p><ul><li>向前查找：真正需要的是<strong>前面部分</strong>的字符串( <strong>http</strong>: )。</li><li>向后查找：真正需要的是<strong>后面部分</strong>的字符串( $<strong>400</strong> )。</li><li>向前查找模式的<strong>长度是可变的</strong>，可以包含.和+之类的元字符</li><li>向后查找模式只能是<strong>固定长度的</strong>。（个人理解为：如果不是固定长度的话，可能会把后面需要输出的部分给隐藏起来）</li></ul><h3 id="向前查找-大部分语言支持"><a href="#向前查找-大部分语言支持" class="headerlink" title="向前查找(大部分语言支持)"></a>向前查找(大部分语言支持)</h3><p><code>(?=需要匹配但不在结果中的正则表达式)</code></p><p>向前查找指定了一个必须匹配但不在结果中返回的模式。</p><hr><p>例子1:</p><p><img src="/2018/12/18/正则表达式必知必会/./前瞻流程.png" alt="预查流程"></p><p>例子2:</p><p>文本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://www.baidu.com</span><br><span class="line">https://www.baidu.com</span><br><span class="line">ftp://ftp.forta.com</span><br></pre></td></tr></table></figure><p>正则表达式：</p><p><code>.+(?=:)</code>  需要匹配到冒号，但在结果中不需要该冒号</p><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http</span><br><span class="line">https</span><br><span class="line">ftp</span><br></pre></td></tr></table></figure><h3 id="向后查找"><a href="#向后查找" class="headerlink" title="向后查找"></a>向后查找</h3><p><code>(?&lt;=需要匹配但不在结果中的正则表达式)</code></p><hr><p>例子1:</p><p><img src="/2018/12/18/正则表达式必知必会/./后瞻流程.png" alt="后瞻流程"></p><p>例子2:</p><p>文本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AAA:$23.45</span><br><span class="line">BBB:$567.45</span><br><span class="line">total items found:2</span><br></pre></td></tr></table></figure><p>正则表达式：</p><p><code>(?&lt;=\$)[0-9.]+</code>  需要匹配到美元$，但在结果中不需要$</p><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">23.45</span><br><span class="line">567.45</span><br></pre></td></tr></table></figure><h3 id="向前向后结合"><a href="#向前向后结合" class="headerlink" title="向前向后结合"></a>向前向后结合</h3><p>目标：提取出\<title>标签内的文字</title></p><p>文本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt; ben forta&apos;s homepage &lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><p>正则表达式：</p><p><code>(?&lt;=\&lt;title\&gt;).*(?=\&lt;/title\&gt;)</code></p><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ben forta&apos;s homepage</span><br></pre></td></tr></table></figure><h3 id="对前后查找取非"><a href="#对前后查找取非" class="headerlink" title="对前后查找取非"></a>对前后查找取非</h3><p>前面介绍的用法称为 正向前查找 和 正向后查找 ，<strong>“正”指的是寻找匹配的事实</strong></p><p>前后查找还有一种不太常见的用法：负前后查找，“负”指的是寻找不相匹配的事实</p><ul><li>负向前查找：将向前查找 不与给定模式相匹配的文本</li><li>负向后查找：将向后查找 不与给定模式相匹配的文本</li></ul><p>使用！在进行取非</p><table><thead><tr><th>操作法</th><th>说明</th></tr></thead><tbody><tr><td>(?=)</td><td>正向前查找</td></tr><tr><td>(?!)</td><td>负向前查找</td></tr><tr><td>(?&lt;=)</td><td>正向后查找</td></tr><tr><td>(?&lt;!)</td><td>负向后查找</td></tr></tbody></table><p>例子：</p><p><strong>查找价格</strong></p><p>文本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I paid $30 for 100 apples, 50 oranges ,and 60 pears. I saved $5 on this order.</span><br></pre></td></tr></table></figure><p>正则表达式：<code>(?&lt;=\$)\d+</code></p><p>结果：</p><p>I paid \$<strong>30</strong> for 100 apples, 50 oranges ,and 60 pears. I saved $<strong>5</strong> on this order.</p><p><strong>查找数量</strong></p><p>文本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I paid $30 for 100 apples, 50 oranges ,and 60 pears. I saved $5 on this order.</span><br></pre></td></tr></table></figure><p>正则表达式：<code>\b(?&lt;!\$)\d+</code></p><p>结果：</p><p>I paid \$30 for <strong>100</strong> apples, <strong>50</strong> oranges ,and <strong>60</strong> pears. I saved $5 on this order.</p><blockquote><p>注意到这里有个\b，为什么要这样呢？看下面的结果就知道了</p><p>正则表达式：<code>(?&lt;!\$)\d+</code></p><p>结果：</p><p>I paid \$3<strong>0</strong> for <strong>100</strong> apples, <strong>50</strong> oranges ,and <strong>60</strong> pears. I saved $5 on this order.</p><p>$30中的0也被匹配上了。因为0前面的3不是\$，完全符合<code>(?&lt;!\$)\d+</code></p></blockquote><h2 id="嵌入条件"><a href="#嵌入条件" class="headerlink" title="嵌入条件"></a>嵌入条件</h2><p><strong><em>并非所有正则表达式实现都支持条件处理</em></strong></p><p>正则表达式里的条件要用<code>(?(condition)true_regx|false_regx)</code>来定义，可以没有false_regx。</p><p>之前见过几种非常特殊的条件了：</p><ul><li><code>.?</code>、<code>[]?</code>或<code>()?</code>匹配前一个字符或者表达式</li><li><code>(?=……)</code>和<code>(?&lt;=……)</code>匹配前面或后面的文本</li></ul><h3 id="回溯引用条件"><a href="#回溯引用条件" class="headerlink" title="回溯引用条件"></a>回溯引用条件</h3><p><code>(?(回溯引用的id)true-regx|false-regx)</code> ，当回溯引用存在时，匹配true-regx模式，否则匹配false-regx，</p><p>例子：匹配合法的电话</p><p>文本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">123-456-7890</span><br><span class="line">(123)456-7890</span><br><span class="line">(123)-456-7890</span><br><span class="line">(123-456-7890</span><br><span class="line">1234567890</span><br><span class="line">123 456 7890</span><br></pre></td></tr></table></figure><p>正则表达式：</p><p><code>(\()? \d{3} (?(1)\)|-) \d{3}-\d{4}</code></p><p>结果：</p><p><strong>123-456-7890</strong><br><strong>(123)456-7890</strong><br>(123)-456-7890<br>(123-456-7890<br>1234567890<br>123 456 7890</p><p>其中<code>(?(1)\)|-)</code>就是回溯引用条件，<code>?(1)</code>表示子表达式1存在时，进行匹配右括号<code>)</code>，否则匹配连字符<code>-</code></p><h3 id="前后查找条件"><a href="#前后查找条件" class="headerlink" title="前后查找条件"></a>前后查找条件</h3><p><code>(?(向前向后查找表达式)true-regx|false-regx)</code></p><p>在实际工作中，该方法相当少见，因为有更简单的方法来到达同样的目的。</p><p>例子：</p><p>文本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">11111</span><br><span class="line">22222</span><br><span class="line">33333-</span><br><span class="line">44444-4444</span><br></pre></td></tr></table></figure><p>正则表达式：<code>\d{5}(?(?=-)-\d{4})</code></p><p>结果：</p><p><strong>11111</strong><br><strong>22222</strong><br>33333-<br><strong>44444-4444</strong></p><p><code>(?(?=-)-\d{4})</code> 中用<code>(?=-)</code>来进行向前匹配，如果条件成立，则<code>-\d{4}</code>将匹配连字符和随后的4位数字，这样<code>33333-</code> 将被排除在外。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>元字符可以分为2类：</p><ol><li>一种是本身就是元字符，转义后变为普通字符，比如<code>^ $ *</code> ，用\进行转义恢复成普通字符</li><li>另一种是需要\进行配合，才表示元字符，否则就是普通的字符，比如<code>\w \s \d</code></li></ol></the></excerpt>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>shell通配符</title>
      <link href="/2018/12/18/shell%E9%80%9A%E9%85%8D%E7%AC%A6/"/>
      <url>/2018/12/18/shell%E9%80%9A%E9%85%8D%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>介绍linux中shell通配符的用法，以及其与正则表达式的关系</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h3 id="通配符（Wildcard）"><a href="#通配符（Wildcard）" class="headerlink" title="通配符（Wildcard）"></a>通配符（Wildcard）</h3><p>在 Shell 中命令中，通常会使用通配符表达式来匹配一些文件，如以下命令可以查找当前目录下所有后缀为 .xml 的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name &quot;*.xml&quot;</span><br></pre></td></tr></table></figure><p>Shell 中可以使用的通配符如下：</p><table><thead><tr><th>通配符</th><th>含义</th><th>实例</th></tr></thead><tbody><tr><td>*</td><td>匹配 0 或多个字符</td><td><code>a*b</code>，a与b之间可以有任意长度的任意字符, 也可以一个也没有, 如 aabcb, axyzb, a012b, ab</td></tr><tr><td>?</td><td>匹配任意单个字符</td><td><code>a?b</code>，a与b之间有且只有一个字符, 可以是任意字符, 如 aab, abb, acb, a0b</td></tr><tr><td>[list]</td><td>匹配 list 中的任意单个字符</td><td><code>a[xyz]b</code>，a与b之间必须也只能有一个字符, 但只能是 x 或 y 或 z, 如 axb, ayb, azb。</td></tr><tr><td>[!list]</td><td>匹配除 list 中的任意单一字符</td><td><code>a[!0-9]b</code>，a与b之间必须也只能有一个字符, 但不能是阿拉伯数字, 如 axb, aab, a-b。</td></tr><tr><td>[c1-c2]</td><td>匹配 c1-c2 中的任意单一字符</td><td><code>a[0-9]b</code>，匹配0与9之间其中一个字符，如 a0b, a1b… a9b</td></tr><tr><td>{s1,s2,…}</td><td>匹配 s1 或 s2 (或更多)中的一个字符串</td><td><code>a{abc,xyz,123}b</code>，a与b之间只能是abc或xyz或123这三个字符串之一</td></tr></tbody></table><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>有的时候，我们匹配的内容里面会存在 <code>*</code>，<code>?</code>，<code>[</code>等通配符中的符号。为了表示他们原来的意思，我们需要使用转义字符 <code>\</code>，如 <code>a\[ac\]c</code> 表示匹配 <code>a[a]c</code> 或 <code>a[c]c</code>。<code>\</code> 本身用 <code>\\</code> 表示。</p><h3 id="分清楚通配符表达式和正则表达式"><a href="#分清楚通配符表达式和正则表达式" class="headerlink" title="分清楚通配符表达式和正则表达式"></a>分清楚通配符表达式和正则表达式</h3><p>通配符看起来和正则表达式很像，但他们并不是同一种东西。<strong>正则表达式中的那些量词的匹配规则和这里提到的几个通配符的匹配规则并不相同。</strong>如正则表达式中 <code>*</code> 表示重复前一个字符任意次，<code>ab*</code> 表示的是那些 <code>a</code> 后面跟 0 个或多个 <code>b</code> 的字符串， 而通配符表达式中 <code>*</code> 表示 0 或多个任意字符， <code>ab*</code> 表示的是那些 <code>ab</code> 后面跟任意个字符的字符串。</p><p>而且<strong>正则表达式一般是部分匹配的</strong>，用来匹配内容中的一部分，如用正则表达式 <code>a</code> 去匹配 <code>bac</code> 这段字符串时，匹配是成功的，匹配到的内容是 <code>a</code>。但是<strong>通配符表达式的话是全部匹配的</strong>，表达式要匹配整个字符串才算匹配成功，如用通配符表达式 <code>a</code> 取匹配 <code>bac</code> 这段字符串时，匹配是失败的。</p><p>在 Shell 命令中，通常<strong>用通配符表达式来匹配文件名</strong>，而<strong>用正则表达式来匹配一段文本内容</strong>。以 <code>grep</code> 命令为例，<code>grep</code> 命令可以在指定的文件中，挑选出和表达式匹配的那些行，其中指定文件是用的通配符表达式，而文本内容的匹配用的是正则表达式。</p><p>今天使用 <code>grep</code> 时，就因为没分清楚他们，忙活了半天。情况是这样的，我想看一个 jar 包里是不是有 pom 相关的文件，所以就输入了下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar tf maven-model-builder-3.5.3.jar | grep <span class="string">'pom*'</span>  <span class="comment"># 这里是正则表达式，匹配有po、pom、pom+子串的字符串</span></span><br></pre></td></tr></table></figure><p>结果输入了一堆文件，而且很多文件都没有 pom 这串字符串的。输出内容是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">org/apache/maven/model/composition/</span><br><span class="line">org/apache/maven/model/interpolation/</span><br><span class="line">org/apache/maven/model/superpom/</span><br><span class="line">org/apache/maven/model/composition/DependencyManagementImporter.class</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这就是因为我把通配符表达式和正则表达式搞混了，后来知道原因后，用下面的命令才得到想要的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar tf maven-model-builder-3.5.3.jar | grep <span class="string">'pom.*'</span></span><br></pre></td></tr></table></figure><p>使用 Shell 命令时，要分清楚哪里用的是通配符表达式，哪里用的是正则表达式。</p><p>作者：Happioo</p><p>链接：<a href="https://www.jianshu.com/p/25f3d0cd5fdc" target="_blank" rel="noopener">https://www.jianshu.com/p/25f3d0cd5fdc</a></p><p>來源：简书</p><p>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p></the></excerpt>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 通配符 </tag>
            
            <tag> 正则表达式 </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>window添加右键用atom打开</title>
      <link href="/2018/12/15/window%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E7%94%A8atom%E6%89%93%E5%BC%80/"/>
      <url>/2018/12/15/window%E6%B7%BB%E5%8A%A0%E5%8F%B3%E9%94%AE%E7%94%A8atom%E6%89%93%E5%BC%80/</url>
      
        <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>window添加右键功能，如用atom打开，用vs code打开，可以方便用指定的编辑器打开文件，或者打开文件夹</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>使用<code>regedit</code> 打开注册表，找到如下位置，按照图示添加项，即可</p><p><img src="/2018/12/15/window添加右键用atom打开/./图像 001.png" alt="图像 001"></p><p><img src="/2018/12/15/window添加右键用atom打开/./图像 002.png" alt="图像 002"></p></the></excerpt>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统优化 </tag>
            
            <tag> 效率 </tag>
            
            <tag> atom </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>notepad常用插件与设置</title>
      <link href="/2018/12/12/notepad%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
      <url>/2018/12/12/notepad%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <ol><li>notepad如何安装插件</li><li>常用的插件推荐</li><li>设置与配置信息备份</li></ol><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p>点击菜单中的“插件”—&gt;“plugin manager”—&gt;“show plugin manager”的选项</p><p><img src="/2018/12/12/notepad常用插件/./插件安装1.png" alt="插件安装1"></p><p>进入到插件的管理列表中，找需要的插件，比如“compare”的选项勾选上，点击“install”的进行按钮</p><p><img src="/2018/12/12/notepad常用插件/./插件安装2.png" alt="插件安装2"></p><blockquote><p><strong>插件列表不显示</strong>的情况：</p><ol><li>打开plugin manager 最下面的setting，将use development plugin list 勾选上，注意information那一栏，可能会给出关键的信息，如让你创建 allowAppDataPlugins.xml文件</li><li>缺少PluginManagerPlugins.xml文件<ol><li>先在文件资源管理器的查看在隐藏的项目打勾</li><li>把<a href="http://pan.baidu.com/s/1hsmjCBa" target="_blank" rel="noopener">PluginManagerPlugins.xml</a>放在这个目录下<code>C:\Users\用户\AppData\Roaming\Notepad++</code></li><li>重新打开软件，看时候可行</li></ol></li><li>可能防火墙禁止Notepad++连接网络<ol><li>可以从控制面板-&gt;系统与安全-&gt;windows防火墙-&gt;允许应用通过windows防火墙</li><li>查看notepad++后面对应的专用和公用是否打勾，如果找不到notepad++可以自行添加，从允许其他应用进去，找到你notepad++的安装目录，然后添加</li></ol></li></ol></blockquote><p>安装完成会自动重启Notepad++，重启完成之后，在菜单栏的插件中，即可找到新安装的插件</p><p><img src="/2018/12/12/notepad常用插件/./插件安装3.png" alt="插件安装3"></p><h3 id="常用的插件推荐"><a href="#常用的插件推荐" class="headerlink" title="常用的插件推荐"></a>常用的插件推荐</h3><ul><li><strong>compare</strong>   比较两个文件的修改情况</li><li><strong>JSON viewer</strong>   json文件查看、格式化</li><li><strong>converter</strong>   ASCII码与HEX转换</li></ul><h3 id="设置与配置信息备份"><a href="#设置与配置信息备份" class="headerlink" title="设置与配置信息备份"></a>设置与配置信息备份</h3><p>设置好的配置文件在：C:\Users\用户\AppData\Roaming\Notepad++目录下，建议将这个文件夹备份，避免重装是又要从头设置</p><ul><li>不记住最后打开的文件（标签栏会炸掉的）：备份-&gt;记住最后打开的文件 取消掉</li><li>utf8-无BOM：新建-&gt;编码</li></ul></the></excerpt>]]></content>
      
      
      <categories>
          
          <category> 编辑器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编辑器 </tag>
            
            <tag> notepad++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>chrome截取整个网页</title>
      <link href="/2018/12/04/chrome%E6%88%AA%E5%8F%96%E6%95%B4%E4%B8%AA%E7%BD%91%E9%A1%B5/"/>
      <url>/2018/12/04/chrome%E6%88%AA%E5%8F%96%E6%95%B4%E4%B8%AA%E7%BD%91%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>浏览器原生功能实现滚动截屏，截取整个页面</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>在Chrome 浏览器上滚动截屏，不需要插件和任何 app，利用 chrome 浏览器原生功能即可实现。</p><ol><li><p>打开 Chrome 浏览器，进入需要截图的网站页面</p></li><li><p>打开开发者工具：在页面任何地方点击鼠标右键，在弹出菜单中选择「检查」选项。或者使用快捷键组合：option + command + i。</p></li><li><p>打开命令行（command palette）：command + shift + p。</p></li><li><p>在命令行中输入「screen」，这时自动补齐功能会显示出一些包含 「Screen」 关键字的命令。移动方向键到「Capture full size screenshot」并回车，chrome就会自动下载整个页面截屏文件。</p><p><img src="/2018/12/04/chrome截取整个网页/./chrome截图.png" alt="chrome截图"></p></li></ol><p>原文：<a href="https://blog.csdn.net/ianly123/article/details/80565614" target="_blank" rel="noopener">https://blog.csdn.net/ianly123/article/details/80565614</a> </p></the></excerpt>]]></content>
      
      
      <categories>
          
          <category> Chrome </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 截图 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git教程</title>
      <link href="/2018/11/22/Git%E6%95%99%E7%A8%8B/"/>
      <url>/2018/11/22/Git%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>Git 教程</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p><img src="/2018/11/22/Git教程/./git常用命令流程图.png" alt=""></p><h2 id="Git本地基本"><a href="#Git本地基本" class="headerlink" title="Git本地基本"></a>Git本地基本</h2><h3 id="配置全局信息"><a href="#配置全局信息" class="headerlink" title="配置全局信息"></a>配置全局信息</h3><p>当安装完 Git 应该做的<strong>第一件事</strong>就是设置你的用户名称与邮件地址。 这样做很重要，因为每一个 Git 的提交都会使用这些信息，并且它会写入到你的每一次提交中，不可更改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line">git config --global user.email <span class="string">"email@example.com"</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。在那个项目目录下运行没有<code>--global</code>选项的命令来配置。</p></blockquote><p>其他有用的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.editor <span class="string">"notepad"</span>  <span class="comment">#commit时的默认编辑器</span></span><br></pre></td></tr></table></figure><h3 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h3><p>如果想要检查你的配置，可以使用 git config –list 命令来列出所有 Git 当时能找到的配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git config--list</span><br><span class="line"></span><br><span class="line">user.name=JohnDoe</span><br><span class="line">user.email=johndoe@example.com</span><br><span class="line">color.status=auto</span><br><span class="line">color.branch=auto</span><br><span class="line">color.interactive=auto</span><br><span class="line">color.diff=auto</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>你可能会看到重复的变量名，因为 Git 会从不同的文件中读取同一个配置（例如：/etc/gitconfig 与~/.gitconfig）。 这种情况下，Git 会使用它找到的每一个变量的最后一个配置。</p><p>你可以通过输入 <code>git config &lt;key&gt;</code>： 来检查 Git 的某一项配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config user.name</span><br><span class="line">Jizx</span><br></pre></td></tr></table></figure><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><h4 id="在现有目录中初始化仓库"><a href="#在现有目录中初始化仓库" class="headerlink" title="在现有目录中初始化仓库"></a>在现有目录中初始化仓库</h4><p>通过<code>git init</code>命令把这个目录(可以是非空目录)变成Git可以管理的仓库。</p><p>如果你是在一个已经存在文件的文件夹（而不是空文件夹）中初始化 Git 仓库来进行版本控制的话，你应该开始跟踪这些文件并提交。 你可通过 <code>git add</code>命令来实现对指定文件的跟踪，然后执行<code>git commit</code> 提交</p><h4 id="克隆现有的仓库"><a href="#克隆现有的仓库" class="headerlink" title="克隆现有的仓库"></a>克隆现有的仓库</h4><p>克隆仓库的命令格式是 <code>git clone [url] 本地仓库名字</code>。可以不定义本地仓库名字，默认适应原仓库名字。比如，要克隆 Git 的可链接库 libgit2，可以用下面的命令：</p><p><code>$ git clonehttps://github.com/libgit2/libgit2  mylibgit2</code></p><p>这会在当前目录下创建一个名为 “mylibgit2”的目录，并在这个目录下初始化一个 .git 文件夹，从远程仓库拉取下所有数据放入 .git 文件夹，然后从中读取最新版本的文件的拷贝。</p><h3 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h3><p><strong>第一步，</strong>用命令git add告诉Git，把文件添加到暂存区：</p><p><code>git add readme.txt</code></p><p>add一个文件之后，如果又对文件进行了修改，需要重新add，不然commit只会保存最后一次git add的文件内容。</p><p><strong>第二步，</strong>用命令git commit告诉Git，把文件提交到仓库：</p><p><code>git commit -m &quot;wrote a readmefile&quot;</code></p><p>或者git commit，将会打开默认的文本编辑器（vim）进行文字输入。若实在不习惯 Vim，也可以设置为其它编辑器：</p><p><code>git config --global core.editor &quot;notepad&quot;</code></p><p>其中 notepad 可以替换为更好用的 wordpad、notepad++ 等（不过它们在命令行里无法直接访问，得先设置 PATH 变量）。</p><p>为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git addfile1.txt</span><br><span class="line">git addfile2.txt file3.txt</span><br><span class="line">git commit-m <span class="string">"add 3 files."</span></span><br></pre></td></tr></table></figure><p><strong>快速提交：</strong></p><p>Git 提供了一个跳过使用暂存区域的方式，只要在提交的时候，<code>git commit -a</code> 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，<strong>从而跳过 git add 步骤</strong>。</p><h3 id="重新提交"><a href="#重新提交" class="headerlink" title="重新提交"></a>重新提交</h3><p>有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有<code>--amend</code> 选项的提交命令尝试重新提交，命令执行后将暂存区中的文件提交，因此分为以下2种情况：</p><ol><li><p>修改提交信息：</p><p><code>git commit --amend</code></p></li><li><p>添加忘记/漏add的文件，同时修改提交信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">'initial commit'</span>  <span class="comment"># 错误的提交</span></span><br><span class="line">$ git add forgotten_file</span><br><span class="line">$ git commit –amend</span><br></pre></td></tr></table></figure></li></ol><h3 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h3><p>要查看哪些文件处于什么状态，可以用 <code>git status</code> 命令。</p><p>使用 <code>git status -s</code> 命令或 <code>git status --short</code>命令，你将得到一种更为紧凑的格式输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line"> M README</span><br><span class="line">MM Rakefile</span><br><span class="line">A  lib/git.rb</span><br><span class="line">M  lib/simplegit.rb</span><br><span class="line">?? LICENSE.txt</span><br></pre></td></tr></table></figure><ul><li>?? 标记：新添加的未跟踪文件</li><li>A 标记：新添加到暂存区中的文件</li><li>M 标记：修改过的文件<ul><li>出现在<strong>右边的 M</strong>表示该文件被修改了但是还没放入暂存区</li><li>出现在<strong>左边的 M</strong>表示该文件被修改了并放入了暂存区。</li></ul></li></ul><p>例如，上面的状态报告显示： README 文件在工作区被修改了但是还没有将修改后的文件放入暂存区，lib/simplegit.rb 文件被修改了并将修改后的文件放入了暂存区。 而 <strong>Rakefile 在工作区被修改并提交到暂存区后又在工作区中被修改了</strong>，所以在暂存区和工作区都有该文件被修改了的记录。</p><p><img src="/2018/11/22/Git教程/./文件状态周期.png" alt="文件状态周期"></p><p>Untracked未跟踪的文件意味着 Git 在之前的快照（提交）中没有这些文件（比如新建的文件）；Git 不会自动将之纳入跟踪范围，除非你明明白白地告诉它“我需要跟踪该文件”。被追踪后处于3种状态：未修改-已修改-已暂存。将暂存的文件commit后就保存在git数据库中，文件就回到未修改状态了。<br>接下来介绍如何对修改的文件进行版本控制。</p><h3 id="查看文件修改内容diff"><a href="#查看文件修改内容diff" class="headerlink" title="查看文件修改内容diff"></a>查看文件修改内容diff</h3><p><img src="/2018/11/22/Git教程/./查看文件变化内容.png" alt="查看文件变化内容"></p><h4 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h4><p>查看<strong>尚未暂存的文件</strong>更新了哪些部分，输入<code>git diff</code><br>此命令比较的是工作目录中当前文件和暂存区域快照之间的差异， 也就是修改之后还没有暂存起来的变化内容。</p><p><code>git diff</code>不加参数即默认比较工作区与暂存区</p><p>比较工作区与最新本地版本库</p><p><code>git diff HEAD [&lt;path&gt;...]</code>  如果HEAD指向的是master分支，那么HEAD还可以换成master</p><p>比较工作区与指定commit-id的差异</p><p><code>git diff commit-id  [&lt;path&gt;...]</code></p><h4 id="–cached"><a href="#–cached" class="headerlink" title="–cached"></a>–cached</h4><p>查看<strong>暂存区里将要添加到下次提交</strong>里的内容，可以用 <code>git diff --cached</code>命令。<br>也就是查看暂存区里与最新本地版本库的区别（Git 1.6.1 及更高版本还允许使用 git diff –staged，效果是相同的，但更好记些。）</p><p>比较暂存区与指定commit-id的差异</p><p><code>git diff --cached [&lt;commit-id&gt;][...]</code></p><p>比较两个commit-id之间的差异</p><p><code>git diff [&lt;commit-id&gt;][]</code></p><h4 id="打补丁"><a href="#打补丁" class="headerlink" title="打补丁"></a>打补丁</h4><p>使用git diff打补丁<code>git diff &gt; patch</code></p><p> patch的命名是随意的，不加其他参数时作用是当我们希望将我们本仓库工作区的修改拷贝一份到其他机器上使用，但是修改的文件比较多，拷贝量比较大，此时我们可以将修改的代码做成补丁，之后在其他机器上对应目录下使用 <code>git apply patch</code> 将补丁打上即可</p><p><code>git diff --cached &gt; patch</code> //是将我们暂存区与版本库的差异做成补丁</p><p> <code>git diff --HEAD &gt; patch</code>//是将工作区与版本库的差异做成补丁</p><p><code>git diff Testfile &gt; patch</code>//将单个文件做成一个单独的补丁</p><p>拓展：git apply patch 应用补丁，应用补丁之前我们可以先检验一下补丁能否应用，<code>git apply --check patch</code> 如果没有任何输出，那么表示可以顺利接受这个补丁</p><p>另外可以使用<code>git apply --reject patch</code>将能打的补丁先打上，有冲突的会生成.rej文件，此时可以找到这些文件进行手动打补丁</p><h3 id="忽略文件（不追踪文件）"><a href="#忽略文件（不追踪文件）" class="headerlink" title="忽略文件（不追踪文件）"></a>忽略文件（不追踪文件）</h3><p>在Git工作区的根目录下创建一个特殊的.gitignore文件，（window下直接新建不了，最好用命令行创建）使用命令<code>cat .gitignore</code>或者<code>touch .gitignore</code>，然后把要忽略的文件名或者目录填进去，Git就会自动忽略这些文件、文件夹。最后一步就是把<code></code>.gitignore`也提交到Git，就完成了！</p><blockquote><p>注意：<code>.gitignore</code>文件只能作用于 Untracked Files，也就是那些从来没有被 Git 记录过的文件（自添加以后，从未 add 及 commit 过的文件）。如果要忽略被提交了的文件，请看【删除文件、取消追踪、恢复误删】这节内容</p></blockquote><h4 id="gitignore编写规则"><a href="#gitignore编写规则" class="headerlink" title="gitignore编写规则"></a>gitignore编写规则</h4><ol><li>所有空行或者以 # 开头的行都会被 Git 忽略。</li></ol><ol start="2"><li>可以使用标准的 glob 模式匹配。</li><li>匹配模式可以以（/）开头防止递归。</li><li>以（/）结尾 指定目录，忽略该目录下全部内容。</li><li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。</li></ol><p>所谓的 <strong>glob 模式</strong>是指shell 所使用的简化了的正则表达式。</p><ul><li>星号<code>*</code>匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符</li><li>问号<code>?</code>只匹配一个任意字符；</li><li>如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。</li><li>使用两个星号<code>**</code> 表示匹配<strong>任意中间目录</strong>，比如<code>a/**/z</code> 可以匹配 <code>a/z, a/b/z 或 a/b/c/z</code>等。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 忽略任何 以 .a 结尾文件</span></span><br><span class="line">*.a</span><br><span class="line"><span class="comment"># 但不忽略 lib.a 这个例外</span></span><br><span class="line">!lib.a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只忽略当前文件夹下的 TODO ，不忽略子文件夹下的 subdir/TODO</span></span><br><span class="line">/TODO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略全部在 build/ 文件夹下的文件</span></span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只忽略doc文件夹下的.txt,子目录下的doc/server/arch.txt 不受影响，</span></span><br><span class="line">doc/*.txt </span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略所有doc文件夹下的 .pdf 文件</span></span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure><p>GitHub 在 <a href="https://github.com/github/gitignore" target="_blank" rel="noopener">github/gitignore</a>仓库 提供了一个官方推荐的 .gitignore 文件列表，包括各种流行的操作系统、环境、开发语言。</p><h4 id="强制添加"><a href="#强制添加" class="headerlink" title="强制添加"></a>强制添加</h4><p>有些时候，你想添加一个文件到Git，但发现添加不了，原因是这个文件被.gitignore忽略了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git add App.class</span><br><span class="line"></span><br><span class="line">The following paths are ignored by one of your .gitignore files:</span><br><span class="line">    App.class</span><br><span class="line">Use -f <span class="keyword">if</span> you really want to add them.</span><br></pre></td></tr></table></figure><p>如果你确实想添加该文件，可以用<code>-f</code>强制添加到Git：<br><code>git add -f App.class</code><br>当然也可以在.gitignore里使用<code>!</code>排除这个文件。</p><h4 id="忽略已经添加到git的文件"><a href="#忽略已经添加到git的文件" class="headerlink" title="忽略已经添加到git的文件"></a>忽略已经添加到git的文件</h4><p>如果你已经将文件提交到到git中，那么git不会处理你后来添加的gitignore规则。这种情况就需要通过下面的命令先取消追踪文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached filename</span><br></pre></td></tr></table></figure><h4 id="测试规则"><a href="#测试规则" class="headerlink" title="测试规则"></a>测试规则</h4><p>或者你发现，可能是<code>.gitignore</code>写得有问题，需要找出来到底哪个规则写错了，可以用<code>git check-ignore</code>命令检查：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git check-ignore -v App.class</span><br><span class="line">.gitignore:3:*.class    App.class</span><br></pre></td></tr></table></figure><p>Git会告诉我们：.gitignore的第3行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。</p><h4 id="全局忽略"><a href="#全局忽略" class="headerlink" title="全局忽略"></a>全局忽略</h4><p>可以为你的电脑上每个仓库创建一份全局的忽略文件，这样就不必每个仓库都单独创建一个gitignore文件。</p><ol><li>在home目录创建<code>~/.gitignore_global</code>文件</li><li>在命令行中执行<code>git config --global core.excludesfile ~/.gitignore_global</code></li></ol><p>The Octocat 提供了一个推荐列表 方便添加到全局忽略文件中 <a href="https://gist.github.com/octocat/9257657" target="_blank" rel="noopener">a Gist containing some good rules</a> </p><h4 id="本地忽略"><a href="#本地忽略" class="headerlink" title="本地忽略"></a>本地忽略</h4><p><code>.gitignore</code> 这个文件本身会提交到版本库中去，用来保存的是公共的需要排除的文件。</p><p>如果你不想创建一份与他人共享的<code>.gitignore</code>，比如由你的编辑器产生的附属文件，而别人不会产生的情况。可以订制一份本地的忽略规则，这份规则不会提交到git中。</p><p>打开仓库中的<code>.git/info/exclude</code> 文件，在这里添加忽略规则即可，这里设置的则是你自己本地需要排除的文件。 他不会影响到其他人。也不会提交到版本库中去。</p><h3 id="撤销修改、提交"><a href="#撤销修改、提交" class="headerlink" title="撤销修改、提交"></a>撤销修改、提交</h3><h4 id="取消本地修改"><a href="#取消本地修改" class="headerlink" title="取消本地修改"></a>取消本地修改</h4><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时， 使用命令<code>git checkout –– filename</code>。<code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p><h4 id="取消add"><a href="#取消add" class="headerlink" title="取消add"></a>取消add</h4><p>场景2：当你不但改乱了工作区某个<strong>已经追踪的文件</strong>的内容，还添加到了暂存区时(<code>git add</code>)，想丢弃修改，分两步：</p><ol><li>第一步用命令<code>git reset HEAD fileName</code>（取消add到暂存区），就回到了场景1（即文件未暂存到暂存区中，仍为被修改过的状态）</li><li>第二步按场景1操作。</li></ol><p>如果是新文件（未提交到git中），那么应该使用<code>git rm --cached &lt;file&gt;</code> 来取消add操作。</p><p><img src="/2018/11/22/Git教程/./撤销修改.png" alt=""></p><h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><p>场景3：当你不但添加到了暂存区时(<code>git add</code>)，还提交了(<code>git commit</code>)，那就得进行版本回退了</p><p>在Git中，用<code>HEAD</code>表示当前版本，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个^比较容易数不过来，所以写成<code>HEAD~100</code>。</p><p>上面的方法仅适合近期恢复，如果忘记应该回退到哪个版本或者要回退到比较久之前的版本，应该通过<code>git log</code> 查看commit id，即可回退到你需要的时间点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit c0ce54b1ce75f69259d7f615bf280ff7a07e3eac (HEAD -&gt; master, origin/master, origin/HEAD)</span><br><span class="line">Author: jizx &lt;1822980003@qq.com&gt;</span><br><span class="line">Date:   Sun Nov 18 23:16:49 2018 +0800</span><br><span class="line"></span><br><span class="line">    git命令行中文乱码解决方法</span><br><span class="line"></span><br><span class="line">commit 0c0bfca1e3208d83a89366c5be76982d24e03dee</span><br><span class="line">Author: jizx &lt;1822980003@qq.com&gt;</span><br><span class="line">Date:   Sun Nov 18 20:52:07 2018 +0800</span><br><span class="line"></span><br><span class="line">    过滤上根目录的DS_Store</span><br></pre></td></tr></table></figure><p>其中commit 后面的一串字符串就是commit id</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD^     <span class="comment"># 回退到上一个版本</span></span><br><span class="line">$ git reset --hard commit_id <span class="comment"># 通过git log 获取的commit id</span></span><br></pre></td></tr></table></figure><p>第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的commit id怎么办？在Git中，总是有后悔药可以吃的，Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令，这样就可以找到你全部提交过的commit id。</p><h3 id="删除文件、取消追踪、恢复误删"><a href="#删除文件、取消追踪、恢复误删" class="headerlink" title="删除文件、取消追踪、恢复误删"></a>删除文件、取消追踪、恢复误删</h3><ul><li><p>同时删除库中的文件与工作目录的文件：</p><p>使用命令<code>git rm fileName</code>删掉，并且<code>git commit –m “someLog”</code></p></li><li><p>仅删除库中的文件（取消追踪/恢复未追踪状态）：</p><p>换句话说，你想让文件保留在磁盘，但是并不想让 Git 继续跟踪,可以输入命令：<code>git rm –cached filename/dir</code></p></li><li><p>另一种情况是<strong>在文件夹里误删了</strong>，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：<code>git checkout -- test.txt</code></p></li></ul><h3 id="文件重命名"><a href="#文件重命名" class="headerlink" title="文件重命名"></a>文件重命名</h3><p>要在 Git 中对文件改名，可以这么做：</p><p> <code>git mv README.md NewName.md</code></p><p>其实，运行 <code>git mv</code> 就相当于运行了下面三条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv README.md NewName.md</span><br><span class="line">git rm README.md</span><br><span class="line">git add NewName.md</span><br></pre></td></tr></table></figure><p>如此分开操作，Git 也会意识到这是一次改名，所以不管何种方式结果都一样。两者唯一的区别是，<code>git mv</code> 是一条命令而另一种方式需要三条命令，直接用 <code>git mv</code>轻便得多。 不过有时候用其他工具批处理改名的话，要记得在提交前删除老的文件名，再添加新的文件名。</p><h3 id="版本历史"><a href="#版本历史" class="headerlink" title="版本历史"></a>版本历史</h3><h4 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h4><p><code>git log</code>   显示从最近到最远的提交日志</p><p><code>git log -p -2</code>  一个常用的选项是 -p，用来显示每次提交的内容差异。你也可以加上 -2 来仅显示最近两次提交<br><code>git log --decorate</code>  命令查看各个分支当前所指的对象。</p><p><code>git log --pretty=oneline</code><br>另外一个常用的选项是<code>--pretty</code>。 这个选项可以<strong>指定使用不同于默认格式的方式展示</strong>提交历史。 这个选项有一些内建的子选项供你使用。 比如用<code>oneline</code> 将每个提交放在一行显示，查看的提交数很大时非常有用。 另外还有<code>short，full 和 fuller</code>可以用（不过不怎么实用）。</p><p><code>git log --pretty=format:&quot;%h - %an, %ar : %s&quot;</code> 最有意思的是format，可以定制要显示的记录格式</p><table><thead><tr><th style="text-align:center"><strong>选项</strong></th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center"><strong>%H</strong></td><td>提交对象（commit）的完整哈希字串</td></tr><tr><td style="text-align:center"><strong>%h</strong></td><td>提交对象的简短哈希字串</td></tr><tr><td style="text-align:center"><strong>%T</strong></td><td>树对象（tree）的完整哈希字串</td></tr><tr><td style="text-align:center"><strong>%t</strong></td><td>树对象的简短哈希字串</td></tr><tr><td style="text-align:center"><strong>%P</strong></td><td>父对象（parent）的完整哈希字串</td></tr><tr><td style="text-align:center"><strong>%p</strong></td><td>父对象的简短哈希字串</td></tr><tr><td style="text-align:center"><strong>%an</strong></td><td>作者（author）的名字</td></tr><tr><td style="text-align:center"><strong>%ae</strong></td><td>作者的电子邮件地址</td></tr><tr><td style="text-align:center"><strong>%ad</strong></td><td>作者修订日期（可以用 –date= 选项定制格式）</td></tr><tr><td style="text-align:center"><strong>%ar</strong></td><td>作者修订日期，按多久以前的方式显示</td></tr><tr><td style="text-align:center"><strong>%cn</strong></td><td>提交者(committer)的名字</td></tr><tr><td style="text-align:center"><strong>%ce</strong></td><td>提交者的电子邮件地址</td></tr><tr><td style="text-align:center"><strong>%cd</strong></td><td>提交日期</td></tr><tr><td style="text-align:center"><strong>%cr</strong></td><td>提交日期，按多久以前的方式显示</td></tr><tr><td style="text-align:center"><strong>%s</strong></td><td>提交说明</td></tr></tbody></table><blockquote><p><strong>作者</strong>指的是实际作出修改的人，<strong>提交者</strong>指的是最后将此工作成果提交到仓库的人</p></blockquote><p>图像化展示提交记录</p><p><code>$ git log --graph</code></p><p><code>$ git log --graph --pretty=oneline --abbrev-commit</code> 简洁视图版本</p><p>当 oneline 或 format 与另一个 log 选项 –graph 结合使用时尤其有用。 这个选项添加了一些ASCII字符串来形象地展示你的分支、合并历史。</p><p> <strong>git log</strong> 的常用选项，可以一起使用                                     </p><table><thead><tr><th><strong>选项</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>-p</strong></td><td>按补丁格式显示每个更新之间的差异。</td></tr><tr><td><strong>–stat</strong></td><td>显示每次更新的文件修改统计信息。</td></tr><tr><td><strong>–shortstat</strong></td><td>只显示 –stat 中最后的行数修改添加移除统计。</td></tr><tr><td><strong>–name-only</strong></td><td>仅在提交信息后显示已修改的文件清单。</td></tr><tr><td><strong>–name-status</strong></td><td>显示新增、修改、删除的文件清单。</td></tr><tr><td><strong>–abbrev-commit</strong></td><td>仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。</td></tr><tr><td><strong>–relative-date</strong></td><td>使用较短的相对时间显示（比如，“2 weeks ago”）。</td></tr><tr><td><strong>–graph</strong></td><td>显示 ASCII 图形表示的分支合并历史。</td></tr><tr><td><strong>–pretty</strong></td><td>使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。</td></tr></tbody></table><p>限制<code>git log</code>输出的选项</p><table><thead><tr><th><strong>选项</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>-(n)</strong></td><td>仅显示最近的 n 条提交</td></tr><tr><td><strong>–since</strong>, <strong>–after</strong></td><td>仅显示指定时间之后的提交。</td></tr><tr><td><strong>–until</strong>, <strong>–before</strong></td><td>仅显示指定时间之前的提交。</td></tr><tr><td><strong>–author</strong></td><td>仅显示指定作者相关的提交。</td></tr><tr><td><strong>–committer</strong></td><td>仅显示指定提交者相关的提交。</td></tr><tr><td><strong>–grep</strong></td><td>仅显示含指定关键字的提交</td></tr><tr><td><strong>-S</strong></td><td>仅显示添加或移除了某个关键字的提交</td></tr></tbody></table><p>例子：<br><code>git log --pretty=&quot;%h - %s&quot; --author=gitster --since=&quot;2008-10-01&quot; --before=&quot;2008-11-01&quot;</code></p><h4 id="git-relog"><a href="#git-relog" class="headerlink" title="git relog"></a>git relog</h4><p><code>$ git reflog</code>  //查看全部命令记录，以及HEAD指针</p><h3 id="git-help-命令提示"><a href="#git-help-命令提示" class="headerlink" title="git help 命令提示"></a>git help 命令提示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git help command # 可以显示某条command的使用方法</span><br></pre></td></tr></table></figure><h2 id="Git远程"><a href="#Git远程" class="headerlink" title="Git远程"></a>Git远程</h2><h3 id="从远程仓库克隆到本地"><a href="#从远程仓库克隆到本地" class="headerlink" title="从远程仓库克隆到本地"></a>从远程仓库克隆到本地</h3><p>在某个目录下，打开命令行，运行以下命令，就可以把远程的仓库克隆到当前目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通用命令</span></span><br><span class="line">$ git <span class="built_in">clone</span> username@host:/path/to/repository</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果远程服务器是github</span></span><br><span class="line">$ git <span class="built_in">clone</span> git@github.com:你的GitHub用户名/你的某一个仓库名.git</span><br><span class="line"><span class="comment"># .git可以不用写</span></span><br></pre></td></tr></table></figure><p>默认远程仓库别名为 origin，如果要自定义，可以在克隆时运行命令：<br><code>git clone -o jizx git@github.com:你的GitHub用户名/你的某一个仓库名.git</code>，那么你默认的远程分支名字将会是 <code>jizx/master</code><br>注意：克隆后本地只有master分支，如果想要把别的分支如dev克隆下来，需要使用:<code>git checkout -b dev origin/dev</code><br>也就是说，当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支。现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：<code>git checkout -b dev origin/dev</code><br>git clone 命令会自动设置本地 master 分支跟踪克隆的远程仓库的 master 分支（或不管是什么名字的默认分支）</p><h3 id="本地关联到远程仓库"><a href="#本地关联到远程仓库" class="headerlink" title="本地关联到远程仓库"></a>本地关联到远程仓库</h3><h4 id="空文件夹"><a href="#空文件夹" class="headerlink" title="空文件夹"></a>空文件夹</h4><p>新建一个文件夹，进入文件夹后使用git init命令，然后再使用<code>git remote add</code>命令关联一个远程仓库，再使用<code>git pull</code> 命令就可以把管理仓库的所有文件复制到本文件夹中，同样可以修改文件并完成push。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通用命令</span></span><br><span class="line">$ git remote add remoteName  git@server-name:path/仓库名.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># github服务器命令</span></span><br><span class="line">$ git remote add remoteName  git@github.com:你的用户名/你的某一个仓库名.git</span><br></pre></td></tr></table></figure><p>或者在一个文件夹下直接使用<code>git clone</code>命令，会把远程仓库整个复制到这个文件夹下，然后进入这个文件夹就可以修改文件并完成push。 这时默认远程的url别名为origin</p><h4 id="非空仓库-TODO非空文件怎么关联"><a href="#非空仓库-TODO非空文件怎么关联" class="headerlink" title="非空仓库(TODO非空文件怎么关联)"></a>非空仓库(TODO非空文件怎么关联)</h4><h3 id="查看远程库信息"><a href="#查看远程库信息" class="headerlink" title="查看远程库信息"></a>查看远程库信息</h3><p>用<code>git remote</code>可以查看到默认的远程库：<code>origin</code></p><p>用<code>git remote -v</code>显示更详细的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote-v</span><br><span class="line">origin  git@github.com:jizxgit/learngit.git (fetch)</span><br><span class="line">origin  git@github.com:jizxgit/learngit.git (push)</span><br></pre></td></tr></table></figure><h3 id="remote-详细用法"><a href="#remote-详细用法" class="headerlink" title="remote 详细用法"></a>remote 详细用法</h3><p><code>git help remote</code> 即可显示详细命令用法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">git remote [-v | --verbose]</span><br><span class="line">git remote add [-t &lt;branch&gt;] [-m &lt;master&gt;] [-f] [--[no-]tags] [--mirror=&lt;fetch|push&gt;] &lt;name&gt; &lt;url&gt;</span><br><span class="line">git remote rename  &lt;old&gt;  &lt;new&gt;</span><br><span class="line">git remote remove  &lt;name&gt;</span><br><span class="line">git remote rm  &lt;name&gt;</span><br><span class="line">git remote <span class="built_in">set</span>-head &lt;name&gt; (-a | --auto | -d | --delete | &lt;branch&gt;)</span><br><span class="line">git remote <span class="built_in">set</span>-branches [--add] &lt;name&gt; &lt;branch&gt;…</span><br><span class="line">git remote get-url [--push] [--all] &lt;name&gt;</span><br><span class="line">git remote <span class="built_in">set</span>-url [--push] &lt;name&gt; &lt;newurl&gt; [&lt;oldurl&gt;]</span><br><span class="line">git remote <span class="built_in">set</span>-url --add [--push] &lt;name&gt; &lt;newurl&gt;</span><br><span class="line">git remote <span class="built_in">set</span>-url --delete [--push] &lt;name&gt; &lt;url&gt;</span><br><span class="line">git remote [-v | --verbose] show [-n] &lt;name&gt;…</span><br><span class="line">git remote prune [-n | --dry-run] &lt;name&gt;…</span><br><span class="line">git remote [-v | --verbose] update [-p | --prune] [(&lt;group&gt; | &lt;remote&gt;)…]</span><br></pre></td></tr></table></figure><h3 id="本地推送到远程仓库"><a href="#本地推送到远程仓库" class="headerlink" title="本地推送到远程仓库"></a>本地推送到远程仓库</h3><p>第一次更新时： <code>git push -u origin master</code></p><p>origin：远程服务器url别名  master：本地仓库的一个分支</p><p>加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令</p><p>以后更新时： <code>git push origin master</code></p><p>如果要推送本地其他分支，比如dev，就改成：<br><code>git push origin dev</code></p><p>以上其实做了一定的简化，完整的命令是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin 本地分支：远程分支</span><br></pre></td></tr></table></figure><p>如果并不想让远程仓库上的分支叫做 serverfix，可以运行 <code>git push origin serverfix:awesomebranch</code>来将本地的 serverfix 分支推送到远程仓库上的 awesomebranch 分支。</p><p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p><ul><li>master分支是主分支，因此要时刻与远程同步；</li><li>dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li><li>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</li><li>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</li></ul><h4 id="冲突、推送失败"><a href="#冲突、推送失败" class="headerlink" title="冲突、推送失败"></a>冲突、推送失败</h4><p>当你和其他人在同一时间克隆，他们先推送到上游然后你再推送到上游，你的推送就会毫无疑问地被拒绝。 你必须先将他们的工作拉取pull下来并将其合并进你的工作后才能推送。</p><p>相当于是从远程获取最新版本并merge到本地</p><h3 id="从远程仓库获取数据"><a href="#从远程仓库获取数据" class="headerlink" title="从远程仓库获取数据"></a>从远程仓库获取数据</h3><p><code>$ git fetch [remote-name]</code></p><p>这个命令会访问远程仓库，从中拉取所有你<strong>还没有的数据</strong>。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看，它并<strong>不会自动合并或修改你当前的工作</strong>。</p><p><code>$ git pull [remote-name]</code></p><p>如果你有一个分支设置为<strong>跟踪一个远程分支</strong>，可以使用 git pull 命令来自动的抓取然后合并远程分支到当前分支。git clone 命令会自动设置本地 master 分支跟踪克隆的远程仓库的 master 分支（或不管是什么名字的默认分支）。 运行 git pull 通常会从最初克隆的服务器上抓取数据并<strong>自动尝试合并到当前所在的分支</strong>。</p><p>如果git pull失败，一般是因为没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --<span class="built_in">set</span>-upstream dev origin/dev</span><br><span class="line"></span><br><span class="line">Branch dev <span class="built_in">set</span> up to track remote branch dev from origin.</span><br></pre></td></tr></table></figure><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><p>假设你已经通过远程分支做完所有的工作了，也就是说你和你的协作者已经完成了一个特性并且将其合并到了远程仓库的 master 分支（或任何其他稳定代码分支）。 可以运行带有<code>--delete</code> 选项的 <code>git push</code> 命令来删除一个远程分支。 如果想要从服务器上删除 serverfix 分支，运行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --delete serverfix</span><br><span class="line"></span><br><span class="line">To https://github.com/schacon/simplegit</span><br><span class="line">  - [deleted]         serverfix</span><br></pre></td></tr></table></figure><p>基本上这个命令做的只是从服务器上移除这个指针。 Git 服务器通常会保留数据一段时间直到垃圾回收运行，所以如果不小心删除掉了，通常是很容易恢复的。</p><h2 id="Git-本地高级操作"><a href="#Git-本地高级操作" class="headerlink" title="Git 本地高级操作"></a>Git 本地高级操作</h2><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><h4 id="创建、切换分支"><a href="#创建、切换分支" class="headerlink" title="创建、切换分支"></a>创建、切换分支</h4><p>创建并切换到新的分支dev</p><p><code>$ git branch dev</code></p><p><code>$ git checkout dev</code></p><p>等价于<code>$ git checkout -b dev</code>  </p><p>​       </p><p>复制远程分支到本地</p><p><code>$ git checkout -b dev origin/dev</code></p><p>dev是本地新建的分支名字，origin/dev是远程分支</p><p>查看所有分支，以及当前所在分支，*表示当前分支</p><p><code>$ git branch</code>  </p><p>切换分支</p><p><code>$ git checkout dev</code></p><p>切换出去前，要保存好编辑过的文件，用<code>add commit</code>，或者保存现场</p><h4 id="保存现场"><a href="#保存现场" class="headerlink" title="保存现场"></a>保存现场</h4><p><code>$ git stash</code></p><p>当在一个分支的开发工作未完成，却又要切换到另外一个分支进行开发的时候，并不是不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。除了commit原分支的代码改动的方法外，我觉得保存现场是一个更加便捷的选择，暂时冻结开发现场，等待其他分支完成后继续回来完成。</p><p>查看现场</p><p><code>git stash list</code></p><p>恢复现场</p><p><code>git stash apply，</code>默认恢复最新的现场，但是恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除</p><p><code>git stash pop，</code>恢复的同时把stash内容也删了</p><p>可以多次stash，恢复的时候，先用<code>git stash list</code>查看，然后恢复指定的stash，用命令：<code>$ git stash apply stash@{0}</code></p><p>删除合并后的分支</p><p><code>$ git branch -d dev</code> </p><p> 丢弃一个没有被合并过的分支</p><p><code>$ git branch -D dev</code>强行删除。</p><h3 id="分支详解"><a href="#分支详解" class="headerlink" title="分支详解"></a>分支详解</h3><p>当使用<code>git commit</code> 进行提交操作时，Git 会先计算每一个子目录的校验和，然后在 Git 仓库中这些校验和被保存为树对象。随后，Git 便会创建一个提交对象（98ca9），它除了包含上面提到的那些信息外，还包含指向这个树对象（92ec2）的指针。如此一来，Git 就可以在需要的时候重现此次保存的快照。</p><p>现在，Git 仓库中有五个对象：一个提交对象（包含着指向前述树对象的指针和所有提交信息） 、一个树对象（记录着目录结构和 blob 对象索引）以及三个 blob 对象（保存着文件快照）。</p><p><img src="/2018/11/22/Git教程/./commit操作解释.png" alt="commit 操作解释"></p><h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><p>快速合并：<code>$ git merge dev</code></p><p><img src="/2018/11/22/Git教程/./快速合并1.png" alt="快速合并1"></p><p><img src="/2018/11/22/Git教程/./快速合并2.png" alt="快速合并2"></p><p>关闭快速合并，这样在Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p><p><code>$ git merge --no-ff -m &quot;merge withno-ff&quot; dev</code></p><p><img src="/2018/11/22/Git教程/./关闭快速合并.png" alt="关闭快速合并"></p><h4 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h4><p>有时候合并操作不会如此顺利。如果你在两个不同的分支中，对同一个文件的<u>同一个部分</u>进行了<u>不同的修改</u>，Git 就没法干净的合并它们。此时 Git 做了部分合并工作，但是没有自动地创建一个新的合并提交。 Git 会暂停下来，等待你去解决合并产生的冲突。</p><p>例子：</p><p><code>master</code>分支和<code>feature1</code>分支各自都分别对同一部分修改并有新的提交，就会产生冲突</p><p><img src="/2018/11/22/Git教程/./合并冲突1.png" alt="合并冲突1"></p><p>Git告诉我们，readme.txt文件存在冲突，必须手动解决冲突后再提交，可以直接查看readme.txt的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under theGPL.</span><br><span class="line">Git has a mutable index called stage.</span><br><span class="line">Git tracks changes of files.</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt;HEAD</span><br><span class="line">Creating a new branchis quick &amp; simple.</span><br><span class="line">=========</span><br><span class="line">Creating a new branchis quick AND simple.</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;feature1</span><br></pre></td></tr></table></figure><p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容。</p><p><img src="/2018/11/22/Git教程/./合并冲突2.png" alt="合并冲突2"></p><p>为了冲突解决，你可以选择使用由<code>=======</code>分割的两部分中的一个，或者你也可以自行合并这些内容（可以是完全新的内容），并且 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code> ,<code>=======</code> , 和<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>这些行要被完全删除了。</p><p> 在你解决了所有文件里的冲突之后，对每个文件<strong>使用<code>git add</code> 命令来将其标记为冲突已解决</strong>。 一旦暂存这些原本有冲突的文件，Git 就会将它们标记为冲突已解决，然后commit保存入仓库。</p><p><img src="/2018/11/22/Git教程/./合并冲突3.png" alt="合并冲突3"></p><p>如果你想使用图形化工具来解决冲突，你可以运行 git mergetool，该命令会为你启动一个合适的可视化合并工具，并带领你一步一步解决这些冲突：</p><p><code>$ git mergetool</code></p><p>查看已合并的分支，从而删除没用的分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --merged</span><br><span class="line">  iss53</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><p>查看未合并的分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --no-merged</span><br><span class="line">  testing</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>Git鼓励大量使用分支：</p><ul><li>查看分支：git branch</li><li><p>创建分支：git branch <name></name></p></li><li><p>切换分支：git checkout <name></name></p></li><li>创建+切换分支：git checkout -b <name></name></li><li>合并某分支到当前分支：git merge <name></name></li><li>删除分支：git branch -d <name></name></li></ul><h3 id="跟踪分支"><a href="#跟踪分支" class="headerlink" title="跟踪分支"></a>跟踪分支</h3><p>从一个远程跟踪分支检出一个本地分支，这个本地分支就叫做“跟踪分支”（有时候也叫做 “上游分支”）。 <strong>跟踪分支是与远程分支有直接关系的本地分支</strong>。 如果在一个跟踪分支上输入<code>git pull</code>，Git 能自动地识别去哪个服务器上抓取、合并到哪个分支。</p><ul><li><p>创建跟踪分支：<code>git checkout -b [branch][remotename]/[branch]</code></p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b sf origin/serverfix</span><br><span class="line"></span><br><span class="line">Branch sf <span class="built_in">set</span> upto track remote branch serverfix from origin.</span><br><span class="line"></span><br><span class="line">Switched to a newbranch <span class="string">'sf'</span></span><br></pre></td></tr></table></figure></li><li><p><strong>设置已有的本地分支</strong>跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支，你可以在任意时间使用 <code>-u</code> 或 <code>--set-upstream-to</code> 选项运行 <code>git branch</code> 来显式地设置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -uorigin/serverfix</span><br><span class="line"></span><br><span class="line">Branch serverfixset up to track remote branch serverfix from origin.</span><br></pre></td></tr></table></figure></li></ul><p>可以使用 <code>git branch -vv</code> 。 这会将所有的本地分支列出来并且包含更多的信息，如每一个分支正在跟踪哪个远程分支与本地分支是否是领先、落后或是都有。</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -vv</span><br><span class="line"></span><br><span class="line">  iss53    7e424c3 [origin/iss53: ahead 2] forgot the brackets</span><br><span class="line"></span><br><span class="line">  master   1ae2a45 [origin/master] deploying index fix</span><br><span class="line"></span><br><span class="line">* serverfix  f8674d9 [teamone/server-fix-good: ahead 3, behind 1]this should <span class="keyword">do</span> it</span><br><span class="line"></span><br><span class="line">  testing  5ea463a trying something new</span><br></pre></td></tr></table></figure><p>可以看到 serverfix 分支正在跟踪 teamone 服务器上的 server-fix-good 分支并且领先 3落后 1，意味着服务器上有一次提交还没有合并入同时本地有三次提交还没有推送。<br>这些数字的值来自于你从每个服务器上最后一次抓取(fetch)的数据。 这个命令(branch -vv)并没有连接服务器，它只会告诉你关于本地缓存的服务器数据。 如果想要统计最新的领先与落后数字，需要在运行此命令前抓取所有的远程仓库。<br>可以像这样做：<br><code>git fetch --all; git branch –vv</code></p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>Git 可以给历史中的某一个提交打上标签，以示重要。</p><p>Git 使用两种主要类型的标签：<strong>轻量标签</strong>（lightweight）与<strong>附注标签</strong>（annotated）。</p><ul><li>轻量标签很像一个不会改变的分支 - 它只是一个特定提交的引用。</li><li>附注标签是存储在 Git 数据库中的一个完整对象。它们是可以被校验的；其中包含打标签者的名字、电子邮件地址、日期时间；通常建议创建附注标签，这样你可以拥有以上所有信息</li></ul><p><strong>标签创建</strong></p><p><code>$ `</code>git tag` 查看标签，<strong>注意</strong>，标签不是按时间顺序列出，而是按字母排序的。</p><p><code>$ git tagv1.0</code> 标签默认是打在最新提交的commit上的,标签名为v1.0</p><p><code>$ git tag -a v1.0 -m &quot;version 1.0released&quot; commit_id</code> 可以创建带有说明的附注标签，用<code>-a</code>指定标签名，<code>-m</code>指定说明文字。</p><p><strong>补打标签</strong></p><p><code>$ git  tag  v1.0 commit_id</code> 你也可以对过去的提交打标签，指定某个历史打标签，通过<code>$ git log --pretty=oneline --abbrev-commit</code>查找到对应要打标签的<code>commit_id</code>。</p><p><code>$ git show &lt;tagname&gt;</code>可以看到说明文字。</p><p><strong>标签推送</strong></p><p>默认情况下，<strong><code>git push</code>命令并<u>不会</u>传送标签到远程仓库服务器</strong>上。 在创建完标签后你必须显式地推送标签到共享服务器上</p><p><code>$ git push origin &lt;tagname&gt;</code> 推送某个标签到远程。</p><p><code>$ git push origin –-tags</code>  一次性推送全部尚未推送到远程的本地标签.</p><p><strong>标签删除</strong></p><p><code>$ git tag -d v1.0</code>如果标签打错了，也可以删除。</p><p>如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d v1.0</span><br><span class="line"></span><br><span class="line">Deleted tag <span class="string">'v1.0'</span> (was 6224937)</span><br></pre></td></tr></table></figure><p>然后，从远程删除。删除命令也是push，但是格式如下：</p><p><code>$ git pushorigin :refs/tags/v1.0</code>//可以删除一个远程标签。</p><p><strong>标签切换</strong></p><p>如果你想要工作目录与仓库中特定的标签版本完全一样，可以使用 <code>git checkout -b[branchname][tagname]</code>在特定的标签上创建一个新分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b version2 v2.0.0</span><br><span class="line"></span><br><span class="line">Switched to a new branch <span class="string">'version2'</span></span><br></pre></td></tr></table></figure><p>当然，如果在这之后又进行了一次提交，version2 分支会因为改动向前移动了，那么 version2 分支就会和 v2.0.0 标签稍微有些不同，这时就应该当心了。</p><h3 id="大文件更新Update-TODO未看"><a href="#大文件更新Update-TODO未看" class="headerlink" title="大文件更新Update(TODO未看)"></a>大文件更新Update(TODO未看)</h3><p>我们知道 Git 不仅仅是用来做代码版本管理的，很多其他领域的项目也会使用 Git。比如说我公司曾经一个客户的项目涉及到精密零件图纸文档的版本管理，他们也用Git。有一种使用场景是<strong>对一些体积庞大的文件进行修改</strong>，但是每一次保存 Git 都要计算文件的变化并更新工作区，这在硬盘慢的时候延迟卡顿非常明显。</p><p>git update-index –assume-unchanged 的真正用法是这样的：</p><ol><li>你正在修改一个巨大的文件，你先对其 git update-index –assume-unchanged，这样 Git 暂时不会理睬你对文件做的修改；</li><li>当你的工作告一段落决定可以提交的时候，重置改标识：git update-index –no-assume-unchanged，于是 Git 只需要做一次更新，这是完全可以接受的了；</li><li>提交＋推送。</li></ol><h3 id="配置命令别名"><a href="#配置命令别名" class="headerlink" title="配置命令别名"></a>配置命令别名</h3><ul><li>配置别名有点像C语言里的宏，进行简单的替换。</li><li><strong>替换单个词</strong>，告诉Git，以后<code>st</code>就表示<code>status</code></li></ul><p><code>$ git config--global alias.st status</code></p><p>当然还有别的命令可以简写，很多人都用co表示checkout，ci表示commit，br表示branch：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config--global alias.co checkout</span><br><span class="line">$ git config--global alias.ci commit</span><br><span class="line">$ git config --globalalias.br branch</span><br></pre></td></tr></table></figure><ul><li><strong>替换多个词</strong>（用单引号包含着多个词）；</li></ul><ol><li><p>命令<code>git reset HEAD file</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个<code>unstage</code>别名：<code>$ git config --global alias.unstage &#39;reset HEAD&#39;</code></p></li><li><p>配置格式化打印log的：（将<code>log--pretty=format:&quot;%h - %an - %ar : %s&quot;</code>定义为linelog）：</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config--global alias.linelog &apos;log --pretty=format:&quot;%h - %an - %ar : %s&quot;&apos;</span><br></pre></td></tr></table></figure></li></ol><ul><li>撤销别名，打开配置文件删除即可，详见【配置文件】章节</li></ul><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>Git的时候，加上–global是针对当前用户（整个软件）起作用的，如果不加，那只针对当前的仓库（当前文件夹）起作用。</p><ul><li><p><strong>当前仓库配置文件</strong>：每个仓库的Git配置文件都放在.git/config文件中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ cat .git/config </span><br><span class="line">[core]</span><br><span class="line">    repositoryformatversion = 0</span><br><span class="line">    filemode = <span class="literal">true</span></span><br><span class="line">    bare = <span class="literal">false</span></span><br><span class="line">    logallrefupdates = <span class="literal">true</span></span><br><span class="line">    ignorecase = <span class="literal">true</span></span><br><span class="line">    precomposeunicode = <span class="literal">true</span></span><br><span class="line">[remote <span class="string">"origin"</span>]</span><br><span class="line">    url = git@github.com:michaelliao/learngit.git</span><br><span class="line">    fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch <span class="string">"master"</span>]</span><br><span class="line">    remote = origin</span><br><span class="line">    merge = refs/heads/master</span><br><span class="line">[<span class="built_in">alias</span>]</span><br><span class="line">    last = <span class="built_in">log</span> -1</span><br></pre></td></tr></table></figure><p>别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。</p></li></ul><ul><li><p><strong>全局配置文</strong>件：放在用户主目录（window系统中的用户目录下）下的一个隐藏文件.gitconfig中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.gitconfig</span><br><span class="line">[<span class="built_in">alias</span>]</span><br><span class="line">    co = checkout</span><br><span class="line">    ci = commit</span><br><span class="line">    br = branch</span><br><span class="line">    st = status</span><br><span class="line">[user]</span><br><span class="line">    name = Your Name</span><br><span class="line">email = your@email.com</span><br></pre></td></tr></table></figure><p>配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。</p></li></ul><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><h3 id="参与Github开源项目"><a href="#参与Github开源项目" class="headerlink" title="参与Github开源项目"></a>参与Github开源项目</h3><p>如何参与一个开源项目呢？比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，你可以访问它的项目主页<a href="https://github.com/twbs/bootstrap" target="_blank" rel="noopener">https://github.com/twbs/bootstrap</a>，点“<code>Fork</code>”，将别人的仓库在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：<code>git‍ clone ‍git@github.com:jizxGit/bootstrap.git</code></p><p>一定要从自己的账号下clone仓库，这样你才能推送修改，因为你在github添加了SSH。如果从bootstrap的作者的仓库地址<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:twbs/bootstrap.git克隆，因为没有权限，你将不能推送修改。</p><p>Bootstrap的官方仓库twbs/bootstrap、你在GitHub上克隆的仓库my/bootstrap，以及你自己克隆到本地电脑的仓库，他们的关系就像下图显示的那样：</p><p><img src="/2018/11/22/Git教程/./参与Github开源项目1.png" alt="参与Github开源项目1"></p><p>如果你想修复bootstrap的一个bug，或者新增一个功能，立刻就可以开始干活，干完后，往自己的仓库推送。</p><p>如果你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个<code>pull request</code>。当然，对方是否接受你的pull request就不一定了。</p><p><img src="/2018/11/22/Git教程/./参与Github开源项目2.png" alt="参与Github开源项目2"></p><h3 id="小组合作"><a href="#小组合作" class="headerlink" title="小组合作"></a>小组合作</h3><ol><li><p>首先在github上创建一个需要与团队共享的仓库</p></li><li><p>然后在仓库的Settings中添加队友的github帐户： </p><p> <img src="/2018/11/22/Git教程/./小组合作1.png" alt="小组合作1">         </p><p><img src="/2018/11/22/Git教程/./小组合作2.png" alt="小组合作2">                  </p></li><li><p>添加完成后，对方会收到请求，如下图，需要对方同意请求，才算是加入到这个团队中，拥有push的权限。</p><p><img src="/2018/11/22/Git教程/./小组合作3.png" alt="小组合作3"> </p></li></ol><p><strong>流程会像这样</strong>：</p><p>A拥有repository，想要让B也能更新自己的repository，就把B加入collaborators，这样B要一起合作这份code的时候，clone A 的clone repo到本地，然后B就可以在自己的本机尽情修改code (用branch、commit、merge)，最后在push的时候输入B自己的帐密，会更新A的repository(A仍就可以继续更新自己的repository)，但B自己的github账户并不会有一份和A相同的repository(只会有A的repo连结)</p><h2 id="Git-bash-快捷键（window）"><a href="#Git-bash-快捷键（window）" class="headerlink" title="Git bash 快捷键（window）"></a>Git bash 快捷键（window）</h2><h3 id="全屏"><a href="#全屏" class="headerlink" title="全屏"></a>全屏</h3><p><code>ATL+ENTER</code></p><h3 id="字体变化"><a href="#字体变化" class="headerlink" title="字体变化"></a>字体变化</h3><p><code>CTRL+PLUS/MINUS/ZERO</code></p><h3 id="右键"><a href="#右键" class="headerlink" title="右键"></a>右键</h3><p><code>ALT+SPACE</code></p></the></excerpt>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python编码问题</title>
      <link href="/2018/11/19/python%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/2018/11/19/python%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>理清楚 从编写python文件的编码，到运行时的编码，最后print打印显示这一整根流程中的各种编码问题</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p>计算机最早是只有英文ASCII码，但世界上除了英语，还有很多其他语言，因此只有ASCII码编码显然不适合这种情况。</p><p>于是后来在中国、日本等其他国家都有了自己的一套编码，但是这样就出现问题了，不同国家之间数据传输，就会出现乱码。</p><p>为了让全世界都可以使用计算机，于是有了Unicode编码方式，俗称万国码，可以存储好几万个字符。（unicode专题TODO）</p><p><strong>因此计算机内存中，对字符串的编码使用的都是Unicode，作为中间者。</strong></p><p>但是又有新的问题出现了，<strong>Unicode是定长编码，不适合存储</strong>，非常浪费存储空间，这里又有了一种新的编码方式：utf-8。<strong>utf-8采用的是不定长编码</strong>，大大节约了存储空间。在数据存储和传输方面非常方便。</p><p>当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码(或者其他编码)。</p><p><img src="/2018/11/19/python编码问题/./1.png" alt=""></p><hr><p><img src="/2018/11/19/python编码问题/./2.png" alt=""></p><h4 id="pyhton2-中的编码过程"><a href="#pyhton2-中的编码过程" class="headerlink" title="pyhton2 中的编码过程"></a>pyhton2 中的编码过程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding:utf8 _*_</span></span><br><span class="line">s = <span class="string">"中文"</span></span><br><span class="line">print(type(s)) <span class="comment"># &lt;type 'str'&gt;</span></span><br><span class="line"></span><br><span class="line">s2=s.encode(<span class="string">'utf8'</span>) <span class="comment"># unicode解码错误，无法以ASCII解码字节 0xe4，超出了range（128）：UnicodeDecodeError: 'ascii' codec can't decode byte 0xe4 in position 0: ordinal not in range(128)</span></span><br><span class="line"></span><br><span class="line">s2 = <span class="string">u'中文'</span>  <span class="comment"># &lt;type 'unicode'&gt;</span></span><br><span class="line">s3=s2.encode(<span class="string">'utf8'</span>)</span><br><span class="line">print(type(s3)) <span class="comment"># &lt;type 'str'&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p><strong>在运行前</strong>，python解释器默认以ASCII码解码文件，因此如果文件中有中文就会报错：<code>Non-ASCII character &#39;\xe9&#39;</code> ，表示出现了超出ASCII码（0-127）以外的字节，因此需要在文件第一行添加：<code># _*_ coding:utf8 _*_</code> ，让编译器以指定的字符集进行解码然后编译。</p></li><li><p><strong>在运行时</strong>，Python2 中字符串有2种类型：<code>&lt;type &#39;str&#39;&gt;</code> 和<code>&lt;type &#39;unicode&#39;&gt;</code>，默认是<code>str</code>类型 。变量<code>s</code> 的类型是<code>&lt;type &#39;str&#39;&gt;</code> ，可以理解为保存了“中文”以utf8编码的二进制数据。<code>s.encode(&#39;utf8&#39;)</code>命令实际上过程是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s.decode(defaultencoding).encode(<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类型的转变过程</span></span><br><span class="line">&lt;type <span class="string">'str'</span>&gt;  ——以defaultencoding解码——&gt;   &lt;type <span class="string">'unicode'</span>&gt;——以encode方法指定的字符集编码——&gt;   &lt;type <span class="string">'str'</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(sys.getdefaultencoding()) <span class="comment"># ascii</span></span><br></pre></td></tr></table></figure><p><code>defaultencoding</code>在python2中默认是ASCII，而<code>s</code>是以utf8编码的，因此在str—&gt;unicode的时候就会出现<code>UnicodeDecodeError</code></p></li><li><p><strong>解决办法</strong>有2种：</p><ol><li><p>显式进行解码<code>s.decode(&#39;utf8&#39;).encode(&#39;utf8&#39;)</code></p></li><li><p>修改系统默认字符集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)<span class="comment"># Python2.5初始化后会删除sys.setdefaultencoding这个方法，因此需要重新载入</span></span><br><span class="line">print(sys.getdefaultencoding()) <span class="comment"># ascii</span></span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</span><br><span class="line">print(sys.getdefaultencoding()) <span class="comment"># utf-8</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h5 id="u前缀"><a href="#u前缀" class="headerlink" title="u前缀"></a>u前缀</h5><p>在python2里面，<code>u</code>表示unicode string，类型是unicode, 没有<code>u</code>表示byte string，类型是 str。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">'中文'</span>   <span class="comment"># '\xe4\xb8\xad\xe6\x96\x87'</span></span><br><span class="line">print(type(s1)) <span class="comment"># &lt;type 'str'&gt;</span></span><br><span class="line">print(len(s1))  <span class="comment"># 6</span></span><br><span class="line"></span><br><span class="line">s2 = <span class="string">u'中文'</span>     <span class="comment"># u'\u4e2d\u6587'</span></span><br><span class="line">print(type(s2)) <span class="comment"># &lt;type 'unicode'&gt;</span></span><br><span class="line">print(len(s2))  <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line">print(s1 == s2) <span class="comment"># False (报错)</span></span><br><span class="line">print(s1 <span class="keyword">is</span> s2) <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">s3=s.encode(<span class="string">'utf8'</span>)</span><br><span class="line">print(type(s3))</span><br></pre></td></tr></table></figure><h5 id="字符串长度问题"><a href="#字符串长度问题" class="headerlink" title="字符串长度问题"></a>字符串长度问题</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python2.7</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">msg=<span class="string">'中文'</span>   <span class="comment"># '\xe4\xb8\xad\xe6\x96\x87'此时msg被编码为utf-8,而不是ascii ,</span></span><br><span class="line">type(msg)   <span class="comment"># &lt;type 'str'&gt;</span></span><br><span class="line">len(msg) <span class="comment"># 6 因为utf8每个汉字占3个字节</span></span><br><span class="line"></span><br><span class="line">umsg=unicode(msg) <span class="comment"># u'\u4e2d\u6587'</span></span><br><span class="line">type(umsg)  <span class="comment"># &lt;type 'unicode'&gt;</span></span><br><span class="line">len(umsg)   <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><h4 id="Python3-中的编码过程"><a href="#Python3-中的编码过程" class="headerlink" title="Python3 中的编码过程"></a>Python3 中的编码过程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">'中文'</span>   <span class="comment"># '中文'</span></span><br><span class="line">print(type(s1)) <span class="comment"># &lt;class 'str'&gt;</span></span><br><span class="line">print(len(s1))  <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">s2 = <span class="string">u'中文'</span>     <span class="comment"># '中文' 与s1没有区别</span></span><br><span class="line">print(type(s2)) <span class="comment"># &lt;class 'str'&gt;</span></span><br><span class="line">print(len(s2))  <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">print(s1 == s2) <span class="comment"># True</span></span><br><span class="line">print(s1 <span class="keyword">is</span> s2) <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">s3=s1.encode(<span class="string">"utf8"</span>)</span><br><span class="line">print(type(s3))  <span class="comment">#&lt;class 'bytes'&gt;</span></span><br><span class="line">print(s3) <span class="comment"># b'\xe4\xb8\xad\xe6\x96\x87'</span></span><br><span class="line"></span><br><span class="line">s4=s3.decode(<span class="string">"utf8"</span>) </span><br><span class="line">print(type(s4)) <span class="comment"># &lt;class 'str'&gt;</span></span><br><span class="line">print(s4) <span class="comment"># 中文</span></span><br></pre></td></tr></table></figure><p>python3的改进：</p><ol><li>Python3在编译时，文件默认就是以<code>utf-8</code>进行解码然后编译</li><li>python3中<strong>所有字符串都是以unicode格式(\uXXXX)保存在内存中</strong>，<strong><code>u</code>前缀没有特殊含义了</strong>。只有<code>&lt;class str&gt;</code> 类型，对应的就是python2中的 <code>&lt;type &#39;unicode&#39;&gt;</code> 。而<code>&lt;class byte&gt;</code>  类似于python2的<code>&lt;type &#39;str&#39;&gt;</code> 。</li><li><code>encode</code>函数根据参数指定的编码方式，把str类型的字符串转换为bytes类型。而在python3中字符串没有<code>decode</code>函数，<code>byte</code>类型才有。</li><li>在python3中，我们将不能直接看到unicode字节串，它会被显示为中文的“中文”；因为python3默认使用unicode编码，<strong>unicode字节串将被直接处理为中文显示出来。</strong></li></ol><h4 id="获取字符的unicode"><a href="#获取字符的unicode" class="headerlink" title="获取字符的unicode"></a>获取字符的unicode</h4><ul><li>根据unicode获取字符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chr参数支持10进制、16进制</span></span><br><span class="line">chr(<span class="number">0x4e2d</span>)  <span class="comment"># '中' </span></span><br><span class="line">chr(<span class="number">20013</span>)   <span class="comment"># '中'</span></span><br></pre></td></tr></table></figure><ul><li>根据字符获取unicode码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回值：10进制的unicode码</span></span><br><span class="line">ord(<span class="string">"中"</span>)  <span class="comment"># 20013</span></span><br></pre></td></tr></table></figure><h4 id="Python2中的print过程"><a href="#Python2中的print过程" class="headerlink" title="Python2中的print过程"></a>Python2中的print过程</h4><p>Python2.7中调用print打印<code>var</code>变量时，操作系统会对<code>var</code>做一定的字符处理：</p><ul><li>如果<code>var</code>是str类型的变量，则直接将<code>var</code>变量交付给终端进行显示；</li><li>如果<code>var</code>变量是unicode类型，则操作系统首先将var编码成str类型的对象（编码格式取决于stdout的编码格式<code>print(sys.stdout.encoding)</code>），然后再交由终端进行显示。</li><li>在终端显示时，如果str类型的<strong>变量的编码方式</strong>和<strong>终端设置的编码方式</strong>不一致，很可能会出现乱码问题。</li></ul><h4 id="Python2-与3-读取文件的编码问题"><a href="#Python2-与3-读取文件的编码问题" class="headerlink" title="Python2 与3 读取文件的编码问题"></a>Python2 与3 读取文件的编码问题</h4><p><code>codecs</code>会按照指定的字符集解码文件，然后将字符串转为<code>&lt;type &#39;unicode&#39;&gt;</code> </p><p><code>open</code>读取文件后的字符串是<code>&lt;type &#39;str&#39;&gt;</code> 类型，而且a.txt是以utf8编码保存的，与‘分’是同一种编码（<code># _*_ coding:utf8 _*_</code>），因此可以直接split</p><p>a.txt中的内容是：中文分国家</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding:utf8 _*_</span></span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> codecs.open(<span class="string">'a.txt'</span>,<span class="string">'r'</span>,<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    line=f.read()</span><br><span class="line">    print(type(line)) <span class="comment"># &lt;type 'unicode'&gt;</span></span><br><span class="line">    ss=line.split(<span class="string">'分'</span>.decode(<span class="string">'utf8'</span>))</span><br><span class="line">    <span class="comment"># 相当于下面2行</span></span><br><span class="line">    <span class="comment"># c='分'  # &lt;type 'str'&gt;  </span></span><br><span class="line">    <span class="comment"># ss=line.split(c.decode('utf8')) #因为line是unicode，而c是str，因此必须进行decode</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> ss:</span><br><span class="line">        print(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    line2=f.readline()</span><br><span class="line">    print(type(line2)) <span class="comment">#&lt;type 'str'&gt;</span></span><br><span class="line">    ss=line2.split(<span class="string">'分'</span>)</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> ss:</span><br><span class="line">        print(s)</span><br></pre></td></tr></table></figure><p>python3中都是unicode存储字符串，因此没有上面的问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> codecs.open(<span class="string">'a.txt'</span>,<span class="string">'r'</span>,<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    line=f.read()</span><br><span class="line">    print(type(line)) <span class="comment"># &lt;class 'str'&gt;</span></span><br><span class="line">    ss=line.split(<span class="string">'分'</span>)</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> ss:</span><br><span class="line">        print(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.txt'</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    line2=f.readline()</span><br><span class="line">    print(type(line2)) <span class="comment"># &lt;class 'str'&gt;</span></span><br><span class="line">    ss=line2.split(<span class="string">'分'</span>)</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> ss:</span><br><span class="line">        print(s)</span><br></pre></td></tr></table></figure></the></excerpt>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 编码问题 </tag>
            
            <tag> 打印 </tag>
            
            <tag> 乱码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java方法传参问题</title>
      <link href="/2018/07/04/java%E6%96%B9%E6%B3%95%E4%BC%A0%E5%8F%82%E9%97%AE%E9%A2%98/"/>
      <url>/2018/07/04/java%E6%96%B9%E6%B3%95%E4%BC%A0%E5%8F%82%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h3 id="一、基本类型-和-引用类型的不同之处"><a href="#一、基本类型-和-引用类型的不同之处" class="headerlink" title="一、基本类型 和 引用类型的不同之处"></a>一、基本类型 和 引用类型的不同之处</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">String str = <span class="string">"hello"</span>;</span><br></pre></td></tr></table></figure><p>首先变量其实是堆栈中的地址索引。然后 基本类型的数据直接保存在堆栈中，而对象是保存在堆中，堆栈中保存的是该对象在堆中的地址，这个地址就是所谓的<strong>引用</strong></p><p><img src="/2018/07/04/java方法传参问题/java传参1.png" alt=""></p><h3 id="二、赋值运算符（-）的作用"><a href="#二、赋值运算符（-）的作用" class="headerlink" title="二、赋值运算符（=）的作用"></a>二、赋值运算符（=）的作用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">20</span>;</span><br><span class="line">str = <span class="string">"java"</span>;</span><br></pre></td></tr></table></figure><p><img src="/2018/07/04/java方法传参问题/java传参2.png" alt=""></p><p>对于基本类型 num ，赋值运算符会直接改变变量的值，原来的值被覆盖掉。<br>对于引用类型 str，赋值运算符会改变引用中所保存的地址，原来的地址被覆盖掉。<strong>但是原来的对象不会被改变（重要）。</strong><br>如上图所示，”hello” 字符串对象没有被改变。（没有被任何引用所指向的对象是垃圾，会被垃圾回收器回收）</p><h3 id="三、调用方法时发生了什么？参数传递基本上就是赋值操作。"><a href="#三、调用方法时发生了什么？参数传递基本上就是赋值操作。" class="headerlink" title="三、调用方法时发生了什么？参数传递基本上就是赋值操作。"></a>三、调用方法时发生了什么？<strong>参数传递基本上就是赋值操作</strong>。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">20</span>;</span><br><span class="line">str = <span class="string">"java"</span>;</span><br><span class="line">func(num,str);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> n,String s)</span></span>&#123;</span><br><span class="line">    n=<span class="number">30</span>;</span><br><span class="line">    s+=<span class="string">"haha"</span>;</span><br><span class="line">    <span class="comment">// do something with s</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/07/04/java方法传参问题/java传参3.png" alt=""></p><p>n变为30，num不受影响；s虽然是对象类型，但是由于String是不可变类型，因此并不会影响到原来的str变量。所以结果如下：</p><p><img src="/2018/07/04/java方法传参问题/java传参4.png" alt=""></p><p>如果str是StringBuilder对象的话，就会改变，结果如下：</p><p><img src="/2018/07/04/java方法传参问题/java传参5.png" alt=""></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在java中，不管原始参数的类型是什么，<strong>参数都是按值传递的</strong>。</p><p>每当一个方法被执行时，在堆栈中就会为每个参数创建一个拷贝，这个拷贝被传递到方法的内部，这个拷贝分以下2种情况：</p><ul><li>如果参数是基本类型，那么在堆栈中复制的就是这个参数的值</li><li>如果是对象，那么在堆栈中传递的便是指向真正对象数据的新的引用。这个新的引用被传递到方法内部。</li></ul><p>因此关于参数在方法中被修改后，会不会影响到原始变量，根据上面的原理：</p><ol><li>修改一个基础类型的参数，不会影响原始数据；</li><li>修改一个对象参数(数组、集合、map、类)的引用时，永远不会影响到原始的引用；</li><li>修改一个对象参数的属性时，会影响原始对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DuplicatenNum app = <span class="keyword">new</span> DuplicatenNum();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> a1=<span class="number">5</span>;</span><br><span class="line">        app.fun1(a1);</span><br><span class="line">        System.out.println(a1);</span><br><span class="line"></span><br><span class="line">        TreeNode a2=<span class="keyword">new</span> TreeNode(<span class="number">5</span>);</span><br><span class="line">        app.fun2(a2);</span><br><span class="line">        System.out.println(a2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] a2_2=&#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        app.fun2_2(a2_2);</span><br><span class="line">        System.out.println(a2_2[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        app.fun3(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">fun1</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        a=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        root=<span class="keyword">new</span> TreeNode(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun2_2</span><span class="params">(<span class="keyword">int</span> []  arr)</span> </span>&#123;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun3</span><span class="params">(List&lt;Integer&gt; list)</span></span>&#123;</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">TreeNode&#123;val=5, left=null, right=null&#125;</span><br><span class="line">1</span><br><span class="line">[1, 2]</span><br></pre></td></tr></table></figure><p>参考： <a href="https://www.zhihu.com/question/31203609" target="_blank" rel="noopener">Java 到底是值传递还是引用传递？</a> </p></the></excerpt>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 传参 </tag>
            
            <tag> 方法调用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何有效批评而不是吵架</title>
      <link href="/2018/06/17/%E5%A6%82%E4%BD%95%E6%9C%89%E6%95%88%E6%89%B9%E8%AF%84%E8%80%8C%E4%B8%8D%E6%98%AF%E5%90%B5%E6%9E%B6/"/>
      <url>/2018/06/17/%E5%A6%82%E4%BD%95%E6%9C%89%E6%95%88%E6%89%B9%E8%AF%84%E8%80%8C%E4%B8%8D%E6%98%AF%E5%90%B5%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>一般情况下，如果一个问题刚刚出现，你就把它指出来，那对方很快就能改正，不要堆积容忍太久。同时要学会如何有效指出问题，有效批评。</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p><img src="/2018/06/17/如何有效批评而不是吵架/如何有效批评而不是吵架.png" alt=""></p></the></excerpt>]]></content>
      
      
      <categories>
          
          <category> 心理 </category>
          
          <category> 人际交往 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心理 </tag>
            
            <tag> 批评 </tag>
            
            <tag> 吵架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>剑指offer</title>
      <link href="/2018/06/17/%E5%89%91%E6%8C%87offer/"/>
      <url>/2018/06/17/%E5%89%91%E6%8C%87offer/</url>
      
        <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>剑指offer题目（持续更新）</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><h4 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程不安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton1 instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法私有化，防止外部使用new创建对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"单例模式1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取实例的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton1();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><p>有人提出在getInstance()方法上同步锁，但是锁住一整个方法可能粒度过大，不利于效率。既然锁方法不太好，那么锁代码呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 instance = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 构造方法私有化，防止外部使用new创建对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"单例模式2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取实例的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton2.class) &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> Singleton2();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这样做看似解决了线程安全问题，其实不然</strong>。设现有线程A和B，在t1时刻线程A和B均已通过判空语句但都未取得锁资源；t2时刻时，A先取得锁资源进入临界区（被锁的代码块），执行new操作创建实例对象，然后退出临界区，释放锁资源。t3时刻，B取得被A释放的锁资源进入临界区，执行new操作创建实例对象，然后退出临界区，释放锁资源。明显地，Singleton被实例化两次。</p><p>改进：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程安全，但是如果instance已经存在不能直接返回，也会被锁住，效率很低下，还可以优化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton3 instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"单例模式3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton3.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> Singleton3();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双检查锁机制（推荐）"><a href="#双检查锁机制（推荐）" class="headerlink" title="双检查锁机制（推荐）"></a>双检查锁机制（推荐）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton4</span> </span>&#123;</span><br><span class="line"><span class="comment">//注意此处加上了volatile关键字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton4 instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"单例模式4"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton4 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton4.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton4();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在JDK1.5以前，DCL（双检查锁机制）是不稳定的，有时也可能创建多个实例，在1.5以后开始提供volatile关键字修饰变量来达到稳定效果。</p><h4 id="多线程测试入口"><a href="#多线程测试入口" class="headerlink" title="多线程测试入口"></a>多线程测试入口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建实现了Runnable接口的匿名类</span></span><br><span class="line">        Runnable run = () -&gt; Singleton2.getInstance();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(run);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>单例是为了保证系统中只有一个实例，其关键点有：</p><ol><li>私有构造函数</li><li>声明静态单例对象</li><li>构造单例对象之前要加锁（lock一个静态的object对象）</li><li>需要两次检测单例实例是否已经被构造，分别在锁之前和锁之后</li></ol><p><strong>1.为何要检测两次？</strong></p><p>如上面所述，有可能延迟加载或者缓存原因，造成构造多个实例，违反了单例的初衷。</p><p><strong>2.构造函数能否公有化？</strong></p><p>不行，单例类的构造函数必须私有化，单例类不能被实例化，单例实例只能静态调用</p><p><strong>3.lock住的对象为什么要是object对象，可以是int吗？</strong></p><p>不行，锁住的必须是个引用类型。如果锁值类型，<strong>每个不同的线程在声明的时候值类型变量的地址都不一样，那么上个线程锁住的东西下个线程进来会认为根本没锁，相当于每次都锁了不同的门，</strong>没有任何卵用。而引用类型的变量地址是相同的，每个线程进来判断锁多想是否被锁的时候都是判断同一个地址，相当于是锁在通一扇门，起到了锁的作用。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="二维有序数组中查找"><a href="#二维有序数组中查找" class="headerlink" title="二维有序数组中查找"></a>二维有序数组中查找</h4><p><img src="/2018/06/17/剑指offer/3.png" alt=""></p><p>思路：用target与数组右上角的值进行比较，小于右上角，则跳过该列，大于右上角，则跳过该行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] arr = &#123;</span><br><span class="line">                &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">9</span>&#125;,</span><br><span class="line">                &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">12</span>&#125;,</span><br><span class="line">                &#123;<span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">13</span>&#125;,</span><br><span class="line">                &#123;<span class="number">6</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">15</span>&#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">int</span>[][] arr2 = &#123;</span><br><span class="line">                &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">9</span>&#125;,</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(find(arr, <span class="number">11</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[][] arr, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.length &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = arr[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 用target与数组右上角的值进行比较</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; i &lt; arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// target小于右上角，则跳过该列</span></span><br><span class="line">            <span class="keyword">while</span> (target &lt; arr[i][j] &amp;&amp; j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// target大于右上角，则跳过该行</span></span><br><span class="line">            <span class="keyword">while</span> (target &gt; arr[i][j] &amp;&amp; i &lt; arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (target == arr[i][j]) &#123;</span><br><span class="line">                System.out.println(<span class="string">"i:"</span> + (i + <span class="number">1</span>) + <span class="string">",j:"</span> + (j + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="旋转数组的最小数字"><a href="#旋转数组的最小数字" class="headerlink" title="旋转数组的最小数字"></a>旋转数组的最小数字</h4><p><img src="/2018/06/17/剑指offer/8.png" alt=""></p><p>主要考虑三种情况：</p><ol><li>正常情况：{7,8,1,2,3,4,5,6}</li><li>有序情况：{1, 2, 3, 4, 5, 6}</li><li>相等情况：{1, 1, 0, 1, 1, 1, 1, 1}</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// int[] a = &#123;5,6,7,8,1,2,3,4&#125;;</span></span><br><span class="line">        <span class="comment">// int[] a = &#123;1, 1, 0, 1, 1, 1, 1, 1&#125;;</span></span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        System.out.println(findMin(a));</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用二分法进行查找</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = left;<span class="comment">//初始值原因见下方</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 正常情况，左边会大于等于右边，否则就已经是有序的数组，第一个就是最小值，因此mid初始为left</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span> (arr[left] &gt;= arr[right]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (right - left == <span class="number">1</span>) &#123;</span><br><span class="line">                mid = right;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 左边=中间=右边，只能遍历,&#123;1, 1, 0, 1, 1, 1, 1, 1&#125;;</span></span><br><span class="line">            <span class="keyword">if</span> (arr[left] == arr[right] &amp;&amp; arr[right] == arr[mid]) &#123;</span><br><span class="line">                <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (min &gt; arr[i]) &#123;</span><br><span class="line">                        min = arr[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> min;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 左边&lt;=中间，说明最小值在[mid,right]</span></span><br><span class="line">            <span class="keyword">if</span> (arr[left] &lt;= arr[mid]) &#123;</span><br><span class="line">                left = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 右边&gt;=中间，说明最小值在[left,mid]</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (arr[right] &gt;= arr[mid]) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[mid];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="调整数组-使奇数在偶数前面"><a href="#调整数组-使奇数在偶数前面" class="headerlink" title="调整数组 使奇数在偶数前面"></a>调整数组 使奇数在偶数前面</h4><p><img src="/2018/06/17/剑指offer/14.png" alt=""></p><p>并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p><p>基本解法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本解法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (numbers == <span class="keyword">null</span> || numbers.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = numbers.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">while</span> ((numbers[left] &amp; <span class="number">0x1</span>) == <span class="number">1</span>) left++;</span><br><span class="line">            <span class="keyword">while</span> ((numbers[right] &amp; <span class="number">0x1</span>) == <span class="number">0</span>) right--;</span><br><span class="line">            <span class="keyword">if</span> (left &lt;= right) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = numbers[left];</span><br><span class="line">                numbers[left] = numbers[right];</span><br><span class="line">                numbers[right] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可扩展的实现，解耦，完成各种条件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可扩展的实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        sort(arr, <span class="keyword">new</span> Condition() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> ((a &amp; <span class="number">0x1</span>) == <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] numbers, Condition c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (numbers == <span class="keyword">null</span> || numbers.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = numbers.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">while</span> (left &lt;= right &amp;&amp; c.check(numbers[left])) left++;</span><br><span class="line">            <span class="keyword">while</span> (left &lt;= right &amp;&amp; !c.check(numbers[right])) right--;</span><br><span class="line">            <span class="keyword">if</span> (left &lt;= right) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = numbers[left];</span><br><span class="line">                numbers[left] = numbers[right];</span><br><span class="line">                numbers[right] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">interface</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>保证顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//O(n^2)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reOrderArray</span><span class="params">(<span class="keyword">int</span> [] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (array == <span class="keyword">null</span> || array.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = array.length - <span class="number">1</span>; j &gt; i; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[j] % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; array[j - <span class="number">1</span>] % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = array[j];</span><br><span class="line">                    array[j] = array[j - <span class="number">1</span>];</span><br><span class="line">                    array[j - <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// O(n),辅助空间</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reOrderArray2</span><span class="params">(<span class="keyword">int</span> [] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (array == <span class="keyword">null</span> || array.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = array.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] copy = <span class="keyword">new</span> <span class="keyword">int</span>[array.length];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = array.length - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//从前向后扫描奇数</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; array.length ) &#123;</span><br><span class="line">            <span class="keyword">if</span>(array[left] % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">                copy[i++] = array[left];</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从后向前扫描偶数</span></span><br><span class="line">        <span class="keyword">while</span> (right &gt;= <span class="number">0</span> ) &#123;</span><br><span class="line">            <span class="keyword">if</span>(array[right] % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                copy[j--] = array[right];</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;array.length;k++)&#123;</span><br><span class="line">            array[k]=copy[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="顺时针打印矩阵"><a href="#顺时针打印矩阵" class="headerlink" title="顺时针打印矩阵"></a>顺时针打印矩阵</h4><p><img src="/2018/06/17/剑指offer/20.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span>[][] matrix = &#123;</span><br><span class="line">                &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;,</span><br><span class="line">                &#123;<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">5</span>&#125;,</span><br><span class="line">                &#123;<span class="number">11</span>, <span class="number">16</span>, <span class="number">15</span>, <span class="number">6</span>&#125;,</span><br><span class="line">                <span class="comment">// &#123;10,9,8,7&#125;,</span></span><br><span class="line">        &#125;;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = printMatrix(matrix);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : list) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title">printMatrix</span><span class="params">(<span class="keyword">int</span> [][] matrix)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;<span class="comment">// 因为每次打印都是从对角线[0,0]、[1,1]……的开始，因此只需要一个变量来标记</span></span><br><span class="line">        <span class="keyword">int</span> row = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> col = matrix[<span class="number">0</span>].length;</span><br><span class="line">        ArrayList&lt;Integer&gt; printList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (start * <span class="number">2</span> &lt; row &amp;&amp; start * <span class="number">2</span> &lt; col) &#123;</span><br><span class="line">            ArrayList&lt;Integer&gt; result = print(matrix, row, col, start);</span><br><span class="line">            printList.addAll(result);</span><br><span class="line">            ++start;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> printList;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title">print</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> endX = col - start - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> endY = row - start - <span class="number">1</span>;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 打印从左到右的上面一行 :第一行肯定要打印的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= endX; i++) &#123;</span><br><span class="line">            list.add(matrix[start][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 打印从上到下的右面的一列：第二行能不能打印的条件在循环中了</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start + <span class="number">1</span>; i &lt;= endY; i++) &#123;</span><br><span class="line">            list.add(matrix[i][endX]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (start &lt; endX &amp;&amp; start &lt; endY) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = endX - <span class="number">1</span>; i &gt;= start; i--) &#123;</span><br><span class="line">                list.add(matrix[endY][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (start &lt; endX &amp;&amp; start &lt; endY - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = endY - <span class="number">1</span>; i &gt; start; i--) &#123;</span><br><span class="line">                list.add(matrix[i][start]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组中超过一半的数字（还有一种解法）"><a href="#数组中超过一半的数字（还有一种解法）" class="headerlink" title="数组中超过一半的数字（还有一种解法）"></a>数组中超过一半的数字（还有一种解法）</h4><p><img src="/2018/06/17/剑指offer/29.png" alt=""></p><p>解法1：基于partition的函数的O(n)算法，因为数字超过半数，因此将原数组排序后，中位数一定就是那个数值（如果输入是）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解法2：一个数字出现次数超过数组长度的一半，说明他出现的次数比其他所有数字出现的次数还多。因此可以用result，time来分别保存统计的数字，以及出现的次数。遍历时如果相同time+1，不同time-1，当time=0时，result更新为当前数字，time重置为1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">MoreThanHalfNum_Solution</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.输入合法性验证</span></span><br><span class="line">        <span class="keyword">if</span> (array == <span class="keyword">null</span> || array.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.统计超过半数的数字</span></span><br><span class="line">        <span class="keyword">int</span> result = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> time = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="comment">//当time=0时，result更新为当前数字，time重置为1</span></span><br><span class="line">            <span class="keyword">if</span> (time == <span class="number">0</span>) &#123;</span><br><span class="line">                result = array[i];</span><br><span class="line">                time = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="comment">//遍历时如果相同time+1，不同time-1</span></span><br><span class="line">            <span class="keyword">if</span> (result == array[i])</span><br><span class="line">                time++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                time--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.是否超过半数验证</span></span><br><span class="line">        time = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (result == array[i]) &#123;</span><br><span class="line">                time++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (time * <span class="number">2</span> &lt;= array.length)</span><br><span class="line">            result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="最小的k个数（包含海量数据）"><a href="#最小的k个数（包含海量数据）" class="headerlink" title="最小的k个数（包含海量数据）"></a>最小的k个数（包含海量数据）</h4><p><img src="/2018/06/17/剑指offer/30.png" alt=""></p><p>解法1，小数据量：快排方法 O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        ArrayList&lt;Integer&gt; re = GetLeastNumbers_Solution(array, <span class="number">10</span>);</span><br><span class="line">        System.out.println(re);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title">GetLeastNumbers_Solution</span><span class="params">(<span class="keyword">int</span>[] input, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输入检验</span></span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span> || input.length == <span class="number">0</span> || k &lt;= <span class="number">0</span> || k &gt; input.length) <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = parttition(input, <span class="number">0</span>, input.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = input.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (index != k - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; k - <span class="number">1</span>) &#123;</span><br><span class="line">                start = index + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                end = index - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            index = parttition(input, start, end);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            result.add(input[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parttition</span><span class="params">(<span class="keyword">int</span>[] input, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = low;</span><br><span class="line">        <span class="keyword">int</span> j = high;</span><br><span class="line">        <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        swap(input, mid, low);</span><br><span class="line">        <span class="keyword">int</span> pivot = input[low];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">while</span> (input[j] &gt;= pivot &amp;&amp; i &lt; j) j--;</span><br><span class="line">            <span class="keyword">while</span> (input[i] &lt;= pivot &amp;&amp; i &lt; j) i++;</span><br><span class="line">            swap(input, i, j);</span><br><span class="line">        &#125;</span><br><span class="line">        swap(input, i, low);</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] input, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = input[i];</span><br><span class="line">        input[i] = input[j];</span><br><span class="line">        input[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解法2，海量数据：使用红黑树 O(nlogk)，类似下面介绍的方法5</p><p>常见解法思路：</p><ul><li>最容易想到的方法是将数据全部排序，然后在排序后的集合中进行查找，最快的排序算法的时间复杂度一般为O（nlogn），如快速排序。但是在32位的机器上，每个float类型占4个字节，1亿个浮点数就要占用400MB的存储空间，对于一些可用内存小于400M的计算机而言，很显然是不能一次将全部数据读入内存进行排序的。其实即使内存能够满足要求，该方法也并不高效，因为题目的目的是寻找出最大的10000个数即可，而排序却是将所有的元素都排序了，做了很多的无用功。</li><li>第二种方法为局部淘汰法，该方法与排序方法类似，用一个容器保存前10000个数，然后将剩余的所有数字与容器内的最小数字相比，如果某一后续元素比容器内最小数字大，则删掉容器内最小元素，并将该元素插入容器，最后遍历完这1亿个数，得到的结果容器中保存的数即为最终结果了。此时的时间复杂度为O（n+m^2），其中m为容器的大小，即10000。</li><li>第三种方法是分治法，将1亿个数据分成100份，每份100万个数据，找到每份数据中最大的10000个，最后在剩下的100*10000个数据里面找出最大的10000个。如果100万数据选择足够理想，那么可以过滤掉1亿数据里面99%的数据。100万个数据里面查找最大的10000个数据的方法如下：用快速排序的方法，将数据分为2堆，如果大的那堆个数N大于10000个，继续对大堆快速排序一次分成2堆，如果大的那堆个数N大于10000个，继续对大堆快速排序一次分成2堆，如果大堆个数N小于10000个，就在小的那堆里面快速排序一次，找第10000-n大的数字；递归以上过程，就可以找到第1w大的数。参考上面的找出第1w大数字，就可以类似的方法找到前10000大数字了。此种方法需要每次的内存空间为10^6*4=4MB，一共需要101次这样的比较。</li></ul><ul><li>第四种方法是Hash法。如果这1亿个书里面有很多重复的数，先通过Hash法，把这1亿个数字去重复，这样如果重复率很高的话，会减少很大的内存用量，从而缩小运算空间，然后通过分治法或最小堆法查找最大的10000个数。</li></ul><ul><li>第五种方法采用最小堆。首先读入前10000个数来创建大小为10000的最小堆，建堆的时间复杂度为O（mlogm）（m为数组的大小即为10000），然后遍历后续的数字，并于堆顶（最小）数字进行比较。如果比最小的数小，则继续读取后续数字；如果比堆顶数字大，则替换堆顶元素并重新调整堆为最小堆。整个过程直至1亿个数全部遍历完为止。然后按照中序遍历的方式输出当前堆中的所有10000个数字。该算法的时间复杂度为O（n*mlogm），空间复杂度是10000（常数）。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        ArrayList&lt;Integer&gt; re = GetLeastNumbers_Solution(array, <span class="number">10</span>);</span><br><span class="line">        System.out.println(re);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title">GetLeastNumbers_Solution</span><span class="params">(<span class="keyword">int</span>[] input, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">         <span class="comment">//输入检验</span></span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span> || input.length == <span class="number">0</span> || k &lt;= <span class="number">0</span> || k &gt; input.length) <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        TreeSet&lt;Integer&gt; topk=<span class="keyword">new</span> TreeSet();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> val : input) &#123;</span><br><span class="line">            <span class="keyword">if</span> (topk.size() &lt; k) &#123;</span><br><span class="line">                topk.add(val);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(topk.last()&gt;val)&#123;</span><br><span class="line">                    topk.pollLast();</span><br><span class="line">                    topk.add(val);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result.addAll(topk);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="访问次数最多的IP"><a href="#访问次数最多的IP" class="headerlink" title="访问次数最多的IP"></a>访问次数最多的IP</h4><p>参考：<a href="http://yueyemaitian.iteye.com/blog/1180299" target="_blank" rel="noopener">http://yueyemaitian.iteye.com/blog/1180299</a></p><p>算法思想：分而治之+Hash</p><p>1、IP地址最多有2^32=4G种取值情况，所以不能完全加载到内存中处理；</p><p>2、可以考虑采用分而治之的思想，按照IP地址的Hash(IP) % 1024值，把海量IP日志分别存储到1024个小文件中，这样，每个小文件最多包含4MB个IP地址；</p><p>​     <strong>这里解释一下为什么用Hash(IP) % 1024值，如果不用，而直接分类的话，可能会出现这样一种情况，就是有个IP在每个小文件中都存在，而且这个IP并不一定在那个小文件中是数量最多的，那么最终可能选择的结果会有问题，所以这里用了Hash(IP)%1024值，这样的话，通过计算IP的Hash值，相同IP肯定会放到一个文件中，当然了不同的IP的Hash值也可能相同，就存在一个小文件中。</strong></p><p>3、对于每一个小文件，可以构建一个IP为key，出现的次数为value的Hash Map，同时记录当前出现次数最多的那个IP地址；</p><p>4、可以得到1024个小文件中的出现次数最多的那个IP，再依据常规的排序算法得出总体上出现次数最多的IP。</p><h4 id="连续子数组的最大和"><a href="#连续子数组的最大和" class="headerlink" title="连续子数组的最大和"></a>连续子数组的最大和</h4><p><img src="/2018/06/17/剑指offer/31.png" alt=""></p><p>解法1 <strong>O(n)，思路如下：</strong></p><p><img src="/2018/06/17/剑指offer/31-1.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = &#123;<span class="number">1</span>,-<span class="number">2</span>,<span class="number">3</span>,<span class="number">10</span>,-<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,-<span class="number">5</span>&#125;;</span><br><span class="line">        System.out.println(FindGreatestSumOfSubArray(array));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">FindGreatestSumOfSubArray</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (array == <span class="keyword">null</span> || array.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> sum = array[<span class="number">0</span>];  <span class="comment">// 初始化为数组中的第一个数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 如果之前的和&lt;=0，说明从之前某个位置开始的子数组的和 会小于 从当前位置开始的子数组的和</span></span><br><span class="line">            <span class="comment">// 因此可以不考虑之前的子数组，Sum重置为当前位置的值</span></span><br><span class="line">            <span class="keyword">if</span> (sum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                start = i;</span><br><span class="line">                end = i;</span><br><span class="line">                sum = array[i];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sum = sum + array[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 更新最大和</span></span><br><span class="line">            <span class="keyword">if</span> (sum &gt; max) &#123;</span><br><span class="line">                max = sum;</span><br><span class="line">                end = i; <span class="comment">//更新子数组最后的下标</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"["</span>+start+<span class="string">","</span>+end+<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解法2：动态规划</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">FindGreatestSumOfSubArray</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (array == <span class="keyword">null</span> || array.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> len = array.length;</span><br><span class="line">       <span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">       f[<span class="number">0</span>] = array[<span class="number">0</span>];</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">           <span class="comment">// 递归公式</span></span><br><span class="line">           <span class="comment">// f[i] = array[i]             # i=0 或者 f[i-1]&lt;=0</span></span><br><span class="line">           <span class="comment">// f(i) = f[i - 1] + array[i]  # f[i-1]&gt;0</span></span><br><span class="line">           f[i] = f[i - <span class="number">1</span>] &lt;= <span class="number">0</span> ? array[i] : f[i - <span class="number">1</span>] + array[i];</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i : f) &#123;</span><br><span class="line">           <span class="keyword">if</span> (max &lt; i) &#123;</span><br><span class="line">               max = i;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> max;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>解法3：分治（未实现）</p><h4 id="把数组排成最小的数"><a href="#把数组排成最小的数" class="headerlink" title="把数组排成最小的数"></a>把数组排成最小的数</h4><p><img src="/2018/06/17/剑指offer/33.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">PrintMinNumber</span><span class="params">(<span class="keyword">int</span> [] numbers)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 输入合法性检测</span></span><br><span class="line">        <span class="keyword">if</span> (numbers == <span class="keyword">null</span> || numbers.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将数字转为字符串类型</span></span><br><span class="line">        ArrayList&lt;String&gt; nums = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : numbers) &#123;</span><br><span class="line">            nums.add(Integer.toString(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用自定义的规则 进行排序</span></span><br><span class="line">        Collections.sort(nums, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//为了避免长度问题，将其拼接后再进行字符串比较</span></span><br><span class="line">                <span class="keyword">return</span> (s1 + s2).compareTo(s2 + s1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理最后的结果</span></span><br><span class="line">        <span class="keyword">return</span> String.join(<span class="string">""</span>,nums);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组中的逆序对"><a href="#数组中的逆序对" class="headerlink" title="数组中的逆序对"></a>数组中的逆序对</h4><p><img src="/2018/06/17/剑指offer/36.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">InversePairs</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (array == <span class="keyword">null</span> || array.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> countInverse(array, <span class="number">0</span>, array.length - <span class="number">1</span>) % <span class="number">1000000007</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countInverse</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (low &gt;= high) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> leftCount = countInverse(array, low, mid);</span><br><span class="line">        <span class="keyword">int</span> rightCount = countInverse(array, mid + <span class="number">1</span>, high);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拷贝一份数组的左右部分，用于排序并统计，注意copyOfRange[begin,end)，不包括end位置</span></span><br><span class="line">        <span class="keyword">int</span>[] leftCopy = Arrays.copyOfRange(array, low, mid + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span>[] rightCopy = Arrays.copyOfRange(array, mid + <span class="number">1</span>, high + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排序并统计逆序对</span></span><br><span class="line">        <span class="keyword">int</span> i = leftCopy.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j = rightCopy.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> index = high;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (leftCopy[i] &lt;= rightCopy[j]) &#123;</span><br><span class="line">                array[index--] = rightCopy[j--];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                array[index--] = leftCopy[i--];</span><br><span class="line">                count += (j + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 避免数据溢出，进行取余</span></span><br><span class="line">                <span class="keyword">if</span> (count &gt; <span class="number">1000000007</span>) count %= <span class="number">1000000007</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将剩余的部分拷贝回原数组</span></span><br><span class="line">        <span class="keyword">for</span> (; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            array[index--] = leftCopy[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            array[index--] = rightCopy[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 避免数据溢出，进行取余</span></span><br><span class="line">        <span class="keyword">int</span> result = leftCount + rightCount + count;</span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">1000000007</span>) result %= <span class="number">1000000007</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="数字在排序数组中出现的次数"><a href="#数字在排序数组中出现的次数" class="headerlink" title="数字在排序数组中出现的次数"></a>数字在排序数组中出现的次数</h4><p><img src="/2018/06/17/剑指offer/38.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetNumberOfK</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (array != <span class="keyword">null</span> || array.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 先找到第一个位置</span></span><br><span class="line">        <span class="keyword">int</span> start = getFirstK(array, k, <span class="number">0</span>, array.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (start == -<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">// 查找不到在则直接返回</span></span><br><span class="line">        <span class="comment">// 再找最后出现的位置</span></span><br><span class="line">        <span class="keyword">int</span> end = getLastK(array, k, <span class="number">0</span>, array.length - <span class="number">1</span>);</span><br><span class="line">        count = end - start + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getFirstK</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> k, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt; high) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> midData = array[mid];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (midData == k) &#123;</span><br><span class="line">        <span class="comment">// 如果已经是数组第一个 或者 mid前一个位置小于k，则说明已经找到第一个k的位置了</span></span><br><span class="line">        <span class="keyword">if</span> (mid == <span class="number">0</span> || (mid &gt; <span class="number">0</span> &amp;&amp; array[mid - <span class="number">1</span>] &lt; k)) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            high = high - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (midData &lt; k) &#123;</span><br><span class="line">        low = mid + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        high = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getFirstK(array, k, low, high);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getLastK</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> k, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt; high) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> midData = array[mid];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (midData == k) &#123;</span><br><span class="line">        <span class="comment">// 如果已经是数组最后一个 或者 mid后一个位置大于k，则说明已经找到最后一个k的位置了</span></span><br><span class="line">        <span class="keyword">if</span> (mid == high || (mid &lt; high &amp;&amp; array[mid + <span class="number">1</span>] &gt; k)) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (midData &lt; k) &#123;</span><br><span class="line">        low = mid + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        high = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getLastK(array, k, low, high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组中只出现一次的数字"><a href="#数组中只出现一次的数字" class="headerlink" title="数组中只出现一次的数字"></a>数组中只出现一次的数字</h4><p><img src="/2018/06/17/剑指offer/40.png" alt=""></p><p><img src="/2018/06/17/剑指offer/40-1.png" alt=""></p><p><img src="/2018/06/17/剑指offer/40-2.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span>[] array = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] num1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span>[] num2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">        FindNumsAppearOnce(array, num1, num2);</span><br><span class="line">        System.out.println(num1[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(num2[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">FindNumsAppearOnce</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> num1[], <span class="keyword">int</span> num2[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (array == <span class="keyword">null</span> || array.length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先遍历一遍求出异或的结果</span></span><br><span class="line">        <span class="keyword">int</span> xorResult = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : array) &#123;</span><br><span class="line">            xorResult ^= i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = findFirstBit(xorResult); <span class="comment">//找到第一个bit为1的下标</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 利用第一个bit为1的下标将数组分割为两部分，每部分index位置的bit相同</span></span><br><span class="line">        <span class="keyword">int</span> n1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : array) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isSameBit(i, index))</span><br><span class="line">                n1 ^= i;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                n2 ^= i;</span><br><span class="line">        &#125;</span><br><span class="line">        num1[<span class="number">0</span>] = n1;</span><br><span class="line">        num2[<span class="number">0</span>] = n2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从右往左寻找第一个为1的二进制下标</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findFirstBit</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &lt; Integer.SIZE) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((i &amp; num) == i) <span class="keyword">break</span>;</span><br><span class="line">            i = i &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 判断指定下标的位置的二进制是否为1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSameBit</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> leftShift)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span> &lt;&lt; leftShift;</span><br><span class="line">        <span class="keyword">return</span> (num &amp; i) == i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相似题：leetcode：single-number、 single-number-ii</p><h4 id="在数组中寻找-和为s的两个数字"><a href="#在数组中寻找-和为s的两个数字" class="headerlink" title="在数组中寻找 和为s的两个数字"></a>在数组中寻找 和为s的两个数字</h4><p><img src="/2018/06/17/剑指offer/41.png" alt=""></p><p>思路：分别从最左和最右逼近，如果和小于s，则i++，如果和大于s，则j–</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果有多对数字的和等于S，输出两个数的乘积最小的。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title">FindNumbersWithSum</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">if</span> (array == <span class="keyword">null</span> || array.length &lt; <span class="number">2</span>) <span class="keyword">return</span> result;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = array.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i] + array[j] == sum) &#123;</span><br><span class="line">                result.add(array[i]);</span><br><span class="line">                result.add(array[j]);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[i] + array[j] &lt; sum) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="寻找和为s的连续序列"><a href="#寻找和为s的连续序列" class="headerlink" title="寻找和为s的连续序列"></a>寻找和为s的连续序列</h4><p><img src="/2018/06/17/剑指offer/41-1.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public static ArrayList&lt;ArrayList&lt;Integer&gt;&gt; FindContinuousSequence(int sum) &#123;</span><br><span class="line">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; result = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">    if (sum &lt;= 0) return result;</span><br><span class="line"></span><br><span class="line">    // 初始化将sum分为一大一小的2个数字</span><br><span class="line">    int small = sum / 2;</span><br><span class="line">    int big = sum / 2 + 1;</span><br><span class="line">    int curSum = small + big;</span><br><span class="line"></span><br><span class="line">    while (small &gt;= 1) &#123;</span><br><span class="line">        if (curSum == sum) &#123;</span><br><span class="line">            ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</span><br><span class="line">            for (int i = small; i &lt;= big; i++) &#123;</span><br><span class="line">                list.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(list);</span><br><span class="line">            // 通过添加更小的small，获得产生新的序列</span><br><span class="line">            small--;</span><br><span class="line">            curSum += small;</span><br><span class="line">        &#125; else if (curSum &gt; sum) &#123;</span><br><span class="line">            // 偏大，则剪去big，加上更小的small</span><br><span class="line">            small--;</span><br><span class="line">            curSum = curSum - big + small;</span><br><span class="line">            big--;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 偏小则再加一个更小的small</span><br><span class="line">            small--;</span><br><span class="line">            curSum += small;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 序列内按照从小至大的顺序，序列间按照开始数字从小到大的顺序</span><br><span class="line">    result.sort(Comparator.comparingInt(c -&gt; c.get(0)));</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组中重复的数字"><a href="#数组中重复的数字" class="headerlink" title="数组中重复的数字"></a>数组中重复的数字</h4><p>在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。</p><p>思路：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Parameters:</span></span><br><span class="line">    <span class="comment">//    numbers:     an array of integers</span></span><br><span class="line">    <span class="comment">//    length:      the length of array numbers</span></span><br><span class="line">    <span class="comment">//    duplication: (Output) the duplicated number in the array number,length of duplication array is 1,so using duplication[0] = ? in implementation;</span></span><br><span class="line">    <span class="comment">//                  Here duplication like pointor in C/C++, duplication[0] equal *duplication in C/C++</span></span><br><span class="line">    <span class="comment">//    这里要特别注意~返回任意重复的一个，赋值duplication[0]</span></span><br><span class="line">    <span class="comment">// Return value:       true if the input is valid, and there are some duplications in the array number</span></span><br><span class="line">    <span class="comment">//                     otherwise false</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">duplicate</span><span class="params">(<span class="keyword">int</span> numbers[],<span class="keyword">int</span> length,<span class="keyword">int</span> [] duplication)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (numbers == <span class="keyword">null</span> || numbers.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (numbers[i] != i) &#123;</span><br><span class="line">                <span class="keyword">int</span> m = numbers[i];</span><br><span class="line">                <span class="comment">// 如果m和第m个数字相等，则说明m该去的位置被人占了，就找到了第一个重复的数字</span></span><br><span class="line">                <span class="keyword">if</span> (m == numbers[m]) &#123;</span><br><span class="line">                    duplication[<span class="number">0</span>] = m;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 否则交换m到对应的第m个位置</span></span><br><span class="line">                numbers[i] = numbers[m];</span><br><span class="line">                numbers[m] = m;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构建乘积数组"><a href="#构建乘积数组" class="headerlink" title="构建乘积数组"></a>构建乘积数组</h4><p><img src="/2018/06/17/剑指offer/66.png" alt=""></p><p><img src="/2018/06/17/剑指offer/66-1.png" alt=""></p><p>先算左边部分A0–Ai，再乘以右边部分Ai-1—An-1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> offer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构建乘积数组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jizx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/07/24 17:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Multiply</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] multiply(<span class="keyword">int</span>[] A) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A == <span class="keyword">null</span> || A.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len = A.length;</span><br><span class="line">        <span class="keyword">int</span>[] B = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自底向上地累乘A[i-1]</span></span><br><span class="line">        B[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            B[i] = B[i - <span class="number">1</span>] * A[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自上向下地在原来基础上，再累成A[i]</span></span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">1</span>;<span class="comment">//这就是右半部分的乘积</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            B[i] = B[i] * temp;</span><br><span class="line">            temp = temp * A[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> B;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="有序数组的交集"><a href="#有序数组的交集" class="headerlink" title="有序数组的交集"></a>有序数组的交集</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 有序数组的交集</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jizx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/08/19 10:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jiaoji</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] b = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">12</span>&#125;;</span><br><span class="line">        ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        jiaoji(a, b, result);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">jiaoji</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span>[] b, List&lt;Integer&gt; result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="keyword">null</span> || b == <span class="keyword">null</span> || a.length == <span class="number">0</span> || b.length == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span>[] min = a;</span><br><span class="line">        <span class="keyword">int</span>[] max = b;</span><br><span class="line">        <span class="keyword">if</span> (a.length &gt; b.length) &#123;</span><br><span class="line">            min = b;</span><br><span class="line">            max = a;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = Arrays.binarySearch(max, min[min.length / <span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            result.add(max[index]);</span><br><span class="line">            <span class="comment">// min中去除min[min.length / 2]，max中去除max[index]因为以及找到了</span></span><br><span class="line">            jiaoji(Arrays.copyOfRange(min, <span class="number">0</span>, min.length / <span class="number">2</span>), Arrays.copyOfRange(max, <span class="number">0</span>, index), result);</span><br><span class="line">            jiaoji(Arrays.copyOfRange(min, min.length / <span class="number">2</span> + <span class="number">1</span>, min.length), Arrays.copyOfRange(max, index + <span class="number">1</span>, max</span><br><span class="line">                    .length), result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            index = -index - <span class="number">1</span>;</span><br><span class="line">            jiaoji(Arrays.copyOfRange(min, <span class="number">0</span>, min.length / <span class="number">2</span>), Arrays.copyOfRange(max, <span class="number">0</span>, index), result);</span><br><span class="line">            jiaoji(Arrays.copyOfRange(min, min.length / <span class="number">2</span> + <span class="number">1</span>, min.length), Arrays.copyOfRange(max, index, max.length),</span><br><span class="line">                    result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="4-字符串替换空格（未实现）"><a href="#4-字符串替换空格（未实现）" class="headerlink" title="4.字符串替换空格（未实现）"></a>4.字符串替换空格（未实现）</h4><p><img src="/2018/06/17/剑指offer/4.png" alt=""></p><p><img src="/2018/06/17/剑指offer/4-2.png" alt=""></p><ol><li>先遍历一次字符串，这样就能统计出字符串中空格的总数</li><li>准备两个指针p1，p2,。p1指向原始字符串的末尾，p2指向替换后的字符串的末尾</li><li>p1、p2同时移动，先前复制，直到p1遇到空格</li><li>p2向前插入‘%20’</li><li>p1、p2继续同时先前移动，直到p1与p2相遇</li></ol><p><img src="/2018/06/17/剑指offer/4-1.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="35-第一个只出现一次的字符"><a href="#35-第一个只出现一次的字符" class="headerlink" title="35.第一个只出现一次的字符"></a>35.第一个只出现一次的字符</h4><p><img src="/2018/06/17/剑指offer/35.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">FirstNotRepeatingChar</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 非法输入检测</span></span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span> || <span class="string">""</span>.equals(str)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line">        HashMap&lt;Character, Integer&gt; counter = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一遍遍历进行统计</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : chars) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = counter.get(c) != <span class="keyword">null</span> ? counter.get(c) + <span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">            counter.put(c, num);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二遍遍历进行搜索</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : chars) &#123;</span><br><span class="line">            <span class="keyword">if</span> (counter.get(c) == <span class="number">1</span>) <span class="keyword">return</span> index;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="翻转单词顺序"><a href="#翻转单词顺序" class="headerlink" title="翻转单词顺序"></a>翻转单词顺序</h4><p><img src="/2018/06/17/剑指offer/42.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(ReverseSentence(<span class="string">"student. a am I"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">ReverseSentence</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span> || str.length() &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line">        <span class="comment">// 先将整个字符串翻转</span></span><br><span class="line">        reverseChars(chars, <span class="number">0</span>, chars.length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过空格来定位每个单词的位置，然后进行单词的翻转</span></span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;<span class="comment">//指向单词第一个字符</span></span><br><span class="line">        <span class="keyword">int</span> end = <span class="number">0</span>;<span class="comment">//指向单词后的第一个空格</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : chars) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="string">' '</span>) &#123;</span><br><span class="line">                end++;</span><br><span class="line">                <span class="keyword">if</span> (end == chars.length)</span><br><span class="line">                    reverseChars(chars, start, end);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// start与end之间是一个单词的情况</span></span><br><span class="line">                <span class="keyword">if</span> (start != end) &#123;</span><br><span class="line">                    reverseChars(chars, start, end);</span><br><span class="line">                &#125;</span><br><span class="line">                end++;</span><br><span class="line">                start = end;<span class="comment">// start移动到end位置</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(chars);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// start：翻转的开始位置，不包括end位置的字符</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverseChars</span><span class="params">(<span class="keyword">char</span>[] str, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = start;</span><br><span class="line">        <span class="keyword">int</span> j = end - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = str[i];</span><br><span class="line">            str[i] = str[j];</span><br><span class="line">            str[j] = c;</span><br><span class="line">            i++;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="左旋转字符串-循环左移字符串"><a href="#左旋转字符串-循环左移字符串" class="headerlink" title="左旋转字符串(循环左移字符串)"></a>左旋转字符串(循环左移字符串)</h4><p>题目描述（推荐）：汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列S，请你把其循环左移K位后的序列输出。例如，字符序列S=”abcXYZdef”,要求输出循环左移3位后的结果，即“XYZdefabc”。</p><p><img src="/2018/06/17/剑指offer/42-2.png" alt=""></p><p><img src="/2018/06/17/剑指offer/42-3.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(LeftRotateString(<span class="string">"abcXYZdef"</span>,<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">LeftRotateString</span><span class="params">(String str,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span> || str.length() &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line">        <span class="comment">// 通过3次翻转即可实现</span></span><br><span class="line">        reverseChars(chars,<span class="number">0</span>,n);</span><br><span class="line">        reverseChars(chars,n,chars.length);</span><br><span class="line">        reverseChars(chars,<span class="number">0</span>,chars.length);</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(chars);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 字符翻转</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverseChars</span><span class="params">(<span class="keyword">char</span>[] str, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = start;</span><br><span class="line">        <span class="keyword">int</span> j = end - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = str[i];</span><br><span class="line">            str[i] = str[j];</span><br><span class="line">            str[j] = c;</span><br><span class="line">            i++;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="将字符串转换为整数"><a href="#将字符串转换为整数" class="headerlink" title="将字符串转换为整数"></a>将字符串转换为整数</h4><p>题目描述：</p><p>将一个字符串转换成一个整数，要求不能使用字符串转换整数的库函数。 数值为0或者字符串不是一个合法的数值则返回0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试用例有:+123,-123,234k234</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">StrToInt</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span> || str.length() &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> isMinus = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 如果不是数字，则判断是否是在第一位的正负号</span></span><br><span class="line">            <span class="keyword">if</span> (chars[i] &lt; <span class="string">'0'</span> || chars[i] &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((i != <span class="number">0</span>) || (chars[i] != <span class="string">'+'</span> &amp;&amp; chars[i] != <span class="string">'-'</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (chars[i] == <span class="string">'-'</span>) isMinus = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            result = result * <span class="number">10</span> + chars[i] - <span class="string">'0'</span>;<span class="comment">// 注意字符要与‘0’进行相减，才是真正对应的数字</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isMinus ? -<span class="number">1</span> * result : result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="字符串判断是否为有效数值"><a href="#字符串判断是否为有效数值" class="headerlink" title="字符串判断是否为有效数值"></a>字符串判断是否为有效数值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> offer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断字符串是否为有效的数值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jizx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/07/24 17:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsNumeric</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IsNumeric app=<span class="keyword">new</span> IsNumeric();</span><br><span class="line">        System.out.println(app.isNumeric(<span class="string">"-1.e0"</span>.toCharArray()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNumeric</span><span class="params">(<span class="keyword">char</span>[] str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span> || str.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> dot = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> e = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> sign = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((str[i] == <span class="string">'+'</span> || str[i] == <span class="string">'-'</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) sign = <span class="keyword">true</span>;<span class="comment">// 首位</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (str[i - <span class="number">1</span>] == <span class="string">'e'</span> || str[i - <span class="number">1</span>] == <span class="string">'E'</span>) &#123;&#125;  <span class="comment">// 紧跟在e后面</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">'e'</span> || str[i] == <span class="string">'E'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e == <span class="keyword">true</span>) <span class="keyword">return</span> <span class="keyword">false</span>;<span class="comment">// 已经有e了</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (i == str.length - <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// e后面没有数字了</span></span><br><span class="line">                <span class="keyword">else</span> e = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">'.'</span>) &#123;</span><br><span class="line">                <span class="comment">// 在e后面，不能有小数点、或者已经有小数点了</span></span><br><span class="line">                <span class="keyword">if</span> (e == <span class="keyword">true</span> || dot == <span class="keyword">true</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">else</span> dot = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (str[i] &lt; <span class="string">'0'</span> || str[i] &gt; <span class="string">'9'</span>) <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// 其他非法字符</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串的排列"><a href="#字符串的排列" class="headerlink" title="字符串的排列"></a>字符串的排列</h4><p><img src="/2018/06/17/剑指offer/28.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">Permutation</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span> || str.length() == <span class="number">0</span>) <span class="keyword">return</span> result;</span><br><span class="line">        <span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line">        permutation(<span class="number">0</span>, chars);</span><br><span class="line">      <span class="comment">// </span></span><br><span class="line">        HashSet&lt;String&gt; set=<span class="keyword">new</span> HashSet&lt;&gt;(result);</span><br><span class="line">        result.clear();</span><br><span class="line">        result.addAll(set);</span><br><span class="line">        Collections.sort(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">permutation</span><span class="params">(<span class="keyword">int</span> prefix, <span class="keyword">char</span>[] str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prefix == str.length) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> String(str));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// [a,b,c]，prefix表示固定的位置，比如a，然后将a与后面的字符依次进行交换</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = prefix; i &lt; str.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将固定位置的值与数组中的第i个字符交换</span></span><br><span class="line">            <span class="keyword">char</span> temp = str[i];</span><br><span class="line">            str[i] = str[prefix];</span><br><span class="line">            str[prefix] = temp;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 递归处理[b,c]</span></span><br><span class="line">            permutation(prefix + <span class="number">1</span>, str);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//还原交换</span></span><br><span class="line">            temp = str[i];</span><br><span class="line">            str[i] = str[prefix];</span><br><span class="line">            str[prefix] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><h4 id="java实现链表"><a href="#java实现链表" class="headerlink" title="java实现链表"></a>java实现链表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jizx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/04/20 15:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;String&gt; list = <span class="keyword">new</span> LinkedList();</span><br><span class="line">        list.add(<span class="string">"a"</span>);</span><br><span class="line">        list.add(<span class="string">"c"</span>);</span><br><span class="line">        list.add(<span class="string">"bb"</span>);</span><br><span class="line">        list.insert(<span class="number">3</span>, <span class="string">"1"</span>);</span><br><span class="line">        list.printList();</span><br><span class="line">        <span class="comment">// System.out.println(list.find("2"));</span></span><br><span class="line">        System.out.println(list.search(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        list.printList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> E data;</span><br><span class="line">        Node next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            data = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E data)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node head;</span><br><span class="line">    <span class="keyword">private</span> Node tail;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        head = <span class="keyword">new</span> Node();</span><br><span class="line">        tail = head;</span><br><span class="line">        length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E data)</span> </span>&#123;</span><br><span class="line">        Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">        tail.next = newNode;</span><br><span class="line">        tail = newNode;</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> position, E data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (position &gt;= <span class="number">0</span> &amp;&amp; position &lt;= length) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            Node current = head;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; position) &#123;</span><br><span class="line">                current = current.next;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            Node temp = current.next;</span><br><span class="line">            Node newNode = <span class="keyword">new</span> Node(data);</span><br><span class="line">            newNode.next = temp;</span><br><span class="line">            current.next = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"超出范围"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(E data)</span> </span>&#123;</span><br><span class="line">        Node pre = head;</span><br><span class="line">        Node current = head.next;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (current.data.equals(data)) &#123;</span><br><span class="line">                pre.next = current.next;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pre = current;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> position, E data)</span> </span>&#123;</span><br><span class="line">        Node current = head.next;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (current.data.equals(data)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(E data)</span> </span>&#123;</span><br><span class="line">        E result = <span class="keyword">null</span>;</span><br><span class="line">        Node current = head.next;</span><br><span class="line">        <span class="keyword">int</span> position = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (current.data.equals(data)) &#123;</span><br><span class="line">                <span class="keyword">return</span> position;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                current = current.next;</span><br><span class="line">                position++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">search</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = -<span class="number">1</span>;</span><br><span class="line">        Node current = head;</span><br><span class="line">        <span class="keyword">if</span> (position &gt;= <span class="number">0</span> &amp;&amp; position &lt; length) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; position) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (E) current.data;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"超出范围"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node current = head.next;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(current.data);</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="从尾到头打印链表"><a href="#从尾到头打印链表" class="headerlink" title="从尾到头打印链表"></a>从尾到头打印链表</h4><p><img src="/2018/06/17/剑指offer/5.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="O-1-时间删除链表结点-未实现"><a href="#O-1-时间删除链表结点-未实现" class="headerlink" title="O(1)时间删除链表结点(未实现)"></a>O(1)时间删除链表结点(未实现)</h4><p><img src="/2018/06/17/剑指offer/13.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="链表中倒数第k个节点"><a href="#链表中倒数第k个节点" class="headerlink" title="链表中倒数第k个节点"></a>链表中倒数第k个节点</h4><p><img src="/2018/06/17/剑指offer/15.png" alt=""></p><p><img src="/2018/06/17/剑指offer/15-1.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode head = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            ListNode node = <span class="keyword">new</span> ListNode(i);</span><br><span class="line">            cur.next = node;</span><br><span class="line">            cur = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ListNode newHead = findKNode(head, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">while</span> (newHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(newHead.val);</span><br><span class="line">                newHead = newHead.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">findKNode</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>|| k &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode ahead = head;</span><br><span class="line">        ListNode behind = ahead;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 两者相差k-1个位置，因此ahead先走k-1个位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ahead.next != <span class="keyword">null</span>)</span><br><span class="line">                ahead = ahead.next;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 然后两者一起移动</span></span><br><span class="line">        <span class="keyword">while</span> (ahead.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ahead = ahead.next;</span><br><span class="line">            behind = behind.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> behind;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    ListNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h4><p><img src="/2018/06/17/剑指offer/16.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode cur=head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            ListNode node = <span class="keyword">new</span> ListNode(i);</span><br><span class="line">            cur.next = node;</span><br><span class="line">            cur = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ListNode newHead = ReverseList(head);</span><br><span class="line">            <span class="keyword">while</span> (newHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(newHead.val);</span><br><span class="line">                newHead = newHead.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">ReverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 边界处理</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>)  <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">        ListNode remainHead = <span class="keyword">null</span>;      <span class="comment">// h:剩余未反转的链表头</span></span><br><span class="line">        ListNode handlingNode = head;    <span class="comment">// i:正在处理的结点，从head开始，它的next指向原方向，因此正要反转</span></span><br><span class="line">        ListNode reversedHead = <span class="keyword">null</span>;    <span class="comment">// j:已经反转的链表头</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (handlingNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 原来  reversedHead  handlingNode --&gt; remainHead --&gt;k</span></span><br><span class="line">            <span class="comment">// 反转  reversedHead &lt;-- handlingNode   remainHead --&gt;k</span></span><br><span class="line">            remainHead = handlingNode.next;</span><br><span class="line">            handlingNode.next = reversedHead;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 更新结点为下一次要处理的位置</span></span><br><span class="line">            reversedHead = handlingNode;</span><br><span class="line">            handlingNode = remainHead;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reversedHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    ListNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="合并两个有序的链表"><a href="#合并两个有序的链表" class="headerlink" title="合并两个有序的链表"></a>合并两个有序的链表</h4><p><img src="/2018/06/17/剑指offer/17.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode list1 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        ListNode list2 = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        ListNode cur1 = list1;</span><br><span class="line">        ListNode cur2 = list2;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            ListNode node1 = <span class="keyword">new</span> ListNode(i);</span><br><span class="line">            ListNode node2 = <span class="keyword">new</span> ListNode(++i);</span><br><span class="line">            cur1.next = node1;</span><br><span class="line">            cur2.next = node2;</span><br><span class="line">            cur1 = node1;</span><br><span class="line">            cur2 = node2;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode newHead = Merge(list1, list2);</span><br><span class="line">        <span class="keyword">while</span> (newHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(newHead.val + <span class="string">" "</span>);</span><br><span class="line">            newHead = newHead.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">Merge</span><span class="params">(ListNode list1, ListNode list2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 有一个链表为空，直接返回另一个链表</span></span><br><span class="line">        <span class="keyword">if</span> (list1 == <span class="keyword">null</span>) <span class="keyword">return</span> list2;</span><br><span class="line">        <span class="keyword">if</span> (list2 == <span class="keyword">null</span>)  <span class="keyword">return</span> list1;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新链表的头结点初始化为较小的链表的头结点</span></span><br><span class="line">        ListNode head = list1.val &lt; list2.val ? list1 : list2;</span><br><span class="line">        ListNode temp;</span><br><span class="line">        <span class="keyword">while</span> (list1 != <span class="keyword">null</span> &amp;&amp; list2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list1.val &lt; list2.val) &#123;</span><br><span class="line">                temp = list1.next;</span><br><span class="line">                list1.next = list2;</span><br><span class="line">                list1 = temp;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                temp = list2.next;</span><br><span class="line">                list2.next = list1;</span><br><span class="line">                list2 = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    ListNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂链表的复制"><a href="#复杂链表的复制" class="headerlink" title="复杂链表的复制"></a>复杂链表的复制</h4><p><img src="/2018/06/17/剑指offer/26.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class RandomListNode &#123;</span></span><br><span class="line"><span class="comment">    int label;</span></span><br><span class="line"><span class="comment">    RandomListNode next = null;</span></span><br><span class="line"><span class="comment">    RandomListNode random = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    RandomListNode(int label) &#123;</span></span><br><span class="line"><span class="comment">        this.label = label;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RandomListNode <span class="title">Clone</span><span class="params">(RandomListNode pHead)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pHead==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        copyChain(pHead);</span><br><span class="line">        copySibling(pHead);</span><br><span class="line">        <span class="keyword">return</span> splitChain(pHead);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**第一步：复制链表，暂时不考虑random 字段</span></span><br><span class="line"><span class="comment">     *  A-&gt;B-&gt;C 变为 A-&gt;A'-&gt;B-&gt;B'-&gt;C-&gt;C'</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyChain</span><span class="params">(RandomListNode pHead)</span> </span>&#123;</span><br><span class="line">        RandomListNode cur = pHead;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            RandomListNode n = <span class="keyword">new</span> RandomListNode(cur.label);</span><br><span class="line">            n.next = cur.next;</span><br><span class="line">            cur.next = n;</span><br><span class="line">            cur = n.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**第二步：考虑复制sibling字段*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copySibling</span><span class="params">(RandomListNode pHead)</span> </span>&#123;</span><br><span class="line">        RandomListNode cur = pHead;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            RandomListNode clone = cur.next;</span><br><span class="line">            RandomListNode sibling = cur.random;</span><br><span class="line">            <span class="keyword">if</span> (sibling != <span class="keyword">null</span>) &#123;</span><br><span class="line">                clone.random = sibling.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = clone.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**第三步：拆分链表，抽取出copy链表*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RandomListNode <span class="title">splitChain</span><span class="params">(RandomListNode pHead)</span> </span>&#123;</span><br><span class="line">        RandomListNode copy = pHead.next;</span><br><span class="line">        RandomListNode cur1 = pHead;</span><br><span class="line">        RandomListNode cur2 = pHead.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (cur1 != <span class="keyword">null</span> &amp;&amp; cur2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cur1.next = cur2.next;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">            <span class="keyword">if</span>(cur1!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                cur2.next=cur1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur2=cur2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> copy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找链表的中间节点（未实现）"><a href="#查找链表的中间节点（未实现）" class="headerlink" title="查找链表的中间节点（未实现）"></a>查找链表的中间节点（未实现）</h4><p>思路：采用快慢指针的方式查找单链表的中间节点，快指针一次走两步，慢指针一次走一步，当快指针走完时，慢指针刚好到达中间节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="两个链表的第一个公共结点"><a href="#两个链表的第一个公共结点" class="headerlink" title="两个链表的第一个公共结点"></a>两个链表的第一个公共结点</h4><p><img src="/2018/06/17/剑指offer/37.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       ListNode a1=<span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        ListNode a2=<span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        ListNode a3=<span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        ListNode a4=<span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        ListNode a5=<span class="keyword">new</span> ListNode(<span class="number">5</span>);</span><br><span class="line">        ListNode a6=<span class="keyword">new</span> ListNode(<span class="number">6</span>);</span><br><span class="line">        ListNode a7=<span class="keyword">new</span> ListNode(<span class="number">7</span>);</span><br><span class="line">        a1.next=a2;</span><br><span class="line">        a2.next=a3;</span><br><span class="line">        a3.next=a6;</span><br><span class="line">        a4.next=a5;</span><br><span class="line">        a5.next=a6;</span><br><span class="line">        a6.next=a7;</span><br><span class="line">        System.out.println(FindFirstCommonNode(a1,a4));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">FindFirstCommonNode</span><span class="params">(ListNode pHead1, ListNode pHead2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pHead1 == <span class="keyword">null</span> || pHead2 == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先遍历一遍找出两个链表的长度</span></span><br><span class="line">        <span class="keyword">int</span> len1 = getLength(pHead1);</span><br><span class="line">        <span class="keyword">int</span> len2 = getLength(pHead2);</span><br><span class="line"></span><br><span class="line">        ListNode longList = pHead1;</span><br><span class="line">        ListNode shortList = pHead2;</span><br><span class="line">        <span class="keyword">int</span> diff = len1 - len2;</span><br><span class="line">        <span class="keyword">if</span> (len1 &lt; len2) &#123;</span><br><span class="line">            longList = pHead2;</span><br><span class="line">            shortList = pHead1;</span><br><span class="line">            diff = len2 - len1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 然后让长的链表先走多的长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; diff; i++) &#123;</span><br><span class="line">            longList = longList.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最后一起走，第一个相同结点就是公共结点</span></span><br><span class="line">        <span class="keyword">while</span> (longList != <span class="keyword">null</span> &amp;&amp; shortList != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (longList == shortList)&#123;</span><br><span class="line">                <span class="keyword">return</span> longList;</span><br><span class="line">            &#125;</span><br><span class="line">            longList = longList.next;</span><br><span class="line">            shortList = shortList.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">(ListNode list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        ListNode current = list;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">            current = current.next;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链表中环的入口节点"><a href="#链表中环的入口节点" class="headerlink" title="链表中环的入口节点"></a>链表中环的入口节点</h4><p>如果一个链表中包含环，如何找出环的入口节点？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链表中环的入口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jizx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/07/03 18:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EntryNodeOfLoop</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EntryNodeOfLoop app = <span class="keyword">new</span> EntryNodeOfLoop();</span><br><span class="line">        ListNode a1=<span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        ListNode a2=<span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        ListNode a3=<span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        ListNode a4=<span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        ListNode a5=<span class="keyword">new</span> ListNode(<span class="number">5</span>);</span><br><span class="line">        ListNode a6=<span class="keyword">new</span> ListNode(<span class="number">6</span>);</span><br><span class="line">        a1.next=a2;</span><br><span class="line">        a2.next=a3;</span><br><span class="line">        a3.next=a4;</span><br><span class="line">        a4.next=a5;</span><br><span class="line">        a5.next=a6;</span><br><span class="line">        a6.next=a3;</span><br><span class="line">        System.out.println(app.EntryNodeOfLoop(<span class="keyword">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">EntryNodeOfLoop</span><span class="params">(ListNode pHead)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.判断是否有环,如果有则返回环内的一个节点</span></span><br><span class="line">        ListNode loopNode = meetingNode(pHead);</span><br><span class="line">        <span class="keyword">if</span> (loopNode == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.计数环的长度</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        ListNode search = loopNode.next;</span><br><span class="line">        <span class="keyword">while</span> (loopNode != search) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            search = search.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.找到入口</span></span><br><span class="line">        ListNode behind = pHead;<span class="comment">// 慢指针</span></span><br><span class="line">        ListNode prev = pHead;<span class="comment">//快指针</span></span><br><span class="line">        <span class="comment">// 让快指针先走count个节点，这样才能保证他们相遇的节点是入口节点</span></span><br><span class="line">        <span class="keyword">while</span> (count-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            prev = prev.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(prev!=behind)&#123;</span><br><span class="line">            prev=prev.next;</span><br><span class="line">            behind=behind.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用快慢指针，当其相遇时有环，快指针==null时无环</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">meetingNode</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        ListNode slow = head;<span class="comment">// 慢指针</span></span><br><span class="line">        ListNode fast = slow.next;<span class="comment">//快指针</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (slow != <span class="keyword">null</span> &amp;&amp; fast != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果快慢指针相遇、快指针的下一个是慢指针，则有环</span></span><br><span class="line">            <span class="keyword">if</span> (slow == fast || fast.next == slow) &#123;</span><br><span class="line">                <span class="keyword">return</span> slow;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 更新快慢指针位置</span></span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            <span class="keyword">if</span> (fast != <span class="keyword">null</span>) fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除链表中重复的结点"><a href="#删除链表中重复的结点" class="headerlink" title="删除链表中重复的结点"></a>删除链表中重复的结点</h4><p>在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 例如，链表1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5 处理后为 1-&gt;2-&gt;5</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除链表中重复的结点</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jizx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/07/06 10:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteDuplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DeleteDuplication app = <span class="keyword">new</span> DeleteDuplication();</span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        ListNode a1 = app.create(nums);</span><br><span class="line">        a1 = app.deleteDuplication(a1);</span><br><span class="line">        <span class="keyword">while</span> (a1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(a1.val + <span class="string">"--&gt;"</span>);</span><br><span class="line">            a1 = a1.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplication</span><span class="params">(ListNode pHead)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// null或者只有一个结点时 直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (pHead == <span class="keyword">null</span> || pHead.next == <span class="keyword">null</span>) <span class="keyword">return</span> pHead;</span><br><span class="line"></span><br><span class="line">        ListNode newHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);<span class="comment">// 新链表的头结点</span></span><br><span class="line">        newHead.next = pHead;</span><br><span class="line">        ListNode pre = newHead;<span class="comment">// 记录前一个不重复的结点</span></span><br><span class="line">        ListNode cur = pre.next;<span class="comment">// 当前结点</span></span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span> &amp;&amp; cur.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 当前结点与下一结点相等</span></span><br><span class="line">            <span class="keyword">if</span> (cur.val == cur.next.val) &#123;</span><br><span class="line">                <span class="keyword">do</span>&#123;</span><br><span class="line">                    cur = cur.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (cur.next != <span class="keyword">null</span> &amp;&amp; cur.next.val == cur.val);</span><br><span class="line">                cur = cur.next; <span class="comment">// 更新到这个暂时不重复的点</span></span><br><span class="line">                pre.next = cur; <span class="comment">// pre的next连接到这个暂时不重复的点</span></span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">            <span class="comment">// 当前结点与下一结点不相等</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                pre = cur;<span class="comment">// 则pre更新到这个可以确认是不重复的点上</span></span><br><span class="line">                cur = cur.next; <span class="comment">// 移动cur</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 保留一个重复结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplication2</span><span class="params">(ListNode pHead)</span> </span>&#123;</span><br><span class="line">        ListNode p = pHead;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ListNode q = p;</span><br><span class="line">            <span class="keyword">while</span> (q.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p.val == q.next.val) &#123;</span><br><span class="line">                    q.next = q.next.next;</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                    q = q.next;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pHead;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">create</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        ListNode cur = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode head = cur;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            cur.next = <span class="keyword">new</span> ListNode(nums[i]);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><h4 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a>重建二叉树</h4><p><img src="/2018/06/17/剑指offer/6.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> TreeNode <span class="title">reConstructBinaryTree</span><span class="params">(<span class="keyword">int</span>[] pre, <span class="keyword">int</span>[] in)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pre.length == <span class="number">0</span> || in.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//先取【先序】的第一个元素，作为根结点</span></span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(pre[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">//然后遍历【中序】，找到对应的根结点，进行划分数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; in.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (in[i] == pre[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="comment">//注意i对应的是中序的下标，因此是截取pre[1，i+1]</span></span><br><span class="line">                root.left = reConstructBinaryTree(Arrays.copyOfRange(pre, <span class="number">1</span>, i + <span class="number">1</span>), Arrays.copyOfRange(in, <span class="number">0</span>, i));</span><br><span class="line">                root.right = reConstructBinaryTree(Arrays.copyOfRange(pre, i + <span class="number">1</span>, pre.length), Arrays.copyOfRange(in, i + <span class="number">1</span>,</span><br><span class="line">                        in.length));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h4><p><img src="/2018/06/17/剑指offer/23.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">PrintFromTopToBottom</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      ArrayList&lt;Integer&gt; result=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> result;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">      queue.offer(root);</span><br><span class="line">      <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">          TreeNode node=queue.poll();</span><br><span class="line">          result.add(node.val);</span><br><span class="line">          <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>) queue.offer(node.left);   </span><br><span class="line">          <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>) queue.offer(node.right);   </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="树的子结构"><a href="#树的子结构" class="headerlink" title="树的子结构"></a>树的子结构</h4><p><img src="/2018/06/17/剑指offer/18.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">    TreeNode left = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode right = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">HasSubtree</span><span class="params">(TreeNode root1,TreeNode root2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isTree = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (root1 != <span class="keyword">null</span> &amp;&amp; root2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果当前两个根结点相等，则进行检查</span></span><br><span class="line">            <span class="keyword">if</span> (root1.val == root2.val) isTree = isSubTree(root1, root2);</span><br><span class="line">            <span class="comment">// 否则递归对root1的左子树判断</span></span><br><span class="line">            <span class="keyword">if</span> (!isTree) isTree = HasSubtree(root1.left, root2);</span><br><span class="line">            <span class="comment">// 左子树也没有，则递归对root1的右子树判断</span></span><br><span class="line">            <span class="keyword">if</span> (!isTree) isTree = HasSubtree(root1.right, root2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isTree;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubTree</span><span class="params">(TreeNode root1, TreeNode root2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root2==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;  <span class="comment">//root2匹配完了，因此true</span></span><br><span class="line">        <span class="keyword">if</span>(root1==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">//root2不为null而root1==null，则不相同</span></span><br><span class="line">        <span class="keyword">if</span>(root1.val!=root2.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//当前结点相等，则判断左子树，然后判断右子树</span></span><br><span class="line">        <span class="keyword">return</span>  isSubTree(root1.left, root2.left) &amp;&amp;  isSubTree(root1.right, root2.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二叉树的镜像"><a href="#二叉树的镜像" class="headerlink" title="二叉树的镜像"></a>二叉树的镜像</h4><p><img src="/2018/06/17/剑指offer/19.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">    TreeNode left = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode right = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">// 先序遍历的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Mirror</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 交换子节点</span></span><br><span class="line">        TreeNode temp = root.left;</span><br><span class="line">        root.left = root.right;</span><br><span class="line">        root.right = temp;</span><br><span class="line">        <span class="comment">// 递归处理子节点</span></span><br><span class="line">        Mirror(root.left);</span><br><span class="line">        Mirror(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二叉搜索树的后序遍历序列"><a href="#二叉搜索树的后序遍历序列" class="headerlink" title="二叉搜索树的后序遍历序列"></a>二叉搜索树的后序遍历序列</h4><p><img src="/2018/06/17/剑指offer/24.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">8</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] b = &#123;<span class="number">6</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] c = &#123;<span class="number">4</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">14</span>, <span class="number">10</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] d = &#123;&#125;;</span><br><span class="line">        System.out.println(VerifySquenceOfBST(d));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">VerifySquenceOfBST</span><span class="params">(<span class="keyword">int</span>[] sequence)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 为空则false</span></span><br><span class="line">        <span class="keyword">if</span> (sequence == <span class="keyword">null</span> || sequence.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 只有一个点，则为true，直接返回不用递归了</span></span><br><span class="line">        <span class="keyword">if</span> (sequence.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = sequence.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> root = sequence[high];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以root判断大小，寻找划分点，i最终会落在第一个大于root的位置</span></span><br><span class="line">        <span class="keyword">while</span> (sequence[i] &lt; root) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断右子树是否都大于root，否则就不可能是后序遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; high; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root &gt; sequence[j]) </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//  copyOfRange : [begin,end),不包含end</span></span><br><span class="line">        <span class="keyword">int</span>[] leftTree = Arrays.copyOfRange(sequence, <span class="number">0</span>, i);</span><br><span class="line">        <span class="keyword">int</span>[] rightTree = Arrays.copyOfRange(sequence, i, high);</span><br><span class="line">        <span class="keyword">boolean</span> leftResult = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> rightResult = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (leftTree.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            leftResult = VerifySquenceOfBST(leftTree);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rightTree.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            rightResult = VerifySquenceOfBST(rightTree);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> leftResult &amp;&amp; rightResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/06/17/剑指offer/24-1.png" alt=""></p><h4 id="二叉树中和为某一值的路径"><a href="#二叉树中和为某一值的路径" class="headerlink" title="二叉树中和为某一值的路径"></a>二叉树中和为某一值的路径</h4><p><img src="/2018/06/17/剑指offer/25.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; FindPath(TreeNode root, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; allRoad = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Stack&lt;Integer&gt; road = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">            path(root, target, road, <span class="number">0</span>, allRoad);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> allRoad;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">path</span><span class="params">(TreeNode root, <span class="keyword">int</span> target, Stack&lt;Integer&gt; road, <span class="keyword">int</span> currentSum, ArrayList&lt;ArrayList&lt;Integer&gt;&gt; allRoad)</span> </span>&#123;</span><br><span class="line">        currentSum = root.val + currentSum;</span><br><span class="line">        TreeNode left = root.left;</span><br><span class="line">        TreeNode right = root.right;</span><br><span class="line">        <span class="comment">// 超过目标值，不必向下继续</span></span><br><span class="line">        <span class="keyword">if</span> (currentSum &gt; target) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 叶结点,但值不等于目标值,返回</span></span><br><span class="line">        <span class="keyword">if</span> (left == <span class="keyword">null</span> &amp;&amp; right == <span class="keyword">null</span> &amp;&amp; currentSum != target) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        road.push(root.val);</span><br><span class="line">        <span class="comment">// 叶结点，值等于目标值，添加路径</span></span><br><span class="line">        <span class="keyword">if</span> (left == <span class="keyword">null</span> &amp;&amp; right == <span class="keyword">null</span> &amp;&amp; currentSum == target) &#123;</span><br><span class="line">            ArrayList&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i : road) &#123;</span><br><span class="line">                result.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">            allRoad.add(result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            path(left, target, road, currentSum, allRoad);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            path(right, target, road, currentSum, allRoad);</span><br><span class="line">        &#125;</span><br><span class="line">        road.pop();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="二叉搜索树与双向链表转换"><a href="#二叉搜索树与双向链表转换" class="headerlink" title="二叉搜索树与双向链表转换"></a>二叉搜索树与双向链表转换</h4><p><img src="/2018/06/17/剑指offer/27.png" alt="二叉搜索树与双向链表转换"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeNode n1 = <span class="keyword">new</span> TreeNode(<span class="number">1</span>);</span><br><span class="line">        TreeNode n2 = <span class="keyword">new</span> TreeNode(<span class="number">2</span>);</span><br><span class="line">        TreeNode n3 = <span class="keyword">new</span> TreeNode(<span class="number">3</span>);</span><br><span class="line">        TreeNode n4 = <span class="keyword">new</span> TreeNode(<span class="number">4</span>);</span><br><span class="line">        TreeNode n5 = <span class="keyword">new</span> TreeNode(<span class="number">5</span>);</span><br><span class="line">        TreeNode n6 = <span class="keyword">new</span> TreeNode(<span class="number">6</span>);</span><br><span class="line">        TreeNode n7 = <span class="keyword">new</span> TreeNode(<span class="number">7</span>);</span><br><span class="line">        <span class="comment">//构建树</span></span><br><span class="line">        n4.left = n2;</span><br><span class="line">        n4.right = n6;</span><br><span class="line">        n2.left = n1;</span><br><span class="line">        n2.right = n3;</span><br><span class="line">        n6.left = n5;</span><br><span class="line">        n6.right = n7;</span><br><span class="line">        Convert(n4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">Convert</span><span class="params">(TreeNode pRootOfTree)</span> </span>&#123;</span><br><span class="line">        TreeNode lastVisitNode = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 注意，不可以将lastVisitNode直接传入，因为就像传入null，不会赋值给lastVisitNode</span></span><br><span class="line">        lastVisitNode = convertNode(pRootOfTree, lastVisitNode);</span><br><span class="line">        <span class="comment">// 完成转换，从lastVisitNode往前遍历，到头结点</span></span><br><span class="line">        TreeNode first = lastVisitNode;</span><br><span class="line">        <span class="keyword">while</span> (first != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(first.left==<span class="keyword">null</span>)  <span class="keyword">break</span>;</span><br><span class="line">            first = first.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * currentNode：当前节点</span></span><br><span class="line"><span class="comment">     * lastVisitNode：最后访问的节点，同时也是双向链表的最右节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">convertNode</span><span class="params">(TreeNode currentNode, TreeNode lastVisitNode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (currentNode == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先处理左子树，同时获得左子树最右边的点（最大点）</span></span><br><span class="line">        <span class="keyword">if</span> (currentNode.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            lastVisitNode = convertNode(currentNode.left, lastVisitNode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//互相连接，当前节点的left连接lastVisitNode,同时lastVisitNode的right连接当前节点</span></span><br><span class="line">        currentNode.left = lastVisitNode;</span><br><span class="line">        <span class="keyword">if</span> (lastVisitNode != <span class="keyword">null</span>) lastVisitNode.right = currentNode;</span><br><span class="line">        lastVisitNode = currentNode; <span class="comment">//最后访问的节点更新为当前节点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理右子树</span></span><br><span class="line">        <span class="keyword">if</span> (currentNode.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            lastVisitNode = convertNode(currentNode.right, lastVisitNode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lastVisitNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">    TreeNode left = <span class="keyword">null</span>;   <span class="comment">// 连接小的结点</span></span><br><span class="line">    TreeNode right = <span class="keyword">null</span>;  <span class="comment">// 连接大的结点</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二叉树的深度-以及是否是平衡二叉树"><a href="#二叉树的深度-以及是否是平衡二叉树" class="headerlink" title="二叉树的深度,以及是否是平衡二叉树"></a>二叉树的深度,以及是否是平衡二叉树</h4><p><img src="/2018/06/17/剑指offer/39.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">TreeDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> leftDepth = TreeDepth(root.left);</span><br><span class="line">        <span class="keyword">int</span> rightDepth = TreeDepth(root.right);</span><br><span class="line">        <span class="keyword">return</span> Math.max(leftDepth, rightDepth) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">    TreeNode left = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode right = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/06/17/剑指offer/39-2.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeNode a1 = <span class="keyword">new</span> TreeNode(<span class="number">1</span>);</span><br><span class="line">        TreeNode a2 = <span class="keyword">new</span> TreeNode(<span class="number">2</span>);</span><br><span class="line">        TreeNode a3 = <span class="keyword">new</span> TreeNode(<span class="number">3</span>);</span><br><span class="line">        TreeNode a4 = <span class="keyword">new</span> TreeNode(<span class="number">4</span>);</span><br><span class="line">        TreeNode a5 = <span class="keyword">new</span> TreeNode(<span class="number">5</span>);</span><br><span class="line">        TreeNode a6 = <span class="keyword">new</span> TreeNode(<span class="number">6</span>);</span><br><span class="line">        TreeNode a7 = <span class="keyword">new</span> TreeNode(<span class="number">7</span>);</span><br><span class="line">        TreeNode a8 = <span class="keyword">new</span> TreeNode(<span class="number">8</span>);</span><br><span class="line">        a1.left=a2;</span><br><span class="line">        a1.right=a3;</span><br><span class="line">        a2.left=a4;</span><br><span class="line">        a2.right=a5;</span><br><span class="line">        a5.right=a7;</span><br><span class="line">        a3.left=a8;</span><br><span class="line">        a3.right=a6;</span><br><span class="line">        System.out.println(IsBalanced_Solution(a1));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">IsBalanced_Solution</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> isBalanced(root) != -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回值 -1：非平衡树，0：null结点，正数：树的深度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">isBalanced</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> leftDepth = isBalanced(root.left);</span><br><span class="line">        <span class="keyword">int</span> rightDepth = isBalanced(root.right);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果左右子树都是平衡树，则进行深度比较；如果深度差满足要求，则返回最大深度</span></span><br><span class="line">        <span class="keyword">if</span> (leftDepth != -<span class="number">1</span> &amp;&amp; rightDepth != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Math.abs(leftDepth - rightDepth) &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> Math.max(leftDepth, rightDepth) + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">    TreeNode left = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode right = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="中序遍历二叉树-求某一节点的下一中序节点"><a href="#中序遍历二叉树-求某一节点的下一中序节点" class="headerlink" title="中序遍历二叉树,求某一节点的下一中序节点"></a>中序遍历二叉树,求某一节点的下一中序节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeLinkNode <span class="title">GetNext</span><span class="params">(TreeLinkNode pNode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pNode == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.有右结点，则找该右结点的最左结点</span></span><br><span class="line">    <span class="keyword">if</span> (pNode.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">        pNode = pNode.right;</span><br><span class="line">        <span class="keyword">while</span> (pNode.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            pNode = pNode.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2.没有右节点，则向上找父节点</span></span><br><span class="line"><span class="comment">             a          a</span></span><br><span class="line"><span class="comment">       b                    b</span></span><br><span class="line"><span class="comment">           c                    c</span></span><br><span class="line"><span class="comment">        d                     d</span></span><br><span class="line"><span class="comment">    c是当前节点。确定c是在某个节点(a)的左子树中，还是(a)的右子树中；</span></span><br><span class="line"><span class="comment">    如果在左子树中，则找到的第一个包含c的节点就是下一个中序输出的节点；</span></span><br><span class="line"><span class="comment">    否则，就没有下一个节点了</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    TreeLinkNode parent = pNode.next;</span><br><span class="line">    <span class="keyword">while</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent.left == pNode) <span class="keyword">return</span> parent;</span><br><span class="line">        pNode = parent;</span><br><span class="line">        parent = parent.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二叉搜索树的第k个结点"><a href="#二叉搜索树的第k个结点" class="headerlink" title="二叉搜索树的第k个结点"></a>二叉搜索树的第k个结点</h4><p>给定一颗二叉搜索树，请找出其中的第k小的结点。例如， 5 / \ 3 7 /\ /\ 2 4 6 8 中，按结点数值大小顺序第三个结点的值为4。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="序列化二叉树"><a href="#序列化二叉树" class="headerlink" title="序列化二叉树"></a>序列化二叉树</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val = 0;</span></span><br><span class="line"><span class="comment">    TreeNode left = null;</span></span><br><span class="line"><span class="comment">    TreeNode right = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 序列化</span></span><br><span class="line">    <span class="function">String <span class="title">Serialize</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        String node = Integer.toString(root.val);</span><br><span class="line">        node += <span class="string">","</span>;<span class="comment">//父节点后添加逗号</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="keyword">null</span>)</span><br><span class="line">            node += <span class="string">"#"</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            node += Serialize(root.left);</span><br><span class="line">        node += <span class="string">","</span>;<span class="comment">//左节点后添加逗号</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root.right == <span class="keyword">null</span>)</span><br><span class="line">            node += <span class="string">"#"</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            node += Serialize(root.right);</span><br><span class="line">        <span class="comment">//右节点后 不添加逗号</span></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 反序列化</span></span><br><span class="line">    <span class="function">TreeNode <span class="title">Deserialize</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span> || str.length() &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        String[] nodes = str.split(<span class="string">","</span>);</span><br><span class="line">        <span class="keyword">return</span> Deserialize2(nodes);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 正在处理的结点下标</span></span><br><span class="line">    <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">    <span class="function">TreeNode <span class="title">Deserialize2</span><span class="params">(String[] nodes)</span> </span>&#123;</span><br><span class="line">        String node = nodes[index++];</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"#"</span>.equals(node)) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(Integer.parseInt(node));</span><br><span class="line">        root.left = Deserialize2(nodes);</span><br><span class="line">        root.right = Deserialize2(nodes);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列与栈"><a href="#队列与栈" class="headerlink" title="队列与栈"></a>队列与栈</h3><h4 id="两个栈实现队列"><a href="#两个栈实现队列" class="headerlink" title="两个栈实现队列"></a>两个栈实现队列</h4><p><img src="/2018/06/17/剑指offer/7.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; inStack = <span class="keyword">new</span> Stack&lt;Integer&gt;();<span class="comment">// 入队保存的栈</span></span><br><span class="line">    Stack&lt;Integer&gt; outStack = <span class="keyword">new</span> Stack&lt;Integer&gt;(); <span class="comment">// 出队保存的栈</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        inStack.push(node);</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>)  <span class="keyword">return</span> -<span class="number">1</span>; </span><br><span class="line">        size--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (outStack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!inStack.isEmpty()) &#123;</span><br><span class="line">                outStack.push(inStack.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> outStack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用两个队列实现栈（未实现）"><a href="#用两个队列实现栈（未实现）" class="headerlink" title="用两个队列实现栈（未实现）"></a>用两个队列实现栈（未实现）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="包含min函数的栈"><a href="#包含min函数的栈" class="headerlink" title="包含min函数的栈"></a>包含min函数的栈</h4><p><img src="/2018/06/17/剑指offer/21.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    Stack&lt;Integer&gt; minStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        stack.push(node);</span><br><span class="line">        <span class="keyword">if</span> (minStack.empty()) &#123;</span><br><span class="line">            minStack.push(node);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node &lt; minStack.peek()) &#123;</span><br><span class="line">            minStack.push(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            minStack.push(minStack.peek());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!stack.empty()) &#123;</span><br><span class="line">            stack.pop();</span><br><span class="line">            minStack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minStack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="栈的压入、弹出序列"><a href="#栈的压入、弹出序列" class="headerlink" title="栈的压入、弹出序列"></a>栈的压入、弹出序列</h4><p><img src="/2018/06/17/剑指offer/22.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> [] b=&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        System.out.println(IsPopOrder(a,b));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">IsPopOrder</span><span class="params">(<span class="keyword">int</span>[] pushA, <span class="keyword">int</span>[] popA)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, lena = pushA.length, lenb = popA.length;</span><br><span class="line">        <span class="keyword">boolean</span> isPopOrder = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt; lena) &#123;</span><br><span class="line">            stack.push(pushA[i]);</span><br><span class="line">            i++;</span><br><span class="line">            <span class="comment">// 栈顶与popA[j]相同，则出栈，否则继续进栈</span></span><br><span class="line">            <span class="keyword">while</span> (stack.peek() == popA[j] &amp;&amp; j &lt; lenb) &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 栈不为空，或者popA没有遍历完，则不是</span></span><br><span class="line">        <span class="keyword">if</span> (!stack.isEmpty() || j != lenb) &#123;</span><br><span class="line">            isPopOrder = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isPopOrder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="员工年龄排序"><a href="#员工年龄排序" class="headerlink" title="员工年龄排序"></a>员工年龄排序</h4><p><img src="/2018/06/17/剑指offer/8-1.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">23</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">25</span>,<span class="number">30</span>,<span class="number">54</span>,<span class="number">23</span>,<span class="number">23</span>&#125;;</span><br><span class="line">        sortAge(a);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.println(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sortAge(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> oldest = <span class="number">100</span>;</span><br><span class="line">        <span class="comment">// 创建0-100的数组来统计每个年龄有多少人</span></span><br><span class="line">        <span class="keyword">int</span>[] ages = <span class="keyword">new</span> <span class="keyword">int</span>[oldest + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历数组进行统计</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> age = arr[i];</span><br><span class="line">            ages[age]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 遍历统计的数组，将年龄存回原数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> age = <span class="number">0</span>; age &lt;= oldest; age++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ages[age]; i++) &#123;</span><br><span class="line">                arr[index] = age;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h3><h4 id="矩阵中的路径"><a href="#矩阵中的路径" class="headerlink" title="矩阵中的路径"></a>矩阵中的路径</h4><p><img src="/2018/06/17/剑指offer/矩阵中的路径.png" alt="矩阵中的路径"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断矩阵中是否有路径</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jizx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/07/09 20:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HasPath</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HasPath app = <span class="keyword">new</span> HasPath();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] matrix = <span class="string">"ABCESFCSADEE"</span>.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] str = <span class="string">"ABCB"</span>.toCharArray();</span><br><span class="line">        System.out.println(app.hasPath(matrix, <span class="number">3</span>, <span class="number">4</span>, str));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPath</span><span class="params">(<span class="keyword">char</span>[] matrix, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">char</span>[] str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || rows &lt; <span class="number">1</span> || cols &lt; <span class="number">1</span> || str == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span>[][] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[rows][cols];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历矩阵中每个位置，穷举</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (findStr(matrix, rows, cols, i, j, str, visited))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> strIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">findStr</span><span class="params">(<span class="keyword">char</span>[] matrix, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">char</span>[] str, <span class="keyword">boolean</span>[][]  visited)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (strIndex == str.length) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> find = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 矩阵中matrix[row][col] 的字符 与 str[strIndex]的相同，则继续探索该位置的四周与str[strIndex++]是否一样</span></span><br><span class="line">        <span class="keyword">if</span> (row &gt;= <span class="number">0</span> &amp;&amp; row &lt; rows &amp;&amp; col &gt;= <span class="number">0</span> &amp;&amp; col &lt; cols &amp;&amp; !visited[row][col] &amp;&amp; matrix[row * cols + col] == str[strIndex]) &#123;</span><br><span class="line">            strIndex++;</span><br><span class="line">            visited[row][col] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            find = findStr(matrix, rows, cols, row - <span class="number">1</span>, col, str, visited) ||</span><br><span class="line">                    findStr(matrix, rows, cols, row + <span class="number">1</span>, col, str, visited) ||</span><br><span class="line">                    findStr(matrix, rows, cols, row, col - <span class="number">1</span>, str, visited) ||</span><br><span class="line">                    findStr(matrix, rows, cols, row, col + <span class="number">1</span>, str, visited);</span><br><span class="line">            <span class="comment">// 如果该点的四周都没有找到符合下一字符的，则退回，重置该位置的状态，以及字符匹配的位置</span></span><br><span class="line">            <span class="keyword">if</span> (!find) &#123;</span><br><span class="line">                visited[row][col] = <span class="keyword">false</span>;</span><br><span class="line">                strIndex--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> find;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="机器人的运动范围"><a href="#机器人的运动范围" class="headerlink" title="机器人的运动范围"></a>机器人的运动范围</h4><p><img src="/2018/06/17/剑指offer/机器人的运动范围.png" alt="机器人的运动范围"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 机器人的运动范围</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jizx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/07/09 21:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RobotMovingCount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RobotMovingCount app = <span class="keyword">new</span> RobotMovingCount();</span><br><span class="line">        System.out.println(app.movingCount(<span class="number">18</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">movingCount</span><span class="params">(<span class="keyword">int</span> threshold, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rows &lt; <span class="number">0</span> || cols &lt; <span class="number">0</span> || threshold &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[][] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[rows][cols];</span><br><span class="line">        <span class="keyword">return</span> movingCount(threshold, rows, cols, <span class="number">0</span>, <span class="number">0</span>, visited);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">movingCount</span><span class="params">(<span class="keyword">int</span> threshold, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">boolean</span>[][] visited)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (canIn(rows, cols, row, col, threshold, visited)) &#123;</span><br><span class="line">            visited[row][col] = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">// 能够到达的位置：当前位置+其他四个方向能够到达的总和</span></span><br><span class="line">            count = <span class="number">1</span> + movingCount(threshold, rows, cols, row - <span class="number">1</span>, col, visited) +</span><br><span class="line">                    movingCount(threshold, rows, cols, row + <span class="number">1</span>, col, visited) +</span><br><span class="line">                    movingCount(threshold, rows, cols, row, col - <span class="number">1</span>, visited) +</span><br><span class="line">                    movingCount(threshold, rows, cols, row, col + <span class="number">1</span>, visited);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否能进入该位置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canIn</span><span class="params">(<span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> threshold, <span class="keyword">boolean</span>[][] visited)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[row][col] &amp;&amp; row &gt;= <span class="number">0</span> &amp;&amp; row &lt; rows &amp;&amp; col &gt;= <span class="number">0</span> &amp;&amp; col &lt; cols) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (row != <span class="number">0</span>) &#123;</span><br><span class="line">                sum += row % <span class="number">10</span>;</span><br><span class="line">                row /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (col != <span class="number">0</span>) &#123;</span><br><span class="line">                sum += col % <span class="number">10</span>;</span><br><span class="line">                col /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sum &lt;= threshold;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><h4 id="斐波那契数数列"><a href="#斐波那契数数列" class="headerlink" title="斐波那契数数列"></a>斐波那契数数列</h4><p><img src="/2018/06/17/剑指offer/9.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 非递归</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] initial = &#123;<span class="number">0</span>, <span class="number">1</span>&#125;; <span class="comment">//初始化第0项、第1项</span></span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> initial[n];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// fn=f(n-1)+f(n-2)</span></span><br><span class="line">        <span class="keyword">int</span> fn_1 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> fn_2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> fn = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            fn = fn_1 + fn_2;</span><br><span class="line">            fn_2 = fn_1;</span><br><span class="line">            fn_1 = fn;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="青蛙跳台阶"><a href="#青蛙跳台阶" class="headerlink" title="青蛙跳台阶"></a>青蛙跳台阶</h5><p><img src="/2018/06/17/剑指offer/9-1.png" alt=""></p><p>但是要注意<strong>与斐波那契数列的下标起始位置不太一样</strong> ，第0 项是1,即：1 1 2 3 5 。。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">JumpFloor</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] initial = &#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (target &lt; <span class="number">2</span>) <span class="keyword">return</span> initial[target];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> jumpn_1 = <span class="number">1</span>; <span class="comment">//第1项是1</span></span><br><span class="line">    <span class="keyword">int</span> jumpn_2 = <span class="number">1</span>; <span class="comment">//第0项是1</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= target; i++) &#123;</span><br><span class="line">        num = jumpn_1 + jumpn_2;</span><br><span class="line">        jumpn_2 = jumpn_1;</span><br><span class="line">        jumpn_1 = num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><img src="/2018/06/17/剑指offer/9-2.png" alt=""></p><hr><h5 id="矩阵覆盖问题"><a href="#矩阵覆盖问题" class="headerlink" title="矩阵覆盖问题"></a>矩阵覆盖问题</h5><p><img src="/2018/06/17/剑指offer/9-3.png" alt=""></p><h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3><h4 id="10-二进制中1的个数"><a href="#10-二进制中1的个数" class="headerlink" title="10.二进制中1的个数"></a>10.二进制中1的个数</h4><p><img src="/2018/06/17/剑指offer/10.png" alt=""></p><p>用1扫描法：</p><p><img src="/2018/06/17/剑指offer/10-2.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">numOf1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> matcher = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (matcher != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// n与matcher按位 与运算，如果matcer的1 对应n的1，就不会为0</span></span><br><span class="line">        <span class="comment">// n:0000101</span></span><br><span class="line">        <span class="comment">// m:0000100</span></span><br><span class="line">        <span class="keyword">if</span> ((n &amp; matcher) != <span class="number">0</span>) count++;</span><br><span class="line">        <span class="comment">//让matcer左移，进行扫描</span></span><br><span class="line">        matcher = matcher &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>减1法</p><p><img src="/2018/06/17/剑指offer/10-1.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">numOf1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="comment">// 把一个整数减去1，再和原整数做 与运算，就会把该整数最右边一个1变成0</span></span><br><span class="line">         n = (n - <span class="number">1</span>) &amp; n;</span><br><span class="line">         count++;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> count;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h3><h4 id="精度问题"><a href="#精度问题" class="headerlink" title="精度问题"></a>精度问题</h4><p>由于精度原因，<strong>不能用等号判断两个double 小数是否相等</strong>。</p><p>当小数点后位数 大于15位时，jvm就会忽略这个精度，这种情况，我们在开发时如果需要更精确的比较double类型，就要用到 BigDecimal 这个类了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// jdk1.8</span><br><span class="line">double x1= 4.000000000000002;</span><br><span class="line">double x2= 4.000000000000005;</span><br><span class="line">x1&lt;x2  true</span><br><span class="line"></span><br><span class="line">BigDecimal x3=new BigDecimal(4.0000000000000002);</span><br><span class="line">BigDecimal x4=new BigDecimal(4.0000000000000005);</span><br><span class="line">x3&lt;x4 true</span><br><span class="line"></span><br><span class="line">000000000000002      // double(15位)</span><br><span class="line">0000000000000002     // BigDecimal（16位）</span><br></pre></td></tr></table></figure><h4 id="数值的整数次方pow-x-n"><a href="#数值的整数次方pow-x-n" class="headerlink" title="数值的整数次方pow(x,n)"></a>数值的整数次方pow(x,n)</h4><p>思路：分治</p><p>简洁版</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">pow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 底数为0,不可以直接用等号判断，因为有精度的问题</span></span><br><span class="line">    <span class="keyword">if</span> (Double.compare(x, <span class="number">0.0</span>) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//指数&lt;0的情况，取绝对值，最后进行求倒数即可</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1.0</span> / powWithUnsign(x, -n);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> powWithUnsign(x, n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">powWithUnsign</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">double</span> result = powWithUnsign(x, n/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> ((n&amp;<span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> result * result * x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> result * result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细版</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Power</span><span class="params">(<span class="keyword">double</span> basse, <span class="keyword">int</span> exponent)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 输入底数为0，指数小于0</span></span><br><span class="line">        <span class="keyword">if</span> (Double.compare(basse, <span class="number">0.0</span>) == <span class="number">0</span> &amp;&amp; exponent &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"非法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> absExponent = exponent;<span class="comment">//指数取绝对值</span></span><br><span class="line">        <span class="keyword">if</span> (exponent &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            absExponent = exponent * -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> result = PowerWithUnsignedExponent(basse, absExponent);</span><br><span class="line">        <span class="keyword">if</span> (exponent &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            result = <span class="number">1.0</span> / result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">PowerWithUnsignedExponent</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断人为输入为0的情况，并不是右移产生的</span></span><br><span class="line">        <span class="keyword">if</span> (exponent == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (exponent == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> base;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> result = PowerWithUnsignedExponent(base, exponent &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        result *= result;</span><br><span class="line">        <span class="keyword">if</span> ((exponent &amp; <span class="number">0x1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">            result *= base;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="打印1到最大的n位数"><a href="#打印1到最大的n位数" class="headerlink" title="打印1到最大的n位数"></a>打印1到最大的n位数</h4><p><img src="/2018/06/17/剑指offer/12.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printNMax</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">char</span>[] number = <span class="keyword">new</span> <span class="keyword">char</span>[n];</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; number.length; i++) &#123;</span><br><span class="line">         number[i] = <span class="string">'0'</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">int</span> a = number[<span class="number">1</span>];</span><br><span class="line">     <span class="keyword">while</span> (!increase(number, <span class="number">8</span>)) &#123;</span><br><span class="line">         printNum(number);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">increase</span><span class="params">(<span class="keyword">char</span>[] number, <span class="keyword">int</span> add)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">int</span> takeOver = <span class="number">0</span>;<span class="comment">// 进位</span></span><br><span class="line">     <span class="keyword">boolean</span> isMax = <span class="keyword">false</span>;</span><br><span class="line">     <span class="comment">// 从最后一位开始加一</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = number.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">         sum = number[i] - <span class="string">'0'</span> + takeOver;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 个位进行加一</span></span><br><span class="line">         <span class="keyword">if</span> (i == number.length - <span class="number">1</span>) &#123;</span><br><span class="line">             sum += add;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 和大于10，则有进位，否则就可以结束循环</span></span><br><span class="line">         <span class="keyword">if</span> (sum &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">             <span class="comment">// 如果是最高位，则结束</span></span><br><span class="line">             <span class="keyword">if</span> (i == <span class="number">0</span>) isMax = <span class="keyword">true</span>;</span><br><span class="line">             <span class="keyword">else</span> &#123;</span><br><span class="line">                 sum -= <span class="number">10</span>;</span><br><span class="line">                 takeOver = <span class="number">1</span>;</span><br><span class="line">                 number[i] = (<span class="keyword">char</span>) (<span class="string">'0'</span> + sum);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             number[i] = (<span class="keyword">char</span>) (<span class="string">'0'</span> + sum);</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> isMax;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printNum</span><span class="params">(<span class="keyword">char</span>[] number)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">boolean</span> isStart = <span class="keyword">false</span>;</span><br><span class="line">     <span class="keyword">while</span> (i &lt; number.length) &#123;</span><br><span class="line">         <span class="keyword">if</span> (number[i] == <span class="string">'0'</span> &amp;&amp; !isStart) &#123;</span><br><span class="line"></span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             isStart = <span class="keyword">true</span>;</span><br><span class="line">             System.out.print(number[i]);</span><br><span class="line">         &#125;</span><br><span class="line">         i++;</span><br><span class="line">     &#125;</span><br><span class="line">     System.out.println();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="34-丑数"><a href="#34-丑数" class="headerlink" title="34.丑数"></a>34.丑数</h4><p><img src="/2018/06/17/剑指offer/34.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetUglyNumber_Solution</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 保存丑数的数组，并初始化第一个丑数</span></span><br><span class="line">        <span class="keyword">int</span>[] uglyNum = <span class="keyword">new</span> <span class="keyword">int</span>[index];</span><br><span class="line">        uglyNum[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 指向对应乘积刚好大于当前找到的丑数的下标</span></span><br><span class="line">        <span class="keyword">int</span> base2 = <span class="number">0</span>;<span class="comment">// 乘以2后的值，刚好略大于当前丑数的下标</span></span><br><span class="line">        <span class="keyword">int</span> base3 = <span class="number">0</span>;<span class="comment">// 乘以3后的值，刚好略大于当前丑数的下标</span></span><br><span class="line">        <span class="keyword">int</span> base5 = <span class="number">0</span>;<span class="comment">// 乘以5后的值，刚好略大于当前丑数的下标</span></span><br><span class="line">        <span class="keyword">int</span> currentIndex = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (currentIndex &lt; index) &#123;</span><br><span class="line">            <span class="keyword">int</span> nextNum = Math.min(Math.min(uglyNum[base2] * <span class="number">2</span>, uglyNum[base3] * <span class="number">3</span>), uglyNum[base5] * <span class="number">5</span>);</span><br><span class="line">            uglyNum[currentIndex] = nextNum;</span><br><span class="line">            <span class="comment">// 更新下标，使得下标在刚好略大于当前丑数的下标</span></span><br><span class="line">            <span class="keyword">while</span> (uglyNum[base2] * <span class="number">2</span> &lt;= nextNum) base2++;</span><br><span class="line">            <span class="keyword">while</span> (uglyNum[base3] * <span class="number">3</span> &lt;= nextNum) base3++;</span><br><span class="line">            <span class="keyword">while</span> (uglyNum[base5] * <span class="number">5</span> &lt;= nextNum) base5++;</span><br><span class="line">            currentIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uglyNum[index - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="不用加减乘除做加法"><a href="#不用加减乘除做加法" class="headerlink" title="不用加减乘除做加法"></a>不用加减乘除做加法</h4><p><img src="/2018/06/17/剑指offer/47.png" alt=""></p><p>思路：</p><p><img src="/2018/06/17/剑指offer/47-1.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            sum = num1 ^ num2;</span><br><span class="line">            carry = (num1 &amp; num2) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            num1 = sum;</span><br><span class="line">            num2 = carry;</span><br><span class="line">        &#125; <span class="keyword">while</span> (carry != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> num1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不使用新变量交换两个变量的值"><a href="#不使用新变量交换两个变量的值" class="headerlink" title="不使用新变量交换两个变量的值"></a>不使用新变量交换两个变量的值</h4><p><img src="/2018/06/17/剑指offer/47-2.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于加减法</span></span><br><span class="line">a = a + b;</span><br><span class="line">b = a - b;</span><br><span class="line">a = a - b;</span><br><span class="line"><span class="comment">// 基于异或</span></span><br><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;</span><br><span class="line">a = a ^ b;</span><br></pre></td></tr></table></figure><h3 id="抽象建模"><a href="#抽象建模" class="headerlink" title="抽象建模"></a>抽象建模</h3><h4 id="44-扑克牌的顺子"><a href="#44-扑克牌的顺子" class="headerlink" title="44.扑克牌的顺子"></a>44.扑克牌的顺子</h4><p><img src="/2018/06/17/剑指offer/44.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isContinuous</span><span class="params">(<span class="keyword">int</span> [] numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (numbers == <span class="keyword">null</span> || numbers.length != <span class="number">5</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Arrays.sort(numbers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 统计大王的个数</span></span><br><span class="line">        <span class="keyword">int</span> king = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : numbers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) king++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 统计不连续间隔</span></span><br><span class="line">        <span class="keyword">int</span> gaps = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// i=king的个数+1，从而跳过王</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = king+<span class="number">1</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (numbers[i] == numbers[i - <span class="number">1</span>]) <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// 出现对子，不可能是顺子</span></span><br><span class="line">            gaps += numbers[i] - numbers[i - <span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> gaps &lt;= king;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></the></excerpt>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 算法 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>运动后不能马上洗澡</title>
      <link href="/2018/03/23/%E8%BF%90%E5%8A%A8%E5%90%8E%E4%B8%8D%E8%83%BD%E9%A9%AC%E4%B8%8A%E6%B4%97%E6%BE%A1/"/>
      <url>/2018/03/23/%E8%BF%90%E5%8A%A8%E5%90%8E%E4%B8%8D%E8%83%BD%E9%A9%AC%E4%B8%8A%E6%B4%97%E6%BE%A1/</url>
      
        <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>运动后不要马上洗澡</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p><img src="/2018/03/23/运动后不能马上洗澡/运动后不要马上洗澡.png" alt=""></p></the></excerpt>]]></content>
      
      
      <categories>
          
          <category> 所见所闻 </category>
          
          <category> 健康 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>喜欢人的理由为什么说不出来</title>
      <link href="/2018/03/23/%E5%96%9C%E6%AC%A2%E4%BA%BA%E7%9A%84%E7%90%86%E7%94%B1%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4%E4%B8%8D%E5%87%BA%E6%9D%A5/"/>
      <url>/2018/03/23/%E5%96%9C%E6%AC%A2%E4%BA%BA%E7%9A%84%E7%90%86%E7%94%B1%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4%E4%B8%8D%E5%87%BA%E6%9D%A5/</url>
      
        <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>喜欢人的理由为什么说不出来</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p><img src="/2018/03/23/喜欢人的理由为什么说不出来/2018-03-23-喜欢人的理由为什么说不出来.jpg" alt=""></p></the></excerpt>]]></content>
      
      
      <categories>
          
          <category> 所见所闻 </category>
          
          <category> 爱情 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>全球公认的最健康的一天作息图解</title>
      <link href="/2018/03/23/%E5%85%A8%E7%90%83%E5%85%AC%E8%AE%A4%E7%9A%84%E6%9C%80%E5%81%A5%E5%BA%B7%E7%9A%84%E4%B8%80%E5%A4%A9%E4%BD%9C%E6%81%AF%E5%9B%BE%E8%A7%A3/"/>
      <url>/2018/03/23/%E5%85%A8%E7%90%83%E5%85%AC%E8%AE%A4%E7%9A%84%E6%9C%80%E5%81%A5%E5%BA%B7%E7%9A%84%E4%B8%80%E5%A4%A9%E4%BD%9C%E6%81%AF%E5%9B%BE%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>全球公认的最健康的一天作息安排图解</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><p><img src="/2018/03/23/全球公认的最健康的一天作息图解/2018-03-23-全球公认的最健康的一天作息图解.jpg" alt=""></p></the></excerpt>]]></content>
      
      
      <categories>
          
          <category> 健康 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 健康 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何提高「钝感力」，从此不再「想太多」</title>
      <link href="/2018/03/23/%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E3%80%8C%E9%92%9D%E6%84%9F%E5%8A%9B%E3%80%8D%EF%BC%8C%E4%BB%8E%E6%AD%A4%E4%B8%8D%E5%86%8D%E3%80%8C%E6%83%B3%E5%A4%AA%E5%A4%9A%E3%80%8D/"/>
      <url>/2018/03/23/%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E3%80%8C%E9%92%9D%E6%84%9F%E5%8A%9B%E3%80%8D%EF%BC%8C%E4%BB%8E%E6%AD%A4%E4%B8%8D%E5%86%8D%E3%80%8C%E6%83%B3%E5%A4%AA%E5%A4%9A%E3%80%8D/</url>
      
        <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <blockquote><p>室友跟我说「你是不是该倒个垃圾」，结果我一晚上没睡好，一直在想，他是不是觉得我很懒？</p><p>和朋友一起坐公交，掏了好久才摸到公交卡，特别担心她嫌我傻，不想和我玩了。</p><p>期末考试漏做了一个题，害怕排名会掉下来，好几天了，心里一直很难受。</p></blockquote><blockquote><p>……</p></blockquote><p>虽然这样写出来，你看了可能会觉得不可思议，但实际上，这样的琐事每天都在发生。</p><p><strong>「因为一点小事胡思乱想」</strong>的情况人人都有份，你一定也不例外。</p><p>偶尔一次两次没什么，但如果<strong>每天都为这些琐事心烦意乱，就会觉得「心很累」。</strong></p><p>这么敏感的根源是什么呢？</p><p>@@@来至微信公众号：<a href="https://mp.weixin.qq.com/s?__biz=MzIyNDI0NTQ1Nw==&amp;mid=2247485463&amp;idx=1&amp;sn=e90212bf8f09c998f4dfba0c1c295ad8&amp;chksm=e810aba9df6722bf88714ef5d74725d661feeb1caef7102f7d422e95fd553c33780ea6f1e41f&amp;mpshare=1&amp;scene=1&amp;srcid=0321jNkEseClP7eBH3VnhFG7##" target="_blank" rel="noopener">重构自己</a></p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h2 id="敏感的根源"><a href="#敏感的根源" class="headerlink" title="敏感的根源"></a><strong>敏感的根源</strong></h2><blockquote><p>同理心太强</p></blockquote><p>同理心（empathy）又称为换位思考、神入或共情，指<strong>站在对方立场设身处地思考的一种方式。</strong></p><p>同理心有两种，其中，认知同理心（cognitive empathy）是指你「辨别他人心智状态」的能力。</p><p>简单来说，就是<strong>你对周围人的情绪的「嗅觉」</strong>。</p><p>敏感的人常常会有很丰富的的情绪「嗅觉」，不仅自己容易陷入不必要的负面情绪，对周围人的感受也<strong>觉察的更敏锐</strong>。</p><p>对方皱了一下眉头，或者抿了抿嘴，你就会「感觉」到他在生气或者伤心。</p><blockquote><p>「自我价值感」来自外界</p></blockquote><p><strong>敏感的人常常过分担心「他人的看法」。</strong></p><p>失败了怕被嘲笑，成功了怕被嫉妒。永远都在担心「我给别人带来了什么影响、留下了什么印象」，整天惴惴不安。</p><p>这是因为，你把<strong>「自己的价值」和「别人的评价」</strong>混为了一谈，<strong>把衡量自己的标准交到了别人手里。</strong></p><p>当你一次考试失利，没获得认可，你就会觉得自己「全完了」；而一旦被别人批评、指责，那就更是「天都塌了」。</p><p>但是，一个很重要的事实是：<strong>你的价值并不取决于别人</strong>，基于外界的自我价值其实是一种<strong>「伪自尊」</strong>。</p><p>如果你的价值由他人决定，那岂不是被赞美的人就是最有价值、最幸福的人？</p><p>而实际上，<strong>赞美可以让人满足，但不能带来快乐，至少绝对不是长久的。</strong>过多的赞美甚至会引起空虚和焦虑。</p><p>很多自杀的名人都很成功，有无数人追捧。而大多数的抑郁症患者也并不缺少「爱」。</p><h2 id="敏感的影响"><a href="#敏感的影响" class="headerlink" title="敏感的影响"></a>敏感的影响</h2><p>欣赏一张图片时，如果你为了观察某个细节，把它不断放大，你会发现自己没法看清整张图了。</p><p>同样，当你过于在意一件「小事」，就会失掉对「全局」的观察和判断，甚至会<strong>把这个小事当成全部</strong>。</p><p>这时，你就对「全局」产生了<strong>「认知扭曲」</strong>。</p><p>常见的认知扭曲有这几种：</p><p><strong>1. 非此即彼</strong></p><p>这通常是由于「过度完美主义」导致的。</p><p><strong>你会害怕自己有一丁点的失败</strong>。比如你七门课都得了 A，第八门得了 B，就会觉得「连全 A 都没拿到，我真是个废物！」</p><p>其实，在「全 A」和「废物」之间，难道没有别的容身之处了吗？</p><p><strong>2. 以偏概全</strong></p><p>这种想法会让你认为：这件事如果发生了一次，就<strong>肯定会发生无数次</strong>。</p><p>当你某次表白失败了，你会开始想：这就是我的命，我这辈子「注孤生」了！实际上，这怎么可能呢？</p><p><strong>3. 心理过滤</strong></p><p>如果你一整天都为些小事心烦意乱，那很可能你的记忆会<strong>被这些不好的东西充斥</strong>。</p><p>你会发现自己只能想起那些负面的事：「做错了三个题」，「昨天被人插队了」，「快递被挤坏了」……而不记得任何好的事情。</p><p>这时，你就要提醒自己：你陷入「心理过滤」的扭曲认知里了。</p><p><strong>4. 妄下结论</strong></p><p>这也可以叫「读心术」。意思是，你总觉得<strong>你知道别人的想法</strong>。</p><p>当你的朋友和你擦肩而过，没打招呼，你会认为他一定是「生你的气、讨厌你了」。而事实上，他可能是没戴眼镜，压根没认出来是你。</p><p><strong>5. 归咎自己</strong></p><p>敏感的人擅长觉察别人的情绪，这倒没什么，但糟糕的是他们经常<strong>把那些情绪归成自己的「责任」</strong>。</p><p>比如你的室友看起来不太高兴，尽管可能他掩饰的很好，但你还是一眼就看出来了。然后你可能就会想：他生气是因为我吗？我是不是哪里做的不好，让他不高兴了？</p><p>这么一来，你就陷进了<strong>毫无必要</strong>的不安和内疚里。</p><h2 id="敏感的解决方法"><a href="#敏感的解决方法" class="headerlink" title="敏感的解决方法"></a>敏感的解决方法</h2><p>这只是一篇文章，不是一针抗敏药。<strong>重要的是你看完之后要去做。</strong></p><p><strong>▍看看真正的「全局」</strong></p><p>当你发现自己在执着于某个小事，先告诉自己：停住，别陷进去！想这些根本没有意义，全是浪费时间！</p><p>问问自己：<strong>五年</strong>、<strong>十年之后</strong>，<strong>你还会记得这件事吗</strong>？它到底能有多少影响？</p><p>把你那幅「放大了无数倍」的画缩回正常尺寸，从时间的「全局」上来看这件事，<strong>它还值得你这么纠结吗</strong>？</p><p>除了时间，还有生活的全局。</p><p>比如当你纠结于室友的那句「该倒个垃圾了」的时候，先告诉自己：别老琢磨了，有啥用？</p><p>然后去想想，你昨天还跟他一块儿打排位，上周末还约了火锅，他难道会因为一个垃圾桶跟你「断交」吗？</p><p>再说了，<strong>你的生活难道只有一个垃圾桶</strong>、<strong>一个室友吗</strong>？这让你爸妈、闺蜜还有你最爱去的那家火锅店，情何以堪？</p><p>除了想，你还可以动起来，<strong>去找点儿事做</strong>。</p><p>很多负面情绪其实都是「闲」出来的。你如果没有躺在床上「琢磨」，而是去追剧，或者吸猫，你根本就不会想起室友的那句话。</p><p>看看生活的全貌，让自己投入进去，<strong>别留太多时间给你「琢磨」</strong>。</p><p><strong>▍不要猜测，把话说出来</strong></p><p>如果你就是控制不住，一直在想「他是不是觉得我懒？我真的很懒吗？」那就把你的疑问说出来。</p><p><strong>不要「猜」</strong>，<strong>直接去问他</strong>：你昨天那样说是因为，你觉得我不经常倒垃圾吗？</p><p>如果他说不是，那你的不安就彻底解决了；如果他说是，那你也不用担心，<strong>这本来就是个「小事」</strong>，<strong>还怕解决不了吗</strong>？</p><p>跟他商量一下，轮流打扫卫生，或者买两个垃圾桶，一人一个，这不就完事了？</p><p><strong>▍卸下不必要的责任</strong></p><p>当你察觉到别人生气或者伤心了，开始担心这是「你的错」，告诉自己：这不关我的事。</p><p>这不是「不善良」或者「自私」，而是因为，每个人都得为自己的行为和情绪负责。这是他自己的难题，<strong>他必须，也只能自己去解决。</strong></p><p>如果他向你寻求帮助，你可以开解或安慰他，但是<strong>不管**</strong>成不成功，你都没有「责任」。</p><h2 id="终极必杀：提高自我认知"><a href="#终极必杀：提高自我认知" class="headerlink" title="终极必杀：提高自我认知"></a>终极必杀：提高自我认知</h2><p>如果你习惯于用别人的评价定义自己，那你一定很敏感。因为你需要不停的「察言观色」，去猜别人的想法。</p><p>那怎么才能不依赖外界，让自己来决定你的价值？</p><p><strong>▍不要物化自己</strong></p><p><strong>你不是学积分，也不是体重秤，更不是别人嘴里的几个「形容词」。</strong>你是一个完整的，有思想、感觉和情绪的人。</p><p>当你因为别人的评价质疑自己的时候，提醒自己：<strong>你是什么样的人，他说了不算。</strong></p><p>不管他是谁，你的父母、老师还是最好的朋友，他都不能定义你。别人看到的只是「他眼中的你」，那不完整。</p><p><strong>你不是一成不变的。</strong>你每一天、每一分钟都在改变。这些变化别人不清楚，但你自己知道。</p><p><strong>▍了解自己</strong></p><p>拿出一张纸，<strong>把这些问题的答案写出来</strong>：</p><blockquote><p>最了解我的人是</p><p>我的一个人生梦想是</p><p>用三个形容词描述我自己</p><p>我最喜欢自己的这一点</p><p>我最不喜欢这一点</p><p>我比较擅长</p><p>我不太擅长</p><p>我喜欢</p><p>我讨厌</p><p>吸引我的三个职业是</p><p>我的人生目标是</p></blockquote><p>回答完毕后，你是不是对自己有了更<strong>明确、稳定</strong>的认知？</p><p>你可以每隔一段时间就回答一次，看看有什么变化，这样会更了解自己。</p><p>当你逐渐认识了自己，你会开始树立出一个<strong>「理想的自我」</strong>。</p><p>朝着这个方向去努力，你会发现，<strong>你不再需要他人的认可来确定自己的「进步」</strong>。你自己心里很清楚，你哪里做得好，哪里还要继续改进。</p><p>当你不再依赖于外界去获取动力，你的前进也就从容起来了。</p></the></excerpt>]]></content>
      
      
      <categories>
          
          <category> 所见所闻 </category>
          
          <category> 心理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 所见所闻 </tag>
            
            <tag> 同理心 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java嵌套类</title>
      <link href="/2018/03/03/java%E5%B5%8C%E5%A5%97%E7%B1%BB/"/>
      <url>/2018/03/03/java%E5%B5%8C%E5%A5%97%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>讲解java中嵌套类的概念，也就是在类中定义另一个类的概念（未完待续。。。）</excerpt></p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h2 id="嵌套类"><a href="#嵌套类" class="headerlink" title="嵌套类"></a>嵌套类</h2><p>java语言允许你在一个类中定义另一个类，这样的类称为嵌套类，形式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">NestedClass</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>术语: 嵌套类分为2类：静态、非静态。静态的嵌套类称为静态嵌套类，非静态的嵌套类称为内部类，如下所示：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticNestedClass</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嵌套类是包围它的外部类（enclosing class）的一个成员，非静态嵌套类（内部类）可以访问到其他成员，即使它们被定义为私有的（private）。静态嵌套类不能访问其他成员。作为外部类的成员，嵌套类可以被声明为 private, public, protected, 或者 package private 四种访问权限</p><p><strong>为什么要使用嵌套类呢?</strong></p><ul><li>这是一种有效组织那种只在某一处使用到的类的方法：比如一个类只对另外一个类有用，那么把它们两放在一起，嵌套在一起是合乎逻辑的，将这样的辅助类（helper classes）嵌套在一起使得java包更加简洁合理.</li><li>增强了封装性: 考虑两个顶层类（top-level classes）, A 和 B, 其中B需要访问A的成员，否则这些成员将被声明为私有。如果将B藏在A中, A的成员即使被定义为私有的，B也可以访问到， 另外，B本身也与外界隔离开来</li><li>更加可读，并且有利于维护代码: Nesting small classes within top-level classes places the code closer to where it is used.</li></ul><h3 id="静态嵌套类（Static-Nested-Classes）"><a href="#静态嵌套类（Static-Nested-Classes）" class="headerlink" title="静态嵌套类（Static Nested Classes）"></a>静态嵌套类（Static Nested Classes）</h3><p>与类方法、类变量成员一样，一个静态嵌套类与外部类是相关联的，而且与静态方法类似，静态嵌套类不能直接获取到外部类的实例变量或者其中的函数：它只能通过类引用来使用它们。</p><p>注意：静态嵌套类与其外部类（或者其他类）的实例成员之间的交互，就像其他顶层类之间一样。实际上，一个静态嵌套类在表现上像是一个顶级类，其实是嵌套在另一个顶级类中的，以方便打包。<br>使用到静态嵌套类时必须通过外部类，形如：<code>OuterClass.StaticNestedClass</code><br>比如要创建一个静态嵌套类的实例，语法如下：<br><code>OuterClass.StaticNestedClass nestedObject = new OuterClass.StaticNestedClass();</code><br>​     </p><h3 id="内部类（Inner-Classes）"><a href="#内部类（Inner-Classes）" class="headerlink" title="内部类（Inner Classes）"></a>内部类（Inner Classes）</h3><p>与实例方法、实例变量成员一样，一个内部类与外部类的一个实例是相关联的，而且能够直接访问到外部类实例中的方法与变量，而且因为内部类是与实例相关联的，因此内部类中是无法定义静态成员的。</p><p>内部类的实例只能与外部类的实例同时存在，无法独立实例化，并且能够直接访问到外部类的方法与变量<br>想要实例化一个内部类，你必须先实例化一个外部类，然后才能通过外部类创建一个内部类的实例，语法如下：</p><p><code>OuterClass.InnerClass innerObject = outerObject.new InnerClass();</code><br>内部类中有两种特殊的类：局部类、匿名类</p><h4 id="局部类（Local-Classes）"><a href="#局部类（Local-Classes）" class="headerlink" title="局部类（Local Classes）"></a>局部类（Local Classes）</h4><p>Local classes are classes that are defined in a <em>block</em>, which is a group of zero or more statements between balanced braces. You typically find local classes defined in the body of a method.</p><p>This section covers the following topics:</p><ul><li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/localclasses.html#declaring-local-classes" target="_blank" rel="noopener">Declaring Local Classes</a></li><li>Accessing Members of an Enclosing Class<ul><li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/localclasses.html#shadowing-and-local-classes" target="_blank" rel="noopener">Shadowing and Local Classes</a></li></ul></li><li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/localclasses.html#local-classes-are-similar-to-inner-classes" target="_blank" rel="noopener">Local Classes Are Similar To Inner Classes</a></li></ul><h5 id="Declaring-Local-Classes"><a href="#Declaring-Local-Classes" class="headerlink" title="Declaring Local Classes"></a><a href="">Declaring Local Classes</a></h5><p>You can define a local class inside any block (see <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/expressions.html" target="_blank" rel="noopener">Expressions, Statements, and Blocks</a> for more information). For example, you can define a local class in a method body, a <code>for</code> loop, or an <code>if</code> clause.</p><p>The following example, <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/examples/LocalClassExample.java" target="_blank" rel="noopener"><code>LocalClassExample</code></a>, validates two phone numbers. It defines the local class <code>PhoneNumber</code> in the method <code>validatePhoneNumber</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">public class LocalClassExample &#123;</span><br><span class="line">  </span><br><span class="line">    static String regularExpression = &quot;[^0-9]&quot;;</span><br><span class="line">  </span><br><span class="line">    public static void validatePhoneNumber(</span><br><span class="line">        String phoneNumber1, String phoneNumber2) &#123;</span><br><span class="line">      </span><br><span class="line">        final int numberLength = 10;</span><br><span class="line">        </span><br><span class="line">        // Valid in JDK 8 and later:</span><br><span class="line">       </span><br><span class="line">        // int numberLength = 10;</span><br><span class="line">       </span><br><span class="line">        class PhoneNumber &#123;</span><br><span class="line">            </span><br><span class="line">            String formattedPhoneNumber = null;</span><br><span class="line"></span><br><span class="line">            PhoneNumber(String phoneNumber)&#123;</span><br><span class="line">                // numberLength = 7;</span><br><span class="line">                String currentNumber = phoneNumber.replaceAll(</span><br><span class="line">                  regularExpression, &quot;&quot;);</span><br><span class="line">                if (currentNumber.length() == numberLength)</span><br><span class="line">                    formattedPhoneNumber = currentNumber;</span><br><span class="line">                else</span><br><span class="line">                    formattedPhoneNumber = null;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public String getNumber() &#123;</span><br><span class="line">                return formattedPhoneNumber;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            // Valid in JDK 8 and later:</span><br><span class="line"></span><br><span class="line">//            public void printOriginalNumbers() &#123;</span><br><span class="line">//                System.out.println(&quot;Original numbers are &quot; + phoneNumber1 +</span><br><span class="line">//                    &quot; and &quot; + phoneNumber2);</span><br><span class="line">//            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        PhoneNumber myNumber1 = new PhoneNumber(phoneNumber1);</span><br><span class="line">        PhoneNumber myNumber2 = new PhoneNumber(phoneNumber2);</span><br><span class="line">        </span><br><span class="line">        // Valid in JDK 8 and later:</span><br><span class="line"></span><br><span class="line">//        myNumber1.printOriginalNumbers();</span><br><span class="line"></span><br><span class="line">        if (myNumber1.getNumber() == null) </span><br><span class="line">            System.out.println(&quot;First number is invalid&quot;);</span><br><span class="line">        else</span><br><span class="line">            System.out.println(&quot;First number is &quot; + myNumber1.getNumber());</span><br><span class="line">        if (myNumber2.getNumber() == null)</span><br><span class="line">            System.out.println(&quot;Second number is invalid&quot;);</span><br><span class="line">        else</span><br><span class="line">            System.out.println(&quot;Second number is &quot; + myNumber2.getNumber());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String... args) &#123;</span><br><span class="line">        validatePhoneNumber(&quot;123-456-7890&quot;, &quot;456-7890&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The example validates a phone number by first removing all characters from the phone number except the digits 0 through 9. After, it checks whether the phone number contains exactly ten digits (the length of a phone number in North America). This example prints the following:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">First number is 1234567890</span><br><span class="line">Second number is invalid</span><br></pre></td></tr></table></figure><h5 id="Accessing-Members-of-an-Enclosing-Class"><a href="#Accessing-Members-of-an-Enclosing-Class" class="headerlink" title="Accessing Members of an Enclosing Class"></a><a href="">Accessing Members of an Enclosing Class</a></h5><p>A local class has access to the members of its enclosing class. In the previous example, the <code>PhoneNumber</code> constructor accesses the member <code>LocalClassExample.regularExpression</code>.</p><p>In addition, a local class has access to local variables. However, a local class can only access local variables that are declared final. When a local class accesses a local variable or parameter of the enclosing block, it <em>captures</em> that variable or parameter. For example, the <code>PhoneNumber</code> constructor can access the local variable <code>numberLength</code> because it is declared final; <code>numberLength</code> is a <em>captured variable</em>.</p><p>However, starting in Java SE 8, a local class can access local variables and parameters of the enclosing block that are final or <em>effectively final</em>. A variable or parameter whose value is never changed after it is initialized is effectively final. For example, suppose that the variable <code>numberLength</code> is not declared final, and you add the highlighted assignment statement in the <code>PhoneNumber</code> constructor to change the length of a valid phone number to 7 digits:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PhoneNumber(String phoneNumber) &#123;</span><br><span class="line">    numberLength = 7;</span><br><span class="line">    String currentNumber = phoneNumber.replaceAll(</span><br><span class="line">        regularExpression, &quot;&quot;);</span><br><span class="line">    if (currentNumber.length() == numberLength)</span><br><span class="line">        formattedPhoneNumber = currentNumber;</span><br><span class="line">    else</span><br><span class="line">        formattedPhoneNumber = null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Because of this assignment statement, the variable <code>numberLength</code> is not effectively final anymore. As a result, the Java compiler generates an error message similar to “local variables referenced from an inner class must be final or effectively final” where the inner class <code>PhoneNumber</code> tries to access the <code>numberLength</code> variable:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (currentNumber.length() == numberLength)</span><br></pre></td></tr></table></figure><p>Starting in Java SE 8, if you declare the local class in a method, it can access the method’s parameters. For example, you can define the following method in the <code>PhoneNumber</code> local class:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void printOriginalNumbers() &#123;</span><br><span class="line">    System.out.println(&quot;Original numbers are &quot; + phoneNumber1 +</span><br><span class="line">        &quot; and &quot; + phoneNumber2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The method <code>printOriginalNumbers</code> accesses the parameters <code>phoneNumber1</code> and <code>phoneNumber2</code> of the method <code>validatePhoneNumber</code>.</p><h6 id="Shadowing-and-Local-Classes"><a href="#Shadowing-and-Local-Classes" class="headerlink" title="Shadowing and Local Classes"></a><a href="">Shadowing and Local Classes</a></h6><p>Declarations of a type (such as a variable) in a local class shadow declarations in the enclosing scope that have the same name. See <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html#shadowing" target="_blank" rel="noopener">Shadowing</a> for more information.</p><h5 id="Local-Classes-Are-Similar-To-Inner-Classes"><a href="#Local-Classes-Are-Similar-To-Inner-Classes" class="headerlink" title="Local Classes Are Similar To Inner Classes"></a><a href="">Local Classes Are Similar To Inner Classes</a></h5><p>Local classes are similar to inner classes because they cannot define or declare any static members. Local classes in static methods, such as the class <code>PhoneNumber</code>, which is defined in the static method <code>validatePhoneNumber</code>, can only refer to static members of the enclosing class. For example, if you do not define the member variable <code>regularExpression</code> as static, then the Java compiler generates an error similar to “non-static variable <code>regularExpression</code> cannot be referenced from a static context.”</p><p>Local classes are non-static because they have access to instance members of the enclosing block. Consequently, they cannot contain most kinds of static declarations.</p><p>You cannot declare an interface inside a block; interfaces are inherently static. For example, the following code excerpt does not compile because the interface <code>HelloThere</code> is defined inside the body of the method <code>greetInEnglish</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public void greetInEnglish() &#123;</span><br><span class="line">    interface HelloThere &#123;</span><br><span class="line">       public void greet();</span><br><span class="line">    &#125;</span><br><span class="line">    class EnglishHelloThere implements HelloThere &#123;</span><br><span class="line">        public void greet() &#123;</span><br><span class="line">            System.out.println(&quot;Hello &quot; + name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    HelloThere myGreeting = new EnglishHelloThere();</span><br><span class="line">    myGreeting.greet();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You cannot declare static initializers or member interfaces in a local class. The following code excerpt does not compile because the method <code>EnglishGoodbye.sayGoodbye</code> is declared <code>static</code>. The compiler generates an error similar to “modifier ‘static’ is only allowed in constant variable declaration” when it encounters this method definition:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public void sayGoodbyeInEnglish() &#123;</span><br><span class="line">    class EnglishGoodbye &#123;</span><br><span class="line">        public static void sayGoodbye() &#123;</span><br><span class="line">            System.out.println(&quot;Bye bye&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    EnglishGoodbye.sayGoodbye();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A local class can have static members provided that they are constant variables. (A <em>constant variable</em> is a variable of primitive type or type <code>String</code> that is declared final and initialized with a compile-time constant expression. A compile-time constant expression is typically a string or an arithmetic expression that can be evaluated at compile time. See <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/classvars.html" target="_blank" rel="noopener">Understanding Class Members</a> for more information.) The following code excerpt compiles because the static member <code>EnglishGoodbye.farewell</code> is a constant variable:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void sayGoodbyeInEnglish() &#123;</span><br><span class="line">    class EnglishGoodbye &#123;</span><br><span class="line">        public static final String farewell = &quot;Bye bye&quot;;</span><br><span class="line">        public void sayGoodbye() &#123;</span><br><span class="line">            System.out.println(farewell);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    EnglishGoodbye myEnglishGoodbye = new EnglishGoodbye();</span><br><span class="line">    myEnglishGoodbye.sayGoodbye();</span><br><span class="line">&#125;待补充。。。</span><br></pre></td></tr></table></figure><h4 id="匿名类（Anonymous-Classes）"><a href="#匿名类（Anonymous-Classes）" class="headerlink" title="匿名类（Anonymous Classes）"></a>匿名类（Anonymous Classes）</h4><p>Anonymous classes enable you to make your code more concise. They enable you to declare and instantiate a class at the same time. They are like local classes except that they do not have a name. Use them if you need to use a local class only once.</p><p>This section covers the following topics:</p><ul><li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html#declaring-anonymous-classes" target="_blank" rel="noopener">Declaring Anonymous Classes</a></li><li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html#syntax-of-anonymous-classes" target="_blank" rel="noopener">Syntax of Anonymous Classes</a></li><li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html#accessing" target="_blank" rel="noopener">Accessing Local Variables of the Enclosing Scope, and Declaring and Accessing Members of the Anonymous Class</a></li><li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html#examples-of-anonymous-classes" target="_blank" rel="noopener">Examples of Anonymous Classes</a></li></ul><h5 id="Declaring-Anonymous-Classes"><a href="#Declaring-Anonymous-Classes" class="headerlink" title="Declaring Anonymous Classes"></a><a href="">Declaring Anonymous Classes</a></h5><p>While local classes are class declarations, anonymous classes are expressions, which means that you define the class in another expression. The following example, <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/examples/HelloWorldAnonymousClasses.java" target="_blank" rel="noopener"><code>HelloWorldAnonymousClasses</code></a>, uses anonymous classes in the initialization statements of the local variables <code>frenchGreeting</code> and <code>spanishGreeting</code>, but uses a local class for the initialization of the variable <code>englishGreeting`</code>:`</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">public class HelloWorldAnonymousClasses &#123;</span><br><span class="line">  </span><br><span class="line">    interface HelloWorld &#123;</span><br><span class="line">        public void greet();</span><br><span class="line">        public void greetSomeone(String someone);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    public void sayHello() &#123;</span><br><span class="line">        </span><br><span class="line">        class EnglishGreeting implements HelloWorld &#123;</span><br><span class="line">            String name = &quot;world&quot;;</span><br><span class="line">            public void greet() &#123;</span><br><span class="line">                greetSomeone(&quot;world&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            public void greetSomeone(String someone) &#123;</span><br><span class="line">                name = someone;</span><br><span class="line">                System.out.println(&quot;Hello &quot; + name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        HelloWorld englishGreeting = new EnglishGreeting();</span><br><span class="line">        </span><br><span class="line">        HelloWorld frenchGreeting = new HelloWorld() &#123;</span><br><span class="line">            String name = &quot;tout le monde&quot;;</span><br><span class="line">            public void greet() &#123;</span><br><span class="line">                greetSomeone(&quot;tout le monde&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            public void greetSomeone(String someone) &#123;</span><br><span class="line">                name = someone;</span><br><span class="line">                System.out.println(&quot;Salut &quot; + name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        HelloWorld spanishGreeting = new HelloWorld() &#123;</span><br><span class="line">            String name = &quot;mundo&quot;;</span><br><span class="line">            public void greet() &#123;</span><br><span class="line">                greetSomeone(&quot;mundo&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            public void greetSomeone(String someone) &#123;</span><br><span class="line">                name = someone;</span><br><span class="line">                System.out.println(&quot;Hola, &quot; + name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        englishGreeting.greet();</span><br><span class="line">        frenchGreeting.greetSomeone(&quot;Fred&quot;);</span><br><span class="line">        spanishGreeting.greet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String... args) &#123;</span><br><span class="line">        HelloWorldAnonymousClasses myApp =</span><br><span class="line">            new HelloWorldAnonymousClasses();</span><br><span class="line">        myApp.sayHello();</span><br><span class="line">    &#125;            </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Syntax-of-Anonymous-Classes"><a href="#Syntax-of-Anonymous-Classes" class="headerlink" title="Syntax of Anonymous Classes"></a><a href="">Syntax of Anonymous Classes</a></h5><p>As mentioned previously, an anonymous class is an expression. The syntax of an anonymous class expression is like the invocation of a constructor, except that there is a class definition contained in a block of code.</p><p>Consider the instantiation of the <code>frenchGreeting</code> object:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HelloWorld frenchGreeting = new HelloWorld() &#123;</span><br><span class="line">    String name = &quot;tout le monde&quot;;</span><br><span class="line">    public void greet() &#123;</span><br><span class="line">        greetSomeone(&quot;tout le monde&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void greetSomeone(String someone) &#123;</span><br><span class="line">        name = someone;</span><br><span class="line">        System.out.println(&quot;Salut &quot; + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>The anonymous class expression consists of the following:</p><ul><li>The <code>new</code> operator</li><li>The name of an interface to implement or a class to extend. In this example, the anonymous class is implementing the interface <code>HelloWorld</code>.</li><li>Parentheses that contain the arguments to a constructor, just like a normal class instance creation expression. <strong>Note</strong>: When you implement an interface, there is no constructor, so you use an empty pair of parentheses, as in this example.</li><li>A body, which is a class declaration body. More specifically, in the body, method declarations are allowed but statements are not.</li></ul><p>Because an anonymous class definition is an expression, it must be part of a statement. In this example, the anonymous class expression is part of the statement that instantiates the <code>frenchGreeting</code> object. (This explains why there is a semicolon after the closing brace.)</p><h5 id="Accessing-Local-Variables-of-the-Enclosing-Scope-and-Declaring-and-Accessing-Members-of-the-Anonymous-Class"><a href="#Accessing-Local-Variables-of-the-Enclosing-Scope-and-Declaring-and-Accessing-Members-of-the-Anonymous-Class" class="headerlink" title="Accessing Local Variables of the Enclosing Scope, and Declaring and Accessing Members of the Anonymous Class"></a><a href="">Accessing Local Variables of the Enclosing Scope, and Declaring and Accessing Members of the Anonymous Class</a></h5><p>Like local classes, anonymous classes can <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/localclasses.html#accessing-members-of-an-enclosing-class" target="_blank" rel="noopener">capture variables</a>; they have the same access to local variables of the enclosing scope:</p><ul><li>An anonymous class has access to the members of its enclosing class.</li><li>An anonymous class cannot access local variables in its enclosing scope that are not declared as <code>final</code> or effectively final.</li><li>Like a nested class, a declaration of a type (such as a variable) in an anonymous class shadows any other declarations in the enclosing scope that have the same name. See <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html#shadowing" target="_blank" rel="noopener">Shadowing</a> for more information.</li></ul><p>Anonymous classes also have the same restrictions as local classes with respect to their members:</p><ul><li>You cannot declare static initializers or member interfaces in an anonymous class.</li><li>An anonymous class can have static members provided that they are constant variables.</li></ul><p>Note that you can declare the following in anonymous classes:</p><ul><li>Fields</li><li>Extra methods (even if they do not implement any methods of the supertype)</li><li>Instance initializers</li><li>Local classes</li></ul><p>However, you cannot declare constructors in an anonymous class.</p><h5 id="Examples-of-Anonymous-Classes"><a href="#Examples-of-Anonymous-Classes" class="headerlink" title="Examples of Anonymous Classes"></a><a href="">Examples of Anonymous Classes</a></h5><p>Anonymous classes are often used in graphical user interface (GUI) applications.</p><p>Consider the JavaFX example <a href="https://docs.oracle.com/javase/8/javafx/get-started-tutorial/hello_world.htm" target="_blank" rel="noopener"><code>HelloWorld.java</code></a> (from the section <a href="https://docs.oracle.com/javase/8/javafx/get-started-tutorial/hello_world.htm" target="_blank" rel="noopener">Hello World, JavaFX Style</a> from <a href="https://docs.oracle.com/javase/8/javafx/get-started-tutorial/javafx_get_started.htm" target="_blank" rel="noopener">Getting Started with JavaFX</a>). This sample creates a frame that contains a <strong>Say ‘Hello World’</strong> button. The anonymous class expression is highlighted:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import javafx.event.ActionEvent;</span><br><span class="line">import javafx.event.EventHandler;</span><br><span class="line">import javafx.scene.Scene;</span><br><span class="line">import javafx.scene.control.Button;</span><br><span class="line">import javafx.scene.layout.StackPane;</span><br><span class="line">import javafx.stage.Stage;</span><br><span class="line"> </span><br><span class="line">public class HelloWorld extends Application &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        launch(args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void start(Stage primaryStage) &#123;</span><br><span class="line">        primaryStage.setTitle(&quot;Hello World!&quot;);</span><br><span class="line">        Button btn = new Button();</span><br><span class="line">        btn.setText(&quot;Say &apos;Hello World&apos;&quot;);</span><br><span class="line">        btn.setOnAction(new EventHandler&lt;ActionEvent&gt;() &#123;</span><br><span class="line"> </span><br><span class="line">            @Override</span><br><span class="line">            public void handle(ActionEvent event) &#123;</span><br><span class="line">                System.out.println(&quot;Hello World!&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        StackPane root = new StackPane();</span><br><span class="line">        root.getChildren().add(btn);</span><br><span class="line">        primaryStage.setScene(new Scene(root, 300, 250));</span><br><span class="line">        primaryStage.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this example, the method invocation <code>btn.setOnAction</code> specifies what happens when you select the <strong>Say ‘Hello World’</strong> button. This method requires an object of type <code>EventHandler&lt;ActionEvent&gt;</code>. The <code>EventHandler&lt;ActionEvent&gt;</code> interface contains only one method, handle. Instead of implementing this method with a new class, the example uses an anonymous class expression. Notice that this expression is the argument passed to the <code>btn.setOnAction</code> method.</p><p>Because the <code>EventHandler&lt;ActionEvent&gt;</code> interface contains only one method, you can use a lambda expression instead of an anonymous class expression. See the section <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html" target="_blank" rel="noopener">Lambda Expressions</a> for more information.</p><p>Anonymous classes are ideal for implementing an interface that contains two or more methods. The following JavaFX example is from the section <a href="https://docs.oracle.com/javase/8/javafx/user-interface-tutorial/custom.htm" target="_blank" rel="noopener">Customization of UI Controls</a>. The highlighted code creates a text field that only accepts numeric values. It redefines the default implementation of the <code>TextField</code> class with an anonymous class by overriding the <code>replaceText</code> and <code>replaceSelection</code> methods inherited from the <code>TextInputControl</code> class.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">import javafx.application.Application;</span><br><span class="line">import javafx.event.ActionEvent;</span><br><span class="line">import javafx.event.EventHandler;</span><br><span class="line">import javafx.geometry.Insets;</span><br><span class="line">import javafx.scene.Group;</span><br><span class="line">import javafx.scene.Scene;</span><br><span class="line">import javafx.scene.control.*;</span><br><span class="line">import javafx.scene.layout.GridPane;</span><br><span class="line">import javafx.scene.layout.HBox;</span><br><span class="line">import javafx.stage.Stage;</span><br><span class="line"></span><br><span class="line">public class CustomTextFieldSample extends Application &#123;</span><br><span class="line">    </span><br><span class="line">    final static Label label = new Label();</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    public void start(Stage stage) &#123;</span><br><span class="line">        Group root = new Group();</span><br><span class="line">        Scene scene = new Scene(root, 300, 150);</span><br><span class="line">        stage.setScene(scene);</span><br><span class="line">        stage.setTitle(&quot;Text Field Sample&quot;);</span><br><span class="line"> </span><br><span class="line">        GridPane grid = new GridPane();</span><br><span class="line">        grid.setPadding(new Insets(10, 10, 10, 10));</span><br><span class="line">        grid.setVgap(5);</span><br><span class="line">        grid.setHgap(5);</span><br><span class="line"> </span><br><span class="line">        scene.setRoot(grid);</span><br><span class="line">        final Label dollar = new Label(&quot;$&quot;);</span><br><span class="line">        GridPane.setConstraints(dollar, 0, 0);</span><br><span class="line">        grid.getChildren().add(dollar);</span><br><span class="line">        </span><br><span class="line">        final TextField sum = new TextField() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void replaceText(int start, int end, String text) &#123;</span><br><span class="line">                if (!text.matches(&quot;[a-z, A-Z]&quot;)) &#123;</span><br><span class="line">                    super.replaceText(start, end, text);                     </span><br><span class="line">                &#125;</span><br><span class="line">                label.setText(&quot;Enter a numeric value&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            @Override</span><br><span class="line">            public void replaceSelection(String text) &#123;</span><br><span class="line">                if (!text.matches(&quot;[a-z, A-Z]&quot;)) &#123;</span><br><span class="line">                    super.replaceSelection(text);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        sum.setPromptText(&quot;Enter the total&quot;);</span><br><span class="line">        sum.setPrefColumnCount(10);</span><br><span class="line">        GridPane.setConstraints(sum, 1, 0);</span><br><span class="line">        grid.getChildren().add(sum);</span><br><span class="line">        </span><br><span class="line">        Button submit = new Button(&quot;Submit&quot;);</span><br><span class="line">        GridPane.setConstraints(submit, 2, 0);</span><br><span class="line">        grid.getChildren().add(submit);</span><br><span class="line">        </span><br><span class="line">        submit.setOnAction(new EventHandler&lt;ActionEvent&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void handle(ActionEvent e) &#123;</span><br><span class="line">                label.setText(null);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        GridPane.setConstraints(label, 0, 1);</span><br><span class="line">        GridPane.setColumnSpan(label, 3);</span><br><span class="line">        grid.getChildren().add(label);</span><br><span class="line">        </span><br><span class="line">        scene.setRoot(grid);</span><br><span class="line">        stage.show();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        launch(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遮盖（Shadowing）、变量作用域问题"><a href="#遮盖（Shadowing）、变量作用域问题" class="headerlink" title="遮盖（Shadowing）、变量作用域问题"></a>遮盖（Shadowing）、变量作用域问题</h3><p>如果在特定范围内（比如在内部类或者方法中）有一个声明（成员变量声明或者方法参数名字）与该范围外的另一个声明拥有相同的名字，那么该范围内的声明就会遮盖掉范围外的声明。你就不能仅简单地通过名字来引用被遮盖的那个声明，请看下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShadowTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">FirstLevel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">methodInFirstLevel</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"x = "</span> + x);</span><br><span class="line">            System.out.println(<span class="string">"this.x = "</span> + <span class="keyword">this</span>.x);</span><br><span class="line">            System.out.println(<span class="string">"ShadowTest.this.x = "</span> + ShadowTest.<span class="keyword">this</span>.x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        ShadowTest st = <span class="keyword">new</span> ShadowTest();</span><br><span class="line">        ShadowTest.FirstLevel fl = st.new FirstLevel();</span><br><span class="line">        fl.methodInFirstLevel(<span class="number">23</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">23</span></span><br><span class="line"><span class="keyword">this</span>.x = <span class="number">1</span></span><br><span class="line">ShadowTest.<span class="keyword">this</span>.x = <span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>该例子中定义了3个名为x的变量：类ShadowTest的成员变量、内部类FirstLevel的成员变量、methodInFirstLevel方法的形参。methodInFirstLevel方法的形参遮盖住了内部类FirstLevel的成员变量，因此，当你在方法中使用x时，x表示的是方法的参数x。想要获得内部类FirstLevel的成员变量x，要通过关键字<strong>this</strong> 来代表外部的作用域（enclosing scope），也就是FirstLevel类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"this.x = "</span> + <span class="keyword">this</span>.x);</span><br></pre></td></tr></table></figure><p>要获取到更大作用域的成员变量时，需要通过其所属的类的类名来访问，比如以下的语句，在methodInFirstLevel方法中获取最外层的ShadowTest 类的成员变量x</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"ShadowTest.this.x = "</span> + ShadowTest.<span class="keyword">this</span>.x);</span><br></pre></td></tr></table></figure><p>参考资料：<a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html</a></p></the>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>英语语法——中级：第3章.完成时态</title>
      <link href="/2018/02/11/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E2%80%94%E2%80%94%E4%B8%AD%E7%BA%A7%EF%BC%9A%E7%AC%AC3%E7%AB%A0-%E5%AE%8C%E6%88%90%E6%97%B6%E6%80%81/"/>
      <url>/2018/02/11/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E2%80%94%E2%80%94%E4%B8%AD%E7%BA%A7%EF%BC%9A%E7%AC%AC3%E7%AB%A0-%E5%AE%8C%E6%88%90%E6%97%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>第3章.完成时态总结<br><a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""><br><img src="/2018/02/11/英语语法——中级：第3章-完成时态/3.完成时态.png" alt="完成时态"></the></p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
          <category> 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时态 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>英语语法——中级：第2章.名词、定语、状语从句</title>
      <link href="/2018/02/11/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E2%80%94%E2%80%94%E4%B8%AD%E7%BA%A7%EF%BC%9A%E7%AC%AC2%E7%AB%A0-%E5%90%8D%E8%AF%8D%E3%80%81%E5%AE%9A%E8%AF%AD%E3%80%81%E7%8A%B6%E8%AF%AD%E4%BB%8E%E5%8F%A5/"/>
      <url>/2018/02/11/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E2%80%94%E2%80%94%E4%B8%AD%E7%BA%A7%EF%BC%9A%E7%AC%AC2%E7%AB%A0-%E5%90%8D%E8%AF%8D%E3%80%81%E5%AE%9A%E8%AF%AD%E3%80%81%E7%8A%B6%E8%AF%AD%E4%BB%8E%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>第2章.名词、定语、状语从句总结<br><a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""><br><img src="/2018/02/11/英语语法——中级：第2章-名词、定语、状语从句/2.名词、定语、状语从句.png" alt="名词、定语、状语从句"></the></p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
          <category> 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 从句 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>英语语法——中级：第1章.简单句与复合句</title>
      <link href="/2018/02/11/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E2%80%94%E2%80%94%E4%B8%AD%E7%BA%A7%EF%BC%9A%E7%AC%AC1%E7%AB%A0-%E7%AE%80%E5%8D%95%E5%8F%A5%E4%B8%8E%E5%A4%8D%E5%90%88%E5%8F%A5/"/>
      <url>/2018/02/11/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E2%80%94%E2%80%94%E4%B8%AD%E7%BA%A7%EF%BC%9A%E7%AC%AC1%E7%AB%A0-%E7%AE%80%E5%8D%95%E5%8F%A5%E4%B8%8E%E5%A4%8D%E5%90%88%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>第1章.简单句与复合句总结<br><a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""><br><img src="/2018/02/11/英语语法——中级：第1章-简单句与复合句/1.简单句与复合句.png" alt="简单句与复合句"></the></p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
          <category> 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复合句 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vim常用按键总结</title>
      <link href="/2017/11/08/vim%E5%B8%B8%E7%94%A8%E6%8C%89%E9%94%AE%E6%80%BB%E7%BB%93/"/>
      <url>/2017/11/08/vim%E5%B8%B8%E7%94%A8%E6%8C%89%E9%94%AE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>通过对linux中自带的vimtutor命令学习，然后对常用的vim命令进行总结，方便以后忘记了常看<br><a id="more"></a></excerpt></p><the rest="" of="" contents="" |="" 余下全文=""><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim file +n ：打开文件并跳到第N行</span><br><span class="line"></span><br><span class="line">默认显示行号：编辑或新建~/.vimrc   添加一行 set nu 即可，或者在/etc/vimrc 内编辑</span><br></pre></td></tr></table></figure><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>命令的基本模式 <code>operation [number] range</code></p><h3 id="定位移动"><a href="#定位移动" class="headerlink" title="定位移动"></a>定位移动</h3><pre><code>    k上h左       l右     j下4h 左4个字符     4k 上4行     4j 下4行     4l 右4个字符2gg:定位到第2行代码，等同于2G2G:定位到第2行代码gg:定位到整个代码的第1行G:定位到整个代码的最后一行0:行首$:行尾e:向后跳到该单词结束处w:向后跳一个单词的长度，即调到下一个单词的开始处b:向前跳一个单词的长度，即调到上一个单词的开始处2e,2w,2b表示移动2个单位H:当前屏幕可见的第一行M:当前屏幕可见的中间L:当前屏幕可见的最后一行</code></pre><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><pre><code>i:光标处插入a:光标后一个字符处插入A:光标所在行末尾插入o:光标下方新建一行O:光标上方新建一行p: 粘贴y:复制选择的文本yw或ye:复制一个单词yy: 复制 光标所在的这一行4yy: 复制 光标所在行开始向下的4行dd:剪切 光标所在的这一行2dd:剪切 光标所在行 向下 2行d0:从当前的光标开始剪切，一直到行首D:从当前的光标开始剪切，一直到行末dw:删除光标后的一个单词d2w：删除光标后2个单词x:删除当前的光标，每次只会删除一个X:删除当前光标前面的那个，每次只会删除一个r:替换光标后的一个字符R:连续替换光标后的字符ce或cw:修改该单词到单词结尾c$:修改光标后该行的全部内容.:重复执行上一次的命令u:撤销最后的操作U：撤销对整行的修改ctrl+r:反撤销</code></pre><h3 id="翻页"><a href="#翻页" class="headerlink" title="翻页"></a>翻页</h3><pre><code>ctrl+f---&gt;向下翻一页代码ctrl+b---&gt;向上翻一页代码ctrl+d---&gt;向下翻半页代码ctrl+u---&gt;向上翻半页代码v 选中一片代码，然后可以配合d,x,y等进行修改，也可以进来末行模式:w filename 进行另存V:&gt;&gt;:向右移动代码&lt;&lt;:向左移动代码shift+zz:相当于wq</code></pre><h3 id="查找与替换"><a href="#查找与替换" class="headerlink" title="查找与替换"></a>查找与替换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/xxx   向下查找关键字xxx</span><br><span class="line">/xxx\c 忽略大小写</span><br><span class="line">?xxx   向上查找关键字xxx</span><br><span class="line">?xxx\c 忽略大小写</span><br><span class="line">输入n则继续查找下一个匹配</span><br><span class="line">ctrl+o 光标跳转到查询到的上一个位置</span><br><span class="line">ctrl+i  光标跳转到查询到的下一个位置</span><br><span class="line"></span><br><span class="line">% 快速查找光标所在处的括号所匹配的另一个括号 (),[],&#123;&#125;</span><br><span class="line"></span><br><span class="line">:s/old/new 替换该行第一个匹配串</span><br><span class="line">:s/old/new/g  替换该行全部匹配串</span><br><span class="line">:#,#s/old/new/g   替换#到#行之间的词</span><br><span class="line">:%s/old/new/gc  替换全文匹配串，并逐个询问是否替换</span><br></pre></td></tr></table></figure><h2 id="末行模式"><a href="#末行模式" class="headerlink" title="末行模式"></a>末行模式</h2><pre><code>:w 保存:w  filename 保存为指定的文件:q 退出:wq 保存并且推出:x 等同于wq:r filename  读取外部文件粘贴到光标处:r !ls      获取命令输出内容粘贴到光标处</code></pre><p>​</p><h3 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">:set ic查询关键字时忽略大小写</span><br><span class="line">:set is查询关键字时显示部分匹配</span><br><span class="line">:set hls    高亮显示匹配到的关键字‘hlsearch’</span><br><span class="line">:set cp     兼容模式</span><br><span class="line">:set noxxx  关闭上面对应的设置</span><br><span class="line"></span><br><span class="line">:set encoding=utf-8 设置编码</span><br><span class="line">:set number显示行号</span><br><span class="line">:set ruler右下角显示光标当前位置信息</span><br><span class="line">:set cursorline突出当前行</span><br><span class="line">:set tabstop=4设置缩进宽度</span><br><span class="line">:set shiftwidth=4 设置缩进宽度</span><br><span class="line">可以将这些设置偏好设置到 ~/.vimrc文件中</span><br></pre></td></tr></table></figure></the>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
